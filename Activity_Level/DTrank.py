#!/usr/bin/env python3
#
# This code has been produced by a free evaluation version of Daimensions(tm).
# Portions of this code copyright (c) 2019, 2020 by Brainome, Inc. All Rights Reserved.
# Brainome grants an exclusive (subject to our continuing rights to use and modify models),
# worldwide, non-sublicensable, and non-transferable limited license to use and modify this
# predictor produced through the input of your data:
# (i) for users accessing the service through a free evaluation account, solely for your
# own non-commercial purposes, including for the purpose of evaluating this service, and
# (ii) for users accessing the service through a paid, commercial use account, for your
# own internal  and commercial purposes.
# Please contact support@brainome.ai with any questions.
# Use of predictions results at your own risk.
#
# Output of Brainome Daimensions(tm) 0.991 Table Compiler v0.99.
# Invocation: btc train.csv -headerless -f DT -rank -o DTrank.py -riskoverfit --yes
# Total compiler execution time: 0:02:47.06. Finished on: Mar-03-2021 08:47:22.
# This source code requires Python 3.
#
"""
Classifier Type:                    Decision Tree
System Type:                         5-way classifier
Best-guess accuracy:                 22.82%
Overall Model accuracy:              92.55% (3866/4177 correct)
Overall Improvement over best guess: 69.73% (of possible 77.18%)
Model capacity (MEC):                1036 bits
Generalization ratio:                8.63 bits/bit
Model efficiency:                    0.06%/parameter
Confusion Matrix:
 [19.92% 0.62% 0.02% 0.00% 0.05%]
 [1.36% 16.90% 0.19% 0.02% 0.00%]
 [0.14% 0.62% 16.06% 0.00% 0.00%]
 [0.07% 0.00% 0.00% 19.42% 1.77%]
 [0.17% 0.00% 0.00% 2.39% 20.25%]
Generalization index:                2.98
Percent of Data Memorized:           33.61%
Note: Unable to split dataset. The predictor was trained and evaluated on the same data.
Note: Labels have been remapped to '1.0'=0, '2.0'=1, '3.0'=2, '4.0'=3, '5.0'=4.
{"to_select_idxs":[504, 559, 302, 460, 274, 93, 508], "to_ignore_idxs":[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560], "overfit_risk":0.3710219112929325, "risk_progression":[19.347980335370075, 32.62722037735396, 30.484796922823893, 29.60210139517291, 32.65807861741608, 32.81143209992942, 31.266410510826706], "test_accuracy_progression":[[504, 0.7258798180512329], [559, 0.9013646157529327], [302, 0.9066315537467081], [460, 0.9123773042853722], [274, 0.9427819008858032], [93, 0.9566674646875748], [508, 0.9549916207804644]]}

"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler

# Imports -- external
try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "train.csv"


#Number of attributes
num_attr = 7
n_classes = 5
transform_true = False

# Preprocessor for CSV files

ignorelabels=[]
ignorecolumns=["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","505","506","507","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","560",]
target=""
important_idxs=[93,274,302,460,504,508,559]

def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[], trim=False):
    #This function streams in a csv and outputs a csv with the correct columns and target column on the right hand side. 
    #Precursor to clean

    il=[]

    ignorelabels=[]
    ignorecolumns=["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","505","506","507","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","560",]
    target=""
    important_idxs=[93,274,302,460,504,508,559]
    if ignorelabels == [] and ignorecolumns == [] and target == "":
        return -1
    if not trim:
        ignorecolumns = []
    if (testfile):
        target = ''
        hc = -1 
    with open(outputcsvfile, "w+", encoding='utf-8') as outputfile:
        with open(inputcsvfile, "r", encoding='utf-8') as csvfile:      # hardcoded utf-8 encoding per #717
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if not testfile:
                        if (target != ''): 
                            hc = header.index(target)
                        else:
                            hc = len(header) - 1
                            target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if not testfile:
                            if (col == hc):
                                raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                first = True
                for i in range(0, len(header)):

                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    if first:
                        first = False
                    else:
                        print(",", end='', file=outputfile)
                    print(header[i], end='', file=outputfile)
                if not testfile:
                    print("," + header[hc], file=outputfile)
                else:
                    print("", file=outputfile)

                for row in csv.DictReader(open(inputcsvfile, encoding='utf-8')):
                    if target and (row[target] in ignorelabels):
                        continue
                    first = True
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name == target):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[name]):
                            print('"' + row[name].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[name].replace('"', ''), end='', file=outputfile)
                    if not testfile:
                        print("," + row[target], file=outputfile)
                    else:
                        if len(important_idxs) == 1:
                            print(",", file=outputfile)
                        else:
                            print("", file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc = -1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    first = True
                    if (hc == -1) and (not testfile):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[i]):
                            print('"' + row[i].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[i].replace('"', ''), end = '', file=outputfile)
                    if not testfile:
                        print("," + row[hc], file=outputfile)
                    else:
                        if len(important_idxs) == 1:
                            print(",", file=outputfile)
                        else:
                            print("", file=outputfile)


def clean(filename, outfile, rounding=-1, headerless=False, testfile=False, trim=False):
    #This function takes a preprocessed csv and cleans it to real numbers for prediction or validation


    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'1.0': 0, '2.0': 1, '3.0': 2, '4.0': 3, '5.0': 4}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result=float(value)
                if math.isnan(result):
                    #if nan parse to string
                    raise ValueError('')
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    #Function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")


    #Function to convert the class label
    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result


    #Main Cleaning Code
    rowcount = 0
    with open(filename, encoding='utf-8') as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+", encoding='utf-8')
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            if not transform_true:
                rowlen = num_attr if trim else num_attr + len(ignorecolumns)
            else:
                rowlen = num_attr_before_transform if trim else num_attr_before_transform + len(ignorecolumns)      # noqa
            if (not testfile):
                rowlen = rowlen + 1    
            if ((len(row) - (1 if ((testfile and len(important_idxs) == 1)) else 0))  != rowlen) and not (row == ['','']):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs. Expected Row length: " + str(rowlen) + ", Actual Row Length: " + str(len(row)))
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping


# Calculate energy

# Imports -- external
import numpy as np # For numpy see: http://numpy.org
from numpy import array
energy_thresholds = array([-4.03085, -4.03055, -4.02655, -4.025399999999999, -4.02165, -4.0206, -4.02055, -4.0204, -4.005885, -4.005235, -4.0044450000000005, -4.0036, -3.9713499999999997, -3.971, -3.9698, -3.9694000000000003, -3.96, -3.95965, -3.9513, -3.9507000000000003, -3.94925, -3.94905, -3.9462, -3.945, -3.939, -3.9388, -3.93545, -3.9350499999999995, -3.9345499999999998, -3.9344, -3.93285, -3.93255, -3.9325, -3.93225, -3.93185, -3.9317, -3.93035, -3.9302, -3.9284499999999998, -3.92835, -3.928, -3.9278000000000004, -3.9191, -3.918685, -3.91815, -3.91785, -3.91645, -3.9156500000000003, -3.9142499999999996, -3.9121, -3.9112999999999998, -3.9109, -3.9103000000000003, -3.90985, -3.90695, -3.9059999999999997, -3.9058, -3.90515, -3.9048499999999997, -3.9044499999999998, -3.9041500000000005, -3.9023, -3.9019000000000004, -3.9017, -3.8968999999999996, -3.8956999999999997, -3.8949, -3.8944, -3.8938999999999995, -3.8932, -3.893, -3.893, -3.8920500000000002, -3.8920000000000003, -3.8916500000000003, -3.8911500000000006, -3.8889499999999995, -3.8885499999999995, -3.88635, -3.88615, -3.8846999999999996, -3.8843, -3.8839, -3.8835, -3.88085, -3.8805499999999995, -3.8789, -3.8784, -3.87765, -3.8772, -3.87695, -3.8765499999999995, -3.8754999999999997, -3.8745000000000003, -3.872, -3.8713499999999996, -3.8709, -3.8702, -3.8689999999999998, -3.8687, -3.86495, -3.8644499999999997, -3.8625499999999997, -3.86205, -3.862, -3.8615, -3.8602499999999997, -3.8601, -3.8555, -3.8550000000000004, -3.8545, -3.8535500000000003, -3.8514999999999997, -3.85065, -3.85015, -3.8499999999999996, -3.8492, -3.8483649999999994, -3.848, -3.8470000000000004, -3.8462000000000005, -3.8455000000000004, -3.8449999999999998, -3.8435, -3.8425000000000002, -3.8419999999999996, -3.8417499999999998, -3.841, -3.8405000000000005, -3.8400000000000003, -3.8395, -3.8389999999999995, -3.8384, -3.837999999999999, -3.8374999999999995, -3.8367000000000004, -3.8362000000000003, -3.8359999999999994, -3.8339999999999996, -3.8337999999999997, -3.8332900000000003, -3.83275, -3.83225, -3.8319, -3.8317, -3.83, -3.82965, -3.8291500000000003, -3.8289999999999997, -3.82855, -3.82805, -3.8280000000000003, -3.8279499999999995, -3.8260000000000005, -3.8259999999999996, -3.82555, -3.82505, -3.8245, -3.8235, -3.8150000000000004, -3.8149999999999995, -3.8145, -3.8135000000000003, -3.8125, -3.8120000000000003, -3.81155, -3.81105, -3.809, -3.8085, -3.8055000000000003, -3.8050000000000006, -3.8027049999999996, -3.802205, -3.8005000000000004, -3.8, -3.79885, -3.7982000000000005, -3.7976, -3.7971000000000004, -3.7965, -3.7960000000000003, -3.7936999999999994, -3.793, -3.79075, -3.7902500000000003, -3.7895000000000003, -3.7890000000000006, -3.7859999999999996, -3.7855, -3.7799999999999994, -3.7794999999999996, -3.7767, -3.7762000000000002, -3.7718499999999997, -3.77135, -3.7686499999999996, -3.76815, -3.76355, -3.7630500000000002, -3.7504999999999997, -3.75, -3.748, -3.7474999999999996, -3.7455000000000003, -3.745, -3.74395, -3.7424999999999997, -3.74165, -3.74115, -3.738, -3.737, -3.7359999999999998, -3.7359999999999998, -3.7350000000000003, -3.7344999999999997, -3.7336, -3.7331, -3.7325000000000004, -3.732, -3.7195, -3.7190000000000003, -3.71875, -3.7175000000000002, -3.7151999999999994, -3.7142, -3.713, -3.7124999999999995, -3.7039999999999997, -3.7035, -3.6945, -3.694, -3.692, -3.6914999999999996, -3.6905, -3.6900000000000004, -3.6869999999999994, -3.6855, -3.6790000000000003, -3.6789999999999994, -3.6706499999999997, -3.67015, -3.6645000000000003, -3.6639999999999997, -3.6628000000000003, -3.66205, -3.6595, -3.6580000000000004, -3.633, -3.6305000000000005, -3.6265, -3.6260000000000003, -3.6005000000000003, -3.5984999999999996, -3.5885, -3.5860000000000003, -3.5775, -3.5740000000000003, -3.5685, -3.567, -3.5649999999999995, -3.5645, -3.5595, -3.5538500000000006, -3.548, -3.5398000000000005, -3.5263, -3.5185, -3.5125, -3.5045, -3.4975, -3.4854999999999996, -3.4784999999999995, -3.4725, -3.4665000000000004, -3.4625000000000004, -3.456, -3.444, -3.4415, -3.4405, -3.43975, -3.4377500000000003, -3.434, -3.43, -3.4264, -3.4213999999999998, -3.4104, -3.40825, -3.4042499999999998, -3.4008499999999997, -3.40035, -3.3950000000000005, -3.3825, -3.38, -3.3778500000000005, -3.37635, -3.3754999999999997, -3.3745000000000003, -3.3735, -3.3728500000000006, -3.37235, -3.3715, -3.37035, -3.3667999999999996, -3.3655, -3.3594999999999997, -3.3553499999999996, -3.3545, -3.35055, -3.331, -3.329, -3.3265000000000002, -3.3245999999999998, -3.3240999999999996, -3.3194999999999997, -3.30675, -3.305, -3.303, -3.3005499999999994, -3.2987, -3.2982, -3.2979700000000003, -3.2755, -3.274, -3.2739000000000003, -3.2734, -3.26865, -3.2652, -3.2104999999999997, -3.2095, -3.1927000000000003, -3.1922, -3.17155, -3.17105, -3.1515000000000004, -3.1500000000000004, -3.12845, -3.12645, -3.0359999999999996, -3.0345499999999994, -2.9384999999999994, -2.9365499999999995, -2.9328000000000003, -2.9311, -2.92605, -2.9255000000000004, -2.8929, -2.8924000000000003, -2.8842999999999996, -2.8828000000000005, -2.87425, -2.873, -2.8712999999999997, -2.8703000000000003, -2.8534999999999995, -2.8525, -2.851, -2.8495, -2.8455, -2.8425000000000002, -2.8415, -2.8409999999999997, -2.8200000000000003, -2.8196999999999997, -2.8086649999999995, -2.8078650000000005, -2.8055000000000003, -2.8040000000000003, -2.80115, -2.8004000000000002, -2.79965, -2.7992500000000002, -2.798, -2.7969999999999997, -2.75795, -2.752, -2.7464999999999997, -2.7445, -2.7415000000000003, -2.7405000000000004, -2.7381, -2.7367500000000002, -2.73297, -2.732, -2.72825, -2.7272499999999997, -2.72585, -2.7253499999999997, -2.7188999999999997, -2.7164, -2.7115, -2.7105, -2.7059999999999995, -2.7045, -2.6999199999999997, -2.69927, -2.6720500000000005, -2.6719999999999997, -2.6694000000000004, -2.6682500000000005, -2.6645, -2.6612, -2.66, -2.6594999999999995, -2.6585, -2.6580000000000004, -2.65475, -2.65425, -2.6450000000000005, -2.644, -2.643, -2.6375, -2.6369999999999996, -2.6365499999999997, -2.63605, -2.6335000000000006, -2.63, -2.6285499999999997, -2.62705, -2.627, -2.6237500000000002, -2.623, -2.6224499999999997, -2.6202000000000005, -2.6149999999999998, -2.6134999999999997, -2.6105, -2.6094999999999997, -2.6055, -2.6029999999999998, -2.601, -2.5995, -2.5985, -2.5974, -2.5917000000000003, -2.588, -2.5854999999999997, -2.5845000000000002, -2.5836500000000004, -2.5829500000000003, -2.5815, -2.5810000000000004, -2.5783500000000004, -2.577, -2.57409, -2.5715000000000003, -2.5645, -2.5635000000000003, -2.5573500000000005, -2.5553500000000002, -2.55, -2.5495, -2.5490000000000004, -2.548, -2.5465, -2.5460000000000003, -2.54595, -2.5454499999999998, -2.544, -2.5429500000000003, -2.5428500000000005, -2.5375, -2.5359999999999996, -2.5349999999999997, -2.5338499999999997, -2.5225, -2.5199, -2.5155000000000003, -2.5105000000000004, -2.509, -2.507, -2.5055, -2.5034, -2.5023999999999997, -2.4977500000000004, -2.4960000000000004, -2.492, -2.4914500000000004, -2.487, -2.4844999999999997, -2.4815, -2.476, -2.4725, -2.4682, -2.4675, -2.4615, -2.4608, -2.4603, -2.45995, -2.4593499999999997, -2.4589999999999996, -2.457, -2.455, -2.4492, -2.44595, -2.443, -2.4385, -2.4370000000000003, -2.432, -2.4299999999999997, -2.4290000000000003, -2.4275, -2.4269999999999996, -2.42675, -2.42565, -2.4251500000000004, -2.41975, -2.41805, -2.41675, -2.4147499999999997, -2.40715, -2.3994999999999997, -2.3981, -2.3960999999999997, -2.393, -2.391, -2.3890000000000002, -2.3857000000000004, -2.3845, -2.3827, -2.3810000000000002, -2.3805, -2.38, -2.37905, -2.37805, -2.377, -2.3739999999999997, -2.3705, -2.3674999999999997, -2.3665000000000003, -2.3645, -2.363, -2.362, -2.3614999999999995, -2.3605, -2.3594999999999997, -2.358, -2.3529999999999998, -2.3525, -2.3514999999999997, -2.3505000000000003, -2.3499499999999998, -2.34945, -2.344, -2.3425000000000002, -2.3420000000000005, -2.3390000000000004, -2.338, -2.3365, -2.3355, -2.3349, -2.3343999999999996, -2.3335, -2.3304150000000003, -2.3285, -2.3258, -2.32495, -2.3235, -2.3225, -2.3215000000000003, -2.3155, -2.31485, -2.31215, -2.31, -2.3085000000000004, -2.30755, -2.3070500000000003, -2.3064999999999998, -2.3057499999999997, -2.30525, -2.3045, -2.3035, -2.30175, -2.30025, -2.3, -2.2995, -2.29795, -2.2929000000000004, -2.2915, -2.2904999999999998, -2.287, -2.28385, -2.2824999999999998, -2.282, -2.2811, -2.2714999999999996, -2.2705, -2.2664999999999997, -2.2655000000000003, -2.26475, -2.263, -2.258, -2.2574999999999994, -2.2558, -2.25525, -2.2535, -2.247, -2.2455000000000003, -2.23925, -2.239, -2.2355, -2.2344999999999997, -2.2329999999999997, -2.2305, -2.2245, -2.223, -2.2219499999999996, -2.22095, -2.2190000000000003, -2.218, -2.2179149999999996, -2.217415, -2.2168, -2.2163000000000004, -2.2155, -2.2145, -2.213, -2.2124999999999995, -2.2102, -2.2095000000000002, -2.2075000000000005, -2.2060000000000004, -2.2045000000000003, -2.2, -2.199, -2.1980000000000004, -2.1979999999999995, -2.1975, -2.1965, -2.1955, -2.1941499999999996, -2.19215, -2.19091, -2.1887, -2.186, -2.1849999999999996, -2.1839500000000003, -2.1805000000000003, -2.1783, -2.1762999999999995, -2.1725000000000003, -2.1719999999999997, -2.1715, -2.1710000000000003, -2.1662, -2.165, -2.15395, -2.1534500000000003, -2.1529, -2.1525499999999997, -2.1515000000000004, -2.15045, -2.1495499999999996, -2.14905, -2.1486099999999997, -2.14811, -2.1394, -2.1390000000000002, -2.1365, -2.136, -2.13295, -2.1319500000000002, -2.1309, -2.1304, -2.1265, -2.1260000000000003, -2.1259499999999996, -2.12545, -2.12045, -2.11945, -2.1151999999999997, -2.1136999999999997, -2.1085000000000003, -2.1075, -2.1, -2.0949999999999998, -2.0934999999999997, -2.09255, -2.0920500000000004, -2.0763499999999997, -2.0735, -2.0725, -2.0709999999999997, -2.0650500000000003, -2.06405, -2.0629999999999997, -2.0451, -2.04375, -2.0431500000000002, -2.042, -2.04, -2.0380000000000003, -2.0360000000000005, -2.0265, -2.02555, -2.0067999999999997, -2.0062999999999995, -2.0056, -2.0046, -2.0039999999999996, -2.0029999999999997, -1.9979, -1.9964, -1.9945, -1.9929999999999999, -1.992, -1.98765, -1.9872, -1.9849999999999999, -1.9823499999999998, -1.98135, -1.98, -1.9729999999999999, -1.97095, -1.97045, -1.9696000000000002, -1.9684, -1.9673, -1.9665, -1.9634999999999998, -1.9586999999999999, -1.95825, -1.9565, -1.9545, -1.9508, -1.9493000000000003, -1.9409999999999998, -1.9409999999999998, -1.9388, -1.9383, -1.937475, -1.935425, -1.9295, -1.928, -1.9225000000000003, -1.9215, -1.92055, -1.91955, -1.9183999999999999, -1.9169, -1.9155000000000002, -1.9145499999999998, -1.9130499999999997, -1.9083500000000004, -1.9068, -1.9035, -1.9015, -1.8975, -1.8970000000000002, -1.8969999999999998, -1.8964999999999999, -1.8954999999999997, -1.8946, -1.8941000000000001, -1.8812000000000002, -1.8795000000000002, -1.8785, -1.8765, -1.875, -1.874, -1.86965, -1.8691500000000003, -1.8682499999999997, -1.86625, -1.8618999999999999, -1.859, -1.8537000000000001, -1.8532000000000002, -1.853, -1.8399, -1.83965, -1.83725, -1.83455, -1.8299999999999998, -1.827, -1.8192, -1.81765, -1.81615, -1.81265, -1.8085, -1.8057500000000002, -1.79615, -1.79515, -1.79385, -1.7917, -1.7906649999999997, -1.7903149999999999, -1.7895, -1.7873500000000002, -1.771, -1.7685, -1.767, -1.76575, -1.7642499999999999, -1.7637, -1.7602000000000002, -1.7599, -1.7558499999999997, -1.752405, -1.7480000000000002, -1.7470000000000003, -1.7458000000000002, -1.7443, -1.7417999999999998, -1.7399499999999999, -1.73765, -1.73135, -1.7304999999999997, -1.7298999999999998, -1.7288999999999999, -1.7272, -1.7243, -1.7211500000000002, -1.721, -1.7189999999999999, -1.7155, -1.71395, -1.7128, -1.7095000000000002, -1.7075, -1.7047500000000002, -1.70405, -1.6954999999999996, -1.6944999999999997, -1.6931250000000002, -1.6912500000000001, -1.6871999999999998, -1.68235, -1.67835, -1.67805, -1.66898, -1.66812, -1.6677, -1.6640000000000001, -1.6607499999999997, -1.6601499999999998, -1.6594499999999996, -1.65665, -1.65405, -1.65305, -1.65155, -1.6487500000000002, -1.6459400000000002, -1.64404, -1.6424500000000002, -1.6412, -1.64045, -1.6395, -1.6378, -1.6352600000000002, -1.6340100000000002, -1.63225, -1.63055, -1.6296149999999998, -1.6255, -1.624425, -1.6195, -1.61655, -1.6160499999999998, -1.60588, -1.60323, -1.59835, -1.5940000000000003, -1.5925500000000001, -1.59155, -1.5868000000000002, -1.5858999999999999, -1.5846999999999998, -1.5836999999999999, -1.5818500000000002, -1.5802, -1.57355, -1.571, -1.568, -1.5646499999999999, -1.563, -1.56005, -1.55625, -1.5543150000000001, -1.5512000000000001, -1.5468899999999999, -1.54624, -1.5454, -1.5439500000000002, -1.5409000000000002, -1.5404, -1.5393499999999998, -1.5385499999999999, -1.53205, -1.5309, -1.5305, -1.5273949999999998, -1.52485, -1.5054000000000003, -1.5051, -1.501415, -1.4969000000000001, -1.49085, -1.4811500000000002, -1.4784450000000002, -1.47375, -1.47295, -1.47195, -1.4707500000000002, -1.4619500000000003, -1.4586000000000001, -1.4539, -1.4531999999999998, -1.4510999999999998, -1.44898, -1.4414749999999998, -1.43765, -1.4266999999999999, -1.4249999999999998, -1.42375, -1.4196, -1.41779, -1.39715, -1.38465, -1.3821, -1.38015, -1.3779000000000001, -1.3671, -1.3649499999999999, -1.360555, -1.357005, -1.3564499999999997, -1.3562499999999997, -1.35465, -1.35455, -1.35425, -1.3537000000000001, -1.3459999999999996, -1.3459499999999998, -1.342835, -1.341335, -1.33935, -1.3376000000000001, -1.3367, -1.33635, -1.3357499999999998, -1.3345500000000001, -1.332205, -1.3301999999999998, -1.3288499999999999, -1.3284500000000001, -1.3279999999999998, -1.3274999999999997, -1.3265999999999996, -1.31985, -1.3171, -1.3006, -1.2993999999999999, -1.2971999999999997, -1.29525, -1.28945, -1.2869000000000002, -1.28565, -1.2804, -1.2641499999999999, -1.263, -1.2608000000000001, -1.2597, -1.25075, -1.2487, -1.223145, -1.22215, -1.2121, -1.2095, -1.2077499999999999, -1.2041499999999998, -1.194385, -1.1878000000000002, -1.1867999999999999, -1.1835, -1.1800000000000002, -1.1774999999999998, -1.1583, -1.15485, -1.1502000000000001, -1.14995, -1.1492499999999999, -1.1482299999999999, -1.142975, -1.1399750000000002, -1.1381000000000001, -1.1327450000000001, -1.1265, -1.11025, -1.1088500000000001, -1.105835, -1.069, -1.06765, -1.06675, -1.0664500000000001, -1.0621, -1.0551, -1.053345, -1.052295, -1.0499999999999998, -1.0492499999999998, -1.043695, -1.03735, -1.022, -1.0205000000000002, -0.9991499999999999, -0.997, -0.9697, -0.9660900000000001, -0.9640900000000001, -0.9625000000000001, -0.9144499999999998, -0.91355, -0.906945, -0.9045, -0.8871799999999999, -0.8807499999999999, -0.843485, -0.8419000000000001, -0.8404999999999998, -0.83895, -0.81507, -0.81495, -0.8008649999999999, -0.7961500000000001, -0.7498, -0.7479500000000001, -0.7085500000000002, -0.7019000000000001, -0.618, -0.6134999999999999, -0.46904999999999997, -0.46685, -0.4218, -0.4204, -0.14666, -0.14404999999999993])
labels = array([4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 0.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 0.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 0.0, 4.0, 3.0, 0.0, 4.0, 0.0, 4.0, 3.0, 0.0, 4.0, 0.0, 4.0, 0.0, 4.0, 3.0, 0.0, 3.0, 0.0, 4.0, 0.0, 4.0, 0.0, 4.0, 3.0, 0.0, 4.0, 0.0, 3.0, 4.0, 0.0, 3.0, 4.0, 0.0, 4.0, 0.0, 3.0, 0.0, 4.0, 0.0, 4.0, 0.0, 3.0, 0.0, 3.0, 0.0, 4.0, 0.0, 3.0, 0.0, 3.0, 4.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 4.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 3.0, 0.0, 3.0, 0.0, 3.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 3.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 0.0, 1.0, 0.0, 3.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 3.0, 0.0, 1.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 3.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 0.0, 1.0, 0.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 3.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 3.0, 1.0, 0.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 1.0, 0.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 0.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 0.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0])
def eqenergy(rows):
    try:
        return np.sum(rows, axis=1, dtype=np.float128)
    except:
        return np.sum(rows, axis=1, dtype=np.longdouble)
def classify(rows):
    energys = eqenergy(rows)

    def thresh_search(input_energys):
        numers = np.searchsorted(energy_thresholds, input_energys, side='left')-1
        indys = np.argwhere(np.logical_and(numers<=len(energy_thresholds), numers>=0)).reshape(-1)
        defaultindys = np.argwhere(np.logical_not(np.logical_and(numers<=len(energy_thresholds), numers>=0))).reshape(-1)
        outputs = np.zeros(input_energys.shape[0])
        outputs[indys] = labels[numers[indys]]
        if list(defaultindys):
            outputs[defaultindys] = 3
        return outputs
    return thresh_search(energys)

numthresholds = 1036

# Main method
model_cap = numthresholds


def Validate(file):
    #Load Array
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')


    if n_classes == 2:
        #note that classification is a single line of code
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0 = 0, 0, 0, 0, 0, 0, 0, 0
        correct_count = int(np.sum(outputs.reshape(-1) == cleanarr[:, -1].reshape(-1)))
        count = outputs.shape[0]
        num_TP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 1)))
        num_TN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 0)))
        num_FN = int(np.sum(np.logical_and(outputs.reshape(-1) == 0, cleanarr[:, -1].reshape(-1) == 1)))
        num_FP = int(np.sum(np.logical_and(outputs.reshape(-1) == 1, cleanarr[:, -1].reshape(-1) == 0)))
        num_class_0 = int(np.sum(cleanarr[:, -1].reshape(-1) == 0))
        num_class_1 = int(np.sum(cleanarr[:, -1].reshape(-1) == 1))
        return count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, outputs, cleanarr[:, -1]


    else:
        #validation
        outputs = classify(cleanarr[:, :-1])


        #metrics
        count, correct_count = 0, 0
        numeachclass = {}
        for k, o in enumerate(outputs):
            if int(o) == int(float(cleanarr[k, -1])):
                correct_count += 1
            if int(float(cleanarr[k, -1])) in numeachclass.keys():
                numeachclass[int(float(cleanarr[k, -1]))] += 1
            else:
                numeachclass[int(float(cleanarr[k, -1]))] = 1
            count += 1
        return count, correct_count, numeachclass, outputs, cleanarr[:, -1]


#Predict on unlabeled data
def Predict(file, get_key, headerless, preprocessedfile, classmapping, trim=False):
    cleanarr = np.loadtxt(file, delimiter=',', dtype='float64')
    cleanarr = cleanarr.reshape(cleanarr.shape[0], -1)
    if not trim and ignorecolumns != []:
        cleanarr = cleanarr[:, important_idxs]
    with open(preprocessedfile, 'r', encoding='utf-8') as csvinput:
        dirtyreader = csv.reader(csvinput)
        if not headerless:
            header = next(dirtyreader, None)
        #print original header
        if (not headerless):
            print(','.join(header + ["Prediction"]))

        outputs = classify(cleanarr)

        for k, row in enumerate(dirtyreader):
            if k >= outputs.shape[0]:
                continue
            print(str(','.join(str(j) for j in (['"' + i + '"' if ',' in i else i for i in row]))) + str(',' if len(important_idxs) != 1 else '') + str(get_key(int(outputs[k]), classmapping)))
                




#Main
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    parser.add_argument('-trim', action="store_true", default=False, help="Output predictor file with only the selected important attributes (to be used with predictors built with -rank)")
    args = parser.parse_args()
    faulthandler.enable()


    if args.validate:
        args.trim = True


    #clean if not already clean
    if not args.cleanfile:
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        output = preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate), trim=args.trim)
        get_key, classmapping = clean(preprocessedfile if output!=-1 else args.csvfile, cleanfile, -1, args.headerless, (not args.validate), trim=args.trim)
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}
        output = None

    #Predict or Validate?
    if not args.validate:
        Predict(cleanfile, get_key, args.headerless, preprocessedfile if output!=-1 else args.csvfile, classmapping, trim=args.trim)


    else:
        classifier_type = 'DT'
        if n_classes == 2:
            count, correct_count, num_TP, num_TN, num_FP, num_FN, num_class_1, num_class_0, preds, true_labels = Validate(cleanfile)
        else:
            count, correct_count, numeachclass, preds, true_labels = Validate(cleanfile)


        #validation report
        if args.json:
            import json
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count

            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            classbalance = [float(num_class_0)/count, float(num_class_1)/count]
            H = float(-1.0 * sum([classbalance[i] * math.log(classbalance[i]) / math.log(2) for i in range(len(classbalance))]))

            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            json_dict = {'instance_count':                        count ,
                         'classifier_type':                        classifier_type,
                         'classes':                            2 ,
                         'false_negative_instances':    num_FN ,
                         'false_positive_instances':    num_FP ,
                         'true_positive_instances':    num_TP ,
                         'true_negative_instances':    num_TN,
                         'false_negatives':                        FN ,
                         'false_positives':                        FP ,
                         'true_negatives':                        TN ,
                         'true_positives':                        TP ,
                         'number_correct':                        num_correct ,
                         'accuracy': {
                             'best_guess': randguess,
                             'improvement': modelacc-randguess,
                             'model_accuracy': modelacc,
                         },
                         'model_capacity':                        model_cap ,
                         'generalization_ratio':                int(float(num_correct * 100) / model_cap) * H/ 100.0,
                         'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0,
                        'shannon_entropy_of_labels':           H,
                        'classbalance':                        classbalance}
            if args.json:
                pass
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                elif classifier_type == 'RF':
                    print("Classifier Type:                    Random Forest")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        Binary classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0 * H) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
                print("System behavior")
                print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
                print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
                print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
                print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
                if int(num_TP + num_FN) != 0:
                    print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
                if int(num_TN + num_FP) != 0:
                    print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
                if int(num_TP + num_FP) != 0:
                    print("Precision:                          {:.2f}".format(PPV))
                if int(2 * num_TP + num_FP + num_FN) != 0:
                    print("F-1 Measure:                        {:.2f}".format(FONE))
                if int(num_TP + num_FN) != 0:
                    print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
                if int(num_TP + num_FN + num_FP) != 0:
                    print("Critical Success Index:             {:.2f}".format(TS))
        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            classbalance = [float(numofcertainclass) / count for numofcertainclass in numeachclass.values()]
            H = float(-1.0 * sum([classbalance[i] * math.log(classbalance[i]) / math.log(2) for i in range(len(classbalance))]))

            if args.json:
                json_dict = {'instance_count':                        count,
                            'classifier_type':                        classifier_type,
                            'classes':                            n_classes,
                             'number_correct': num_correct,
                             'accuracy': {
                                 'best_guess': randguess,
                                 'improvement': modelacc - randguess,
                                 'model_accuracy': modelacc,
                             },
                             'model_capacity': model_cap,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0 * H,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0,
                        'shannon_entropy_of_labels':           H,
                        'classbalance':                        classbalance}
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                elif classifier_type == 'RF':
                    print("Classifier Type:                    Random Forest")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        " + str(n_classes) + "-way classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0 * H) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))

        try:
            import numpy as np # For numpy see: http://numpy.org
            from numpy import array
        except:
            print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

        def confusion_matrix(y_true, y_pred, json, labels=None, sample_weight=None, normalize=None):
            stats = {}
            if labels is None:
                labels = np.array(list(set(list(y_true.astype('int')))))
            else:
                labels = np.asarray(labels)
                if np.all([l not in y_true for l in labels]):
                    raise ValueError("At least one label specified must be in y_true")
            n_labels = labels.size

            for class_i in range(n_labels):
                stats[class_i] = {'TP':{},'FP':{},'FN':{},'TN':{}}
                class_i_indices = np.argwhere(y_true==class_i)
                not_class_i_indices = np.argwhere(y_true!=class_i)
                stats[int(class_i)]['TP'] = int(np.sum(y_pred[class_i_indices]==y_true[class_i_indices]))
                stats[int(class_i)]['FP'] = int(np.sum(y_pred[class_i_indices]!=y_true[class_i_indices]))
                stats[int(class_i)]['TN'] = int(np.sum(y_pred[not_class_i_indices]==y_true[not_class_i_indices]))
                stats[int(class_i)]['FN'] = int(np.sum(y_pred[not_class_i_indices]!=y_true[not_class_i_indices]))
            #check for numpy/scipy is imported
            try:
                from scipy.sparse import coo_matrix #required for multiclass metrics
            except:
                if not json:
                    print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                    sys.exit()
                else:
                    return np.array([]), stats
                

            # Compute confusion matrix to evaluate the accuracy of a classification.
            # By definition a confusion matrix :math:C is such that :math:C_{i, j}
            # is equal to the number of observations known to be in group :math:i and
            # predicted to be in group :math:j.
            # Thus in binary classification, the count of true negatives is
            # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
            # :math:C_{1,1} and false positives is :math:C_{0,1}.
            # Read more in the :ref:User Guide <confusion_matrix>.
            # Parameters
            # ----------
            # y_true : array-like of shape (n_samples,)
            # Ground truth (correct) target values.
            # y_pred : array-like of shape (n_samples,)
            # Estimated targets as returned by a classifier.
            # labels : array-like of shape (n_classes), default=None
            # List of labels to index the matrix. This may be used to reorder
            # or select a subset of labels.
            # If None is given, those that appear at least once
            # in y_true or y_pred are used in sorted order.
            # sample_weight : array-like of shape (n_samples,), default=None
            # Sample weights.
            # normalize : {'true', 'pred', 'all'}, default=None
            # Normalizes confusion matrix over the true (rows), predicted (columns)
            # conditions or all the population. If None, confusion matrix will not be
            # normalized.
            # Returns
            # -------
            # C : ndarray of shape (n_classes, n_classes)
            # Confusion matrix.
            # References
            # ----------



            if sample_weight is None:
                sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
            else:
                sample_weight = np.asarray(sample_weight)
            if y_true.shape[0]!=y_pred.shape[0]:
                raise ValueError("y_true and y_pred must be of the same length")

            if normalize not in ['true', 'pred', 'all', None]:
                raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


            label_to_ind = {y: x for x, y in enumerate(labels)}
            # convert yt, yp into index
            y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
            y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
            # intersect y_pred, y_true with labels, eliminate items not in labels
            ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
            y_pred = y_pred[ind]
            y_true = y_true[ind]

            # also eliminate weights of eliminated items
            sample_weight = sample_weight[ind]
            # Choose the accumulator dtype to always have high precision
            if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                dtype = np.int64
            else:
                dtype = np.float64
            cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


            with np.errstate(all='ignore'):
                if normalize == 'true':
                    cm = cm / cm.sum(axis=1, keepdims=True)
                elif normalize == 'pred':
                    cm = cm / cm.sum(axis=0, keepdims=True)
                elif normalize == 'all':
                    cm = cm / cm.sum()
                cm = np.nan_to_num(cm)
            return cm, stats
        mtrx, stats = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1), args.json)
        if args.json:
            json_dict['confusion_matrix'] = mtrx.tolist()
            json_dict['multiclass_stats'] = stats
            print(json.dumps(json_dict))
        else:
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print("Confusion Matrix:")
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])


    #remove tempfile if created
    if not args.cleanfile: 
        os.remove(cleanfile)
        if output!=-1:
            os.remove(preprocessedfile)
