#!/usr/bin/env python3
#
# This code has been produced by a free evaluation version of Daimensions(tm).
# Portions of this code copyright (c) 2019, 2020 by Brainome, Inc. All Rights Reserved.
# Brainome grants an exclusive (subject to our continuing rights to use and modify models),
# worldwide, non-sublicensable, and non-transferable limited license to use and modify this
# predictor produced through the input of your data:
# (i) for users accessing the service through a free evaluation account, solely for your
# own non-commercial purposes, including for the purpose of evaluating this service, and
# (ii) for users accessing the service through a paid, commercial use account, for your
# own internal  and commercial purposes.
# Please contact support@brainome.ai with any questions.
# Use of predictions results at your own risk.
#
# Output of Brainome Daimensions(tm) 0.991 Table Compiler v0.99.
# Invocation: btc train.csv -headerless -f RF -rank -o RFrank.py -riskoverfit --yes
# Total compiler execution time: 0:02:48.61. Finished on: Mar-03-2021 08:55:46.
# This source code requires Python 3.
#
"""
Classifier Type:                    Random Forest
System Type:                         5-way classifier
Best-guess accuracy:                 22.82%
Overall Model accuracy:              100.00% (4177/4177 correct)
Overall Improvement over best guess: 77.18% (of possible 77.18%)
Model capacity (MEC):                11 bits
Generalization ratio:                878.60 bits/bit
Model efficiency:                    7.01%/parameter
Confusion Matrix:
 [20.61% 0.00% 0.00% 0.00% 0.00%]
 [0.00% 18.48% 0.00% 0.00% 0.00%]
 [0.00% 0.00% 16.83% 0.00% 0.00%]
 [0.00% 0.00% 0.00% 21.26% 0.00%]
 [0.00% 0.00% 0.00% 0.00% 22.82%]
Generalization index:                302.93
Percent of Data Memorized:           0.33%
Note: Unable to split dataset. The predictor was trained and evaluated on the same data.
Note: Labels have been remapped to '1.0'=0, '2.0'=1, '3.0'=2, '4.0'=3, '5.0'=4.
{"to_select_idxs":[504, 559, 302, 460, 274, 93, 508], "to_ignore_idxs":[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560], "overfit_risk":0.3710219112929325, "risk_progression":[19.347980335370075, 32.62722037735396, 30.484796922823893, 29.60210139517291, 32.65807861741608, 32.81143209992942, 31.266410510826706], "test_accuracy_progression":[[504, 0.7258798180512329], [559, 0.9013646157529327], [302, 0.9066315537467081], [460, 0.9123773042853722], [274, 0.9427819008858032], [93, 0.9566674646875748], [508, 0.9549916207804644]]}

"""

# Imports -- Python3 standard library
import sys
import math
import os
import argparse
import tempfile
import csv
import binascii
import faulthandler


# Magic constants follow
# I/O buffer for clean. Reduce this constant for low memory devices. 
IOBUF = 100000000

# Ugly workaround for large classifiers
sys.setrecursionlimit(1000000)

# Training file given to compiler
TRAINFILE = "train.csv"

try:
    import numpy as np # For numpy see: http://numpy.org
    from numpy import array
except:
    print("This predictor requires the Numpy library. For installation instructions please refer to: http://numpy.org")

#Number of attributes
num_attr = 7
n_classes = 5
transform_true = False

# Preprocessor for CSV files

ignorelabels=[]
ignorecolumns=["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","505","506","507","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","560",]
target=""
important_idxs=[93,274,302,460,504,508,559]

def preprocess(inputcsvfile, outputcsvfile, headerless=False, testfile=False, target='', ignorecolumns=[], ignorelabels=[], trim=False):
    #This function streams in a csv and outputs a csv with the correct columns and target column on the right hand side. 
    #Precursor to clean

    il=[]

    ignorelabels=[]
    ignorecolumns=["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","505","506","507","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","560",]
    target=""
    important_idxs=[93,274,302,460,504,508,559]
    if ignorelabels == [] and ignorecolumns == [] and target == "":
        return -1
    if not trim:
        ignorecolumns = []
    if (testfile):
        target = ''
        hc = -1 
    with open(outputcsvfile, "w+", encoding='utf-8') as outputfile:
        with open(inputcsvfile, "r", encoding='utf-8') as csvfile:      # hardcoded utf-8 encoding per #717
            reader = csv.reader(csvfile)
            if (headerless == False):
                header=next(reader, None)
                try:
                    if not testfile:
                        if (target != ''): 
                            hc = header.index(target)
                        else:
                            hc = len(header) - 1
                            target=header[hc]
                except:
                    raise NameError("Target '" + target + "' not found! Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = header.index(ignorecolumns[i])
                        if not testfile:
                            if (col == hc):
                                raise ValueError("Attribute '" + ignorecolumns[i] + "' is the target. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise NameError("Attribute '" + ignorecolumns[i] + "' not found in header. Header must be same as in file passed to btc.")
                first = True
                for i in range(0, len(header)):

                    if (i == hc):
                        continue
                    if (i in il):
                        continue
                    if first:
                        first = False
                    else:
                        print(",", end='', file=outputfile)
                    print(header[i], end='', file=outputfile)
                if not testfile:
                    print("," + header[hc], file=outputfile)
                else:
                    print("", file=outputfile)

                for row in csv.DictReader(open(inputcsvfile, encoding='utf-8')):
                    if target and (row[target] in ignorelabels):
                        continue
                    first = True
                    for name in header:
                        if (name in ignorecolumns):
                            continue
                        if (name == target):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[name]):
                            print('"' + row[name].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[name].replace('"', ''), end='', file=outputfile)
                    if not testfile:
                        print("," + row[target], file=outputfile)
                    else:
                        if len(important_idxs) == 1:
                            print(",", file=outputfile)
                        else:
                            print("", file=outputfile)

            else:
                try:
                    if (target != ""): 
                        hc = int(target)
                    else:
                        hc = -1
                except:
                    raise NameError("No header found but attribute name given as target. Header must be same as in file passed to btc.")
                for i in range(0, len(ignorecolumns)):
                    try:
                        col = int(ignorecolumns[i])
                        if (col == hc):
                            raise ValueError("Attribute " + str(col) + " is the target. Cannot ignore. Header must be same as in file passed to btc.")
                        il = il + [col]
                    except ValueError:
                        raise
                    except:
                        raise ValueError("No header found but attribute name given in ignore column list. Header must be same as in file passed to btc.")
                for row in reader:
                    first = True
                    if (hc == -1) and (not testfile):
                        hc = len(row) - 1
                    if (row[hc] in ignorelabels):
                        continue
                    for i in range(0, len(row)):
                        if (i in il):
                            continue
                        if (i == hc):
                            continue
                        if first:
                            first = False
                        else:
                            print(",", end='', file=outputfile)
                        if (',' in row[i]):
                            print('"' + row[i].replace('"', '') + '"', end='', file=outputfile)
                        else:
                            print(row[i].replace('"', ''), end = '', file=outputfile)
                    if not testfile:
                        print("," + row[hc], file=outputfile)
                    else:
                        if len(important_idxs) == 1:
                            print(",", file=outputfile)
                        else:
                            print("", file=outputfile)


def clean(filename, outfile, rounding=-1, headerless=False, testfile=False, trim=False):
    #This function takes a preprocessed csv and cleans it to real numbers for prediction or validation


    clean.classlist = []
    clean.testfile = testfile
    clean.mapping = {}
    clean.mapping={'1.0': 0, '2.0': 1, '3.0': 2, '4.0': 3, '5.0': 4}

    def convert(cell):
        value = str(cell)
        try:
            result = int(value)
            return result
        except:
            try:
                result=float(value)
                if math.isnan(result):
                    #if nan parse to string
                    raise ValueError('')
                if (rounding != -1):
                    result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
                return result
            except:
                result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
                return result

    #Function to return key for any value 
    def get_key(val, clean_classmapping):
        if clean_classmapping == {}:
            return val
        for key, value in clean_classmapping.items(): 
            if val == value:
                return key
        if val not in list(clean_classmapping.values):
            raise ValueError("Label key does not exist")


    #Function to convert the class label
    def convertclassid(cell):
        if (clean.testfile):
            return convert(cell)
        value = str(cell)
        if (value == ''):
            raise ValueError("All cells in the target column must contain a class label.")

        if (not clean.mapping == {}):
            result = -1
            try:
                result = clean.mapping[cell]
            except:
                raise ValueError("Class label '" + value + "' encountered in input not defined in user-provided mapping.")
            if (not result == int(result)):
                raise ValueError("Class labels must be mapped to integer.")
            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
            return result
        try:
            result = float(cell)
            if (rounding != -1):
                result = int(result * math.pow(10, rounding)) / math.pow(10, rounding)
            else:
                result = int(int(result * 100) / 100)  # round classes to two digits

            if (not str(result) in clean.classlist):
                clean.classlist = clean.classlist + [str(result)]
        except:
            result = (binascii.crc32(value.encode('utf8')) % (1 << 32))
            if (result in clean.classlist):
                result = clean.classlist.index(result)
            else:
                clean.classlist = clean.classlist + [result]
                result = clean.classlist.index(result)
            if (not result == int(result)):
                raise ValueError("Class labels must be mappable to integer.")
        finally:
            if (result < 0):
                raise ValueError("Integer class labels must be positive and contiguous.")

        return result


    #Main Cleaning Code
    rowcount = 0
    with open(filename, encoding='utf-8') as csv_file:
        reader = csv.reader(csv_file)
        f = open(outfile, "w+", encoding='utf-8')
        if (headerless == False):
            next(reader, None)
        outbuf = []
        for row in reader:
            if (row == []):  # Skip empty rows
                continue
            rowcount = rowcount + 1
            if not transform_true:
                rowlen = num_attr if trim else num_attr + len(ignorecolumns)
            else:
                rowlen = num_attr_before_transform if trim else num_attr_before_transform + len(ignorecolumns)      # noqa
            if (not testfile):
                rowlen = rowlen + 1    
            if ((len(row) - (1 if ((testfile and len(important_idxs) == 1)) else 0))  != rowlen) and not (row == ['','']):
                raise ValueError("Column count must match trained predictor. Row " + str(rowcount) + " differs. Expected Row length: " + str(rowlen) + ", Actual Row Length: " + str(len(row)))
            i = 0
            for elem in row:
                if(i + 1 < len(row)):
                    outbuf.append(str(convert(elem)))
                    outbuf.append(',')
                else:
                    classid = str(convertclassid(elem))
                    outbuf.append(classid)
                i = i + 1
            if (len(outbuf) < IOBUF):
                outbuf.append(os.linesep)
            else:
                print(''.join(outbuf), file=f)
                outbuf = []
        print(''.join(outbuf), end="", file=f)
        f.close()

        if (testfile == False and not len(clean.classlist) >= 2):
            raise ValueError("Number of classes must be at least 2.")

        return get_key, clean.mapping


# Helper (save an import)
def argmax(l):
    f = lambda i: l[i]
    return max(range(len(l)), key=f)
# Classifier
def apply(f, x):
    return f(x)

def booster_0(xs):
    #Predicts Class 0
    function_dict = np.array([[0.655499995, 1.0, 2.0, 0.0], [-0.389499992, 3.0, 4.0, 1.0], [-0.875999987, 5.0, 6.0, 2.0], [-0.160999998, 7.0, 8.0, 4.0], [-0.105499998, 9.0, 10.0, 4.0], [-0.548823893, 0.0, 0.0, 0.0], [-0.449999988, 11.0, 12.0, 4.0], [0.475499988, 13.0, 14.0, 0.0], [0.351999998, 15.0, 16.0, 0.0], [0.25150001, 17.0, 18.0, 0.0], [-0.469999999, 19.0, 20.0, 0.0], [0.164000005, 21.0, 22.0, 6.0], [-0.506852329, 0.0, 0.0, 0.0], [1.94745362, 0.0, 0.0, 0.0], [1.10834301, 0.0, 0.0, 0.0], [0.884076297, 0.0, 0.0, 0.0], [-0.307458937, 0.0, 0.0, 0.0], [1.30227327, 0.0, 0.0, 0.0], [-0.0715035126, 0.0, 0.0, 0.0], [0.542219162, 0.0, 0.0, 0.0], [-0.492330998, 0.0, 0.0, 0.0], [1.67542839, 0.0, 0.0, 0.0], [-0.272744179, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_1(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.446500003, 1.0, 2.0, 4.0], [-0.834499955, 3.0, 4.0, 3.0], [0.291500002, 5.0, 6.0, 6.0], [-0.348500013, 7.0, 8.0, 1.0], [-0.895500004, 9.0, 10.0, 2.0], [0.461499989, 11.0, 12.0, 0.0], [0.12650001, 13.0, 14.0, 0.0], [-0.9005, 15.0, 16.0, 3.0], [0.180999994, 17.0, 18.0, 6.0], [-0.436165273, 0.0, 0.0, 0.0], [-0.567000031, 19.0, 20.0, 4.0], [0.243499994, 21.0, 22.0, 6.0], [0.201499999, 23.0, 24.0, 6.0], [0.350000024, 25.0, 26.0, 6.0], [-0.3935, 27.0, 28.0, 5.0], [-0.539374769, 0.0, 0.0, 0.0], [-0.246287972, 0.0, 0.0, 0.0], [-0.418857098, 0.0, 0.0, 0.0], [1.58130324, 0.0, 0.0, 0.0], [0.0771578923, 0.0, 0.0, 0.0], [1.35323071, 0.0, 0.0, 0.0], [-0.426990241, 0.0, 0.0, 0.0], [0.0576675646, 0.0, 0.0, 0.0], [0.153250486, 0.0, 0.0, 0.0], [1.31551087, 0.0, 0.0, 0.0], [-0.0829811245, 0.0, 0.0, 0.0], [1.51789379, 0.0, 0.0, 0.0], [1.92494702, 0.0, 0.0, 0.0], [-0.338307679, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_2(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.534000039, 1.0, 2.0, 5.0], [-0.113499999, 3.0, 4.0, 4.0], [-0.694000006, 5.0, 6.0, 2.0], [-0.744500041, 7.0, 8.0, 2.0], [0.249500006, 9.0, 10.0, 6.0], [0.252499998, 11.0, 12.0, 6.0], [-0.419499993, 13.0, 14.0, 5.0], [-0.582999945, 15.0, 16.0, 3.0], [0.164499998, 17.0, 18.0, 6.0], [0.291999996, 19.0, 20.0, 0.0], [-0.0677499995, 21.0, 22.0, 1.0], [0.738000035, 23.0, 24.0, 0.0], [-0.449430645, 0.0, 0.0, 0.0], [0.292999983, 25.0, 26.0, 6.0], [2.1348803, 0.0, 0.0, 0.0], [-0.537915647, 0.0, 0.0, 0.0], [0.162888885, 0.0, 0.0, 0.0], [0.716776609, 0.0, 0.0, 0.0], [-0.389729381, 0.0, 0.0, 0.0], [0.205088079, 0.0, 0.0, 0.0], [1.50257957, 0.0, 0.0, 0.0], [-0.467224002, 0.0, 0.0, 0.0], [0.442402333, 0.0, 0.0, 0.0], [1.17884529, 0.0, 0.0, 0.0], [-0.308631569, 0.0, 0.0, 0.0], [1.62916553, 0.0, 0.0, 0.0], [-0.208189338, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 12, 25, 26, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_3(xs):
    #Predicts Class 3
    function_dict = np.array([[0.120499998, 1.0, 2.0, 6.0], [-0.995499969, 3.0, 4.0, 3.0], [-0.996500015, 5.0, 6.0, 3.0], [0.0335000008, 7.0, 8.0, 6.0], [0.82949996, 9.0, 10.0, 0.0], [0.153499991, 11.0, 12.0, 6.0], [-0.993499994, 13.0, 14.0, 3.0], [2.13274765, 0.0, 0.0, 0.0], [-0.999500036, 15.0, 16.0, 3.0], [-0.537489712, 0.0, 0.0, 0.0], [-0.786000013, 17.0, 18.0, 4.0], [-0.99849999, 19.0, 20.0, 3.0], [0.440499991, 21.0, 22.0, 6.0], [-0.754500031, 23.0, 24.0, 4.0], [-0.547818124, 0.0, 0.0, 0.0], [1.64646184, 0.0, 0.0, 0.0], [1.18184137, 0.0, 0.0, 0.0], [-0.356594563, 0.0, 0.0, 0.0], [0.934088469, 0.0, 0.0, 0.0], [1.31100428, 0.0, 0.0, 0.0], [0.390933305, 0.0, 0.0, 0.0], [-0.291494429, 0.0, 0.0, 0.0], [1.67542839, 0.0, 0.0, 0.0], [-0.464057535, 0.0, 0.0, 0.0], [0.462947339, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 9, 17, 18, 19, 20, 21, 22, 23, 24, 14])
    branch_indices = np.array([0, 1, 3, 8, 4, 10, 2, 5, 11, 12, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_4(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.673500001, 1.0, 2.0, 4.0], [0.1435, 3.0, 4.0, 6.0], [-0.979499996, 5.0, 6.0, 2.0], [-0.999500036, 7.0, 8.0, 3.0], [0.453000009, 9.0, 10.0, 6.0], [0.1655, 11.0, 12.0, 6.0], [0.909999967, 13.0, 14.0, 0.0], [0.0643500015, 15.0, 16.0, 6.0], [-0.995499969, 17.0, 18.0, 3.0], [0.19749999, 19.0, 20.0, 6.0], [-0.418857098, 0.0, 0.0, 0.0], [-0.997500002, 21.0, 22.0, 3.0], [1.35323071, 0.0, 0.0, 0.0], [-0.549017072, 0.0, 0.0, 0.0], [0.950999975, 23.0, 24.0, 0.0], [-0.475459427, 0.0, 0.0, 0.0], [0.0834623054, 0.0, 0.0, 0.0], [0.346531391, 0.0, 0.0, 0.0], [1.51406538, 0.0, 0.0, 0.0], [1.58673739, 0.0, 0.0, 0.0], [2.10339117, 0.0, 0.0, 0.0], [-0.443209291, 0.0, 0.0, 0.0], [-0.0, 0.0, 0.0, 0.0], [0.0771578923, 0.0, 0.0, 0.0], [-0.308631569, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 21, 22, 12, 13, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_5(xs):
    #Predicts Class 0
    function_dict = np.array([[0.612499952, 1.0, 2.0, 0.0], [-0.676499963, 3.0, 4.0, 2.0], [0.757499993, 5.0, 6.0, 0.0], [0.351500005, 7.0, 8.0, 6.0], [0.325500011, 9.0, 10.0, 0.0], [-0.443499982, 11.0, 12.0, 4.0], [-0.470367342, 0.0, 0.0, 0.0], [-0.810500026, 13.0, 14.0, 3.0], [-0.138000011, 15.0, 16.0, 4.0], [-0.426999986, 17.0, 18.0, 5.0], [-0.304499984, 19.0, 20.0, 4.0], [0.203999996, 21.0, 22.0, 6.0], [0.262499988, 23.0, 24.0, 6.0], [0.547470093, 0.0, 0.0, 0.0], [0.098487854, 0.0, 0.0, 0.0], [-0.592033088, 0.0, 0.0, 0.0], [0.128364578, 0.0, 0.0, 0.0], [0.192792997, 0.0, 0.0, 0.0], [-0.465388477, 0.0, 0.0, 0.0], [-0.0444681793, 0.0, 0.0, 0.0], [-0.407949507, 0.0, 0.0, 0.0], [0.551497936, 0.0, 0.0, 0.0], [-0.121935911, 0.0, 0.0, 0.0], [-0.531285882, 0.0, 0.0, 0.0], [-0.210889488, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_6(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.841500044, 1.0, 2.0, 2.0], [-0.901499987, 3.0, 4.0, 3.0], [0.225499988, 5.0, 6.0, 6.0], [-0.938500047, 7.0, 8.0, 3.0], [0.659000039, 9.0, 10.0, 0.0], [0.00926000066, 11.0, 12.0, 6.0], [-0.339999974, 13.0, 14.0, 5.0], [-0.438499987, 15.0, 16.0, 4.0], [0.657500029, 17.0, 18.0, 0.0], [-0.375500023, 19.0, 20.0, 4.0], [1.06439018, 0.0, 0.0, 0.0], [2.1523726, 0.0, 0.0, 0.0], [0.59800005, 21.0, 22.0, 0.0], [-0.794499993, 23.0, 24.0, 2.0], [-0.47116822, 0.0, 0.0, 0.0], [-0.470312327, 0.0, 0.0, 0.0], [-0.641235411, 0.0, 0.0, 0.0], [-0.505695283, 0.0, 0.0, 0.0], [0.489468306, 0.0, 0.0, 0.0], [-0.451881826, 0.0, 0.0, 0.0], [0.549765646, 0.0, 0.0, 0.0], [-0.34710601, 0.0, 0.0, 0.0], [0.487300187, 0.0, 0.0, 0.0], [0.0473658964, 0.0, 0.0, 0.0], [0.519970536, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 11, 21, 22, 23, 24, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 12, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_7(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.13350001, 1.0, 2.0, 4.0], [-0.377499998, 3.0, 4.0, 4.0], [-0.397500008, 5.0, 6.0, 2.0], [-0.687999964, 7.0, 8.0, 2.0], [0.2465, 9.0, 10.0, 6.0], [0.196500003, 11.0, 12.0, 6.0], [0.350499988, 13.0, 14.0, 6.0], [-0.813500047, 15.0, 16.0, 3.0], [0.227499992, 17.0, 18.0, 6.0], [0.346000016, 19.0, 20.0, 0.0], [-0.98150003, 21.0, 22.0, 3.0], [0.0769000053, 23.0, 24.0, 6.0], [-0.337499976, 25.0, 26.0, 5.0], [-0.0996000022, 27.0, 28.0, 4.0], [-0.155273035, 0.0, 0.0, 0.0], [-0.474431843, 0.0, 0.0, 0.0], [-0.273839802, 0.0, 0.0, 0.0], [0.485315055, 0.0, 0.0, 0.0], [-0.332292259, 0.0, 0.0, 0.0], [-0.371919125, 0.0, 0.0, 0.0], [0.244041577, 0.0, 0.0, 0.0], [0.196249619, 0.0, 0.0, 0.0], [-0.425526559, 0.0, 0.0, 0.0], [-0.650229156, 0.0, 0.0, 0.0], [0.549830735, 0.0, 0.0, 0.0], [-0.0448535345, 0.0, 0.0, 0.0], [0.556821167, 0.0, 0.0, 0.0], [0.178227171, 0.0, 0.0, 0.0], [0.585797608, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_8(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.99150002, 1.0, 2.0, 3.0], [0.199499995, 3.0, 4.0, 6.0], [-0.967499971, 5.0, 6.0, 2.0], [-0.985499978, 7.0, 8.0, 1.0], [0.379500002, 9.0, 10.0, 6.0], [-0.961500049, 11.0, 12.0, 5.0], [-0.481891751, 0.0, 0.0, 0.0], [-0.999500036, 13.0, 14.0, 3.0], [0.153499991, 15.0, 16.0, 6.0], [0.985499978, 17.0, 18.0, 0.0], [0.520724654, 0.0, 0.0, 0.0], [-0.927000046, 19.0, 20.0, 3.0], [-0.958500028, 21.0, 22.0, 3.0], [0.399770468, 0.0, 0.0, 0.0], [-0.0534501225, 0.0, 0.0, 0.0], [0.55651319, 0.0, 0.0, 0.0], [1.99102974, 0.0, 0.0, 0.0], [-0.0628715679, 0.0, 0.0, 0.0], [-0.414341688, 0.0, 0.0, 0.0], [-0.436059088, 0.0, 0.0, 0.0], [0.195325226, 0.0, 0.0, 0.0], [0.840754211, 0.0, 0.0, 0.0], [-0.0600598641, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 10, 19, 20, 21, 22, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_9(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.979499996, 1.0, 2.0, 2.0], [0.02905, 3.0, 4.0, 6.0], [-0.99849999, 5.0, 6.0, 3.0], [-0.0416499972, 7.0, 8.0, 6.0], [0.199499995, 9.0, 10.0, 6.0], [-0.0484805517, 0.0, 0.0, 0.0], [-0.481964111, 0.0, 0.0, 0.0], [-0.453421056, 0.0, 0.0, 0.0], [-0.999500036, 11.0, 12.0, 3.0], [-0.979499996, 13.0, 14.0, 1.0], [0.453000009, 15.0, 16.0, 6.0], [-0.256928653, 0.0, 0.0, 0.0], [0.259220064, 0.0, 0.0, 0.0], [0.360614777, 0.0, 0.0, 0.0], [-0.169436127, 0.0, 0.0, 0.0], [0.504085302, 0.0, 0.0, 0.0], [-0.292487979, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 11, 12, 13, 14, 15, 16, 5, 6])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_10(xs):
    #Predicts Class 0
    function_dict = np.array([[0.662999988, 1.0, 2.0, 0.0], [-0.619500041, 3.0, 4.0, 2.0], [-0.875999987, 5.0, 6.0, 2.0], [0.212500006, 7.0, 8.0, 6.0], [0.290499985, 9.0, 10.0, 6.0], [-0.453275979, 0.0, 0.0, 0.0], [-0.483999997, 11.0, 12.0, 4.0], [0.0144499997, 13.0, 14.0, 6.0], [0.387000024, 15.0, 16.0, 0.0], [0.13350001, 17.0, 18.0, 0.0], [-0.192499995, 19.0, 20.0, 0.0], [-0.509500027, 21.0, 22.0, 4.0], [-0.91900003, 23.0, 24.0, 3.0], [-0.581375241, 0.0, 0.0, 0.0], [0.517864406, 0.0, 0.0, 0.0], [0.299009651, 0.0, 0.0, 0.0], [-0.0764103904, 0.0, 0.0, 0.0], [0.319487125, 0.0, 0.0, 0.0], [-0.189581692, 0.0, 0.0, 0.0], [0.157933727, 0.0, 0.0, 0.0], [-0.573163688, 0.0, 0.0, 0.0], [-0.219644666, 0.0, 0.0, 0.0], [0.513386011, 0.0, 0.0, 0.0], [-0.114406228, 0.0, 0.0, 0.0], [-0.392513841, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_11(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.941500008, 1.0, 2.0, 2.0], [-0.455315709, 0.0, 0.0, 0.0], [0.289499998, 3.0, 4.0, 6.0], [0.592499971, 5.0, 6.0, 0.0], [-0.00853499956, 7.0, 8.0, 0.0], [0.19749999, 9.0, 10.0, 6.0], [-0.639500022, 11.0, 12.0, 5.0], [-0.601999998, 13.0, 14.0, 2.0], [-0.840000033, 15.0, 16.0, 2.0], [-0.295020163, 0.0, 0.0, 0.0], [0.0400016792, 0.0, 0.0, 0.0], [0.414132088, 0.0, 0.0, 0.0], [-0.151071221, 0.0, 0.0, 0.0], [-0.538560748, 0.0, 0.0, 0.0], [0.81843406, 0.0, 0.0, 0.0], [-0.238582909, 0.0, 0.0, 0.0], [0.459977955, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_12(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.244500011, 1.0, 2.0, 4.0], [-0.762500048, 3.0, 4.0, 2.0], [-0.376999974, 5.0, 6.0, 2.0], [-0.8495, 7.0, 8.0, 3.0], [0.506500006, 9.0, 10.0, 0.0], [0.2465, 11.0, 12.0, 6.0], [-0.580500007, 13.0, 14.0, 5.0], [-0.456567645, 0.0, 0.0, 0.0], [-0.454999983, 15.0, 16.0, 1.0], [-0.655499995, 17.0, 18.0, 5.0], [0.171000004, 19.0, 20.0, 6.0], [0.0797000006, 21.0, 22.0, 6.0], [-0.567499995, 23.0, 24.0, 5.0], [-0.747500002, 25.0, 26.0, 3.0], [0.347499996, 27.0, 28.0, 6.0], [-0.356553733, 0.0, 0.0, 0.0], [0.32218954, 0.0, 0.0, 0.0], [-0.391079545, 0.0, 0.0, 0.0], [0.377070487, 0.0, 0.0, 0.0], [0.544838965, 0.0, 0.0, 0.0], [-0.217477202, 0.0, 0.0, 0.0], [-0.579831123, 0.0, 0.0, 0.0], [0.284106761, 0.0, 0.0, 0.0], [-0.364806384, 0.0, 0.0, 0.0], [0.0831201375, 0.0, 0.0, 0.0], [-0.244041428, 0.0, 0.0, 0.0], [0.0825271085, 0.0, 0.0, 0.0], [0.496175915, 0.0, 0.0, 0.0], [-0.044365868, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_13(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.996500015, 1.0, 2.0, 3.0], [0.0294499993, 3.0, 4.0, 6.0], [0.845999956, 5.0, 6.0, 0.0], [-0.0416499972, 7.0, 8.0, 6.0], [-0.919499993, 9.0, 10.0, 4.0], [-0.460508615, 0.0, 0.0, 0.0], [-0.994500041, 11.0, 12.0, 5.0], [0.485076278, 0.0, 0.0, 0.0], [-0.035149999, 13.0, 14.0, 6.0], [-0.999500036, 15.0, 16.0, 3.0], [0.929499984, 17.0, 18.0, 0.0], [-0.500869751, 0.0, 0.0, 0.0], [0.107000001, 19.0, 20.0, 6.0], [0.0744986534, 0.0, 0.0, 0.0], [0.407164603, 0.0, 0.0, 0.0], [0.148427576, 0.0, 0.0, 0.0], [-0.182113767, 0.0, 0.0, 0.0], [0.0640348122, 0.0, 0.0, 0.0], [0.604826808, 0.0, 0.0, 0.0], [0.400644064, 0.0, 0.0, 0.0], [-0.238235444, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 15, 16, 17, 18, 5, 11, 19, 20])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_14(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.958500028, 1.0, 2.0, 2.0], [-0.03675, 3.0, 4.0, 6.0], [-0.461785674, 0.0, 0.0, 0.0], [-0.99849999, 5.0, 6.0, 3.0], [-0.996500015, 7.0, 8.0, 3.0], [-0.429174066, 0.0, 0.0, 0.0], [-0.844500005, 9.0, 10.0, 4.0], [-0.921499968, 11.0, 12.0, 4.0], [-0.902499974, 13.0, 14.0, 3.0], [0.458966911, 0.0, 0.0, 0.0], [-0.327577978, 0.0, 0.0, 0.0], [0.251199663, 0.0, 0.0, 0.0], [-0.112970546, 0.0, 0.0, 0.0], [0.47272718, 0.0, 0.0, 0.0], [-0.11404708, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 9, 10, 11, 12, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_15(xs):
    #Predicts Class 0
    function_dict = np.array([[0.746500015, 1.0, 2.0, 0.0], [-0.413500011, 3.0, 4.0, 4.0], [-0.441240042, 0.0, 0.0, 0.0], [-0.798500001, 5.0, 6.0, 3.0], [0.065200001, 7.0, 8.0, 0.0], [-0.703500032, 9.0, 10.0, 2.0], [-0.491999984, 11.0, 12.0, 4.0], [-0.462000012, 13.0, 14.0, 5.0], [-0.284500003, 15.0, 16.0, 4.0], [0.419995368, 0.0, 0.0, 0.0], [-0.498685449, 0.0, 0.0, 0.0], [0.278510273, 0.0, 0.0, 0.0], [-0.386560023, 0.0, 0.0, 0.0], [0.445735127, 0.0, 0.0, 0.0], [-0.465695262, 0.0, 0.0, 0.0], [0.0889927745, 0.0, 0.0, 0.0], [-0.132988095, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_16(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.492500007, 1.0, 2.0, 4.0], [-0.892500043, 3.0, 4.0, 2.0], [-0.340499997, 5.0, 6.0, 5.0], [-0.43776077, 0.0, 0.0, 0.0], [-0.601999998, 7.0, 8.0, 4.0], [-0.00279500009, 9.0, 10.0, 0.0], [-0.427188337, 0.0, 0.0, 0.0], [0.5604285, 0.0, 0.0, 0.0], [0.666000009, 11.0, 12.0, 0.0], [-0.886500001, 13.0, 14.0, 3.0], [-0.729499996, 15.0, 16.0, 2.0], [-0.387288272, 0.0, 0.0, 0.0], [0.204534113, 0.0, 0.0, 0.0], [0.077907294, 0.0, 0.0, 0.0], [-0.433620185, 0.0, 0.0, 0.0], [0.0302639492, 0.0, 0.0, 0.0], [0.232048243, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 11, 12, 13, 14, 15, 16, 6])
    branch_indices = np.array([0, 1, 4, 8, 2, 5, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_17(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.2755, 1.0, 2.0, 4.0], [-0.865499973, 3.0, 4.0, 3.0], [-0.376999974, 5.0, 6.0, 2.0], [-0.225499988, 7.0, 8.0, 1.0], [0.238999993, 9.0, 10.0, 6.0], [-0.960500002, 11.0, 12.0, 3.0], [0.290499985, 13.0, 14.0, 6.0], [-0.744500041, 15.0, 16.0, 2.0], [0.171000004, 17.0, 18.0, 6.0], [0.215499997, 19.0, 20.0, 6.0], [-0.408827662, 0.0, 0.0, 0.0], [0.216499999, 21.0, 22.0, 6.0], [0.168500006, 23.0, 24.0, 6.0], [0.256500006, 25.0, 26.0, 6.0], [0.0449000001, 27.0, 28.0, 4.0], [-0.44598937, 0.0, 0.0, 0.0], [-0.252935588, 0.0, 0.0, 0.0], [0.425438881, 0.0, 0.0, 0.0], [-0.33700034, 0.0, 0.0, 0.0], [-0.0294034202, 0.0, 0.0, 0.0], [0.706891775, 0.0, 0.0, 0.0], [-0.130064324, 0.0, 0.0, 0.0], [0.802599609, 0.0, 0.0, 0.0], [0.35013321, 0.0, 0.0, 0.0], [-0.0592368841, 0.0, 0.0, 0.0], [0.479153782, 0.0, 0.0, 0.0], [0.255503327, 0.0, 0.0, 0.0], [-0.353042275, 0.0, 0.0, 0.0], [0.368318379, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_18(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.926499963, 1.0, 2.0, 2.0], [-0.03675, 3.0, 4.0, 6.0], [-0.450223565, 0.0, 0.0, 0.0], [-0.99849999, 5.0, 6.0, 3.0], [0.103500001, 7.0, 8.0, 6.0], [0.445513725, 0.0, 0.0, 0.0], [-0.844500005, 9.0, 10.0, 4.0], [0.0940499976, 11.0, 12.0, 6.0], [-0.997500002, 13.0, 14.0, 3.0], [-0.184898287, 0.0, 0.0, 0.0], [0.298661411, 0.0, 0.0, 0.0], [0.110947274, 0.0, 0.0, 0.0], [-0.399673343, 0.0, 0.0, 0.0], [0.213992149, 0.0, 0.0, 0.0], [-0.121725082, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 9, 10, 11, 12, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_19(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.958500028, 1.0, 2.0, 2.0], [0.199499995, 3.0, 4.0, 6.0], [-0.450319558, 0.0, 0.0, 0.0], [0.103500001, 5.0, 6.0, 6.0], [0.289499998, 7.0, 8.0, 6.0], [0.0940499976, 9.0, 10.0, 6.0], [0.987499952, 11.0, 12.0, 0.0], [0.987499952, 13.0, 14.0, 0.0], [0.300500005, 15.0, 16.0, 6.0], [0.0580996498, 0.0, 0.0, 0.0], [0.650433362, 0.0, 0.0, 0.0], [0.142839074, 0.0, 0.0, 0.0], [-0.197493941, 0.0, 0.0, 0.0], [0.277123064, 0.0, 0.0, 0.0], [0.451395482, 0.0, 0.0, 0.0], [-0.803004205, 0.0, 0.0, 0.0], [0.326104462, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_20(xs):
    #Predicts Class 0
    function_dict = np.array([[0.571500003, 1.0, 2.0, 0.0], [0.071800001, 3.0, 4.0, 4.0], [-0.960500002, 5.0, 6.0, 3.0], [0.215499997, 7.0, 8.0, 6.0], [-0.462044656, 0.0, 0.0, 0.0], [-0.85650003, 9.0, 10.0, 5.0], [-0.370000005, 11.0, 12.0, 4.0], [0.168500006, 13.0, 14.0, 6.0], [0.229499996, 15.0, 16.0, 6.0], [-0.440021604, 0.0, 0.0, 0.0], [-0.823000014, 17.0, 18.0, 5.0], [0.203500003, 19.0, 20.0, 6.0], [0.262499988, 21.0, 22.0, 6.0], [0.0401244573, 0.0, 0.0, 0.0], [0.486954123, 0.0, 0.0, 0.0], [-0.383223027, 0.0, 0.0, 0.0], [0.0777138323, 0.0, 0.0, 0.0], [0.251136452, 0.0, 0.0, 0.0], [-0.369244903, 0.0, 0.0, 0.0], [0.332849115, 0.0, 0.0, 0.0], [-0.153436542, 0.0, 0.0, 0.0], [-0.473975301, 0.0, 0.0, 0.0], [-0.0455878079, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 9, 17, 18, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_21(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.982499957, 1.0, 2.0, 3.0], [-0.767500043, 3.0, 4.0, 2.0], [0.290499985, 5.0, 6.0, 6.0], [-0.45301187, 0.0, 0.0, 0.0], [-0.614499986, 7.0, 8.0, 2.0], [0.00926000066, 9.0, 10.0, 6.0], [-0.581499994, 11.0, 12.0, 1.0], [0.286162794, 0.0, 0.0, 0.0], [-0.344301641, 0.0, 0.0, 0.0], [0.640169322, 0.0, 0.0, 0.0], [0.181499988, 13.0, 14.0, 6.0], [0.361999989, 15.0, 16.0, 0.0], [0.32950002, 17.0, 18.0, 6.0], [-0.301585585, 0.0, 0.0, 0.0], [0.0258434415, 0.0, 0.0, 0.0], [-0.479977846, 0.0, 0.0, 0.0], [0.204413071, 0.0, 0.0, 0.0], [0.412569761, 0.0, 0.0, 0.0], [0.0933924168, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 13, 14, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 4, 2, 5, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_22(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.823500037, 1.0, 2.0, 2.0], [-0.45450002, 3.0, 4.0, 1.0], [0.0728999972, 5.0, 6.0, 6.0], [-0.439620137, 0.0, 0.0, 0.0], [0.104680799, 0.0, 0.0, 0.0], [-0.526499987, 7.0, 8.0, 2.0], [0.168500006, 9.0, 10.0, 6.0], [-0.567864001, 0.0, 0.0, 0.0], [-0.12965326, 0.0, 0.0, 0.0], [-0.427999973, 11.0, 12.0, 1.0], [-0.339999974, 13.0, 14.0, 5.0], [1.03627157, 0.0, 0.0, 0.0], [0.459503949, 0.0, 0.0, 0.0], [-0.0257350598, 0.0, 0.0, 0.0], [0.434307426, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 7, 8, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 2, 5, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_23(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.926499963, 1.0, 2.0, 2.0], [-0.99849999, 3.0, 4.0, 1.0], [-0.44112888, 0.0, 0.0, 0.0], [0.0641499981, 5.0, 6.0, 6.0], [-0.995499969, 7.0, 8.0, 4.0], [0.425817996, 0.0, 0.0, 0.0], [0.0707499981, 9.0, 10.0, 6.0], [0.197999999, 11.0, 12.0, 6.0], [0.989500046, 13.0, 14.0, 0.0], [-1.21876824, 0.0, 0.0, 0.0], [-0.168886587, 0.0, 0.0, 0.0], [0.822927535, 0.0, 0.0, 0.0], [0.0633219853, 0.0, 0.0, 0.0], [0.157533094, 0.0, 0.0, 0.0], [-0.00282291486, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 9, 10, 11, 12, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_24(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.958500028, 1.0, 2.0, 2.0], [-0.99849999, 3.0, 4.0, 1.0], [-0.441262215, 0.0, 0.0, 0.0], [0.0641499981, 5.0, 6.0, 6.0], [-0.995499969, 7.0, 8.0, 4.0], [-0.389175534, 0.0, 0.0, 0.0], [0.0707499981, 9.0, 10.0, 6.0], [0.197999999, 11.0, 12.0, 6.0], [0.989500046, 13.0, 14.0, 0.0], [1.37888145, 0.0, 0.0, 0.0], [0.267793238, 0.0, 0.0, 0.0], [-0.812860847, 0.0, 0.0, 0.0], [0.0471301787, 0.0, 0.0, 0.0], [0.0070323227, 0.0, 0.0, 0.0], [0.157915488, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 9, 10, 11, 12, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_25(xs):
    #Predicts Class 0
    function_dict = np.array([[0.676999986, 1.0, 2.0, 0.0], [0.351500005, 3.0, 4.0, 6.0], [-0.875999987, 5.0, 6.0, 2.0], [0.331499994, 7.0, 8.0, 6.0], [-0.112000003, 9.0, 10.0, 4.0], [-0.428200632, 0.0, 0.0, 0.0], [-0.48299998, 11.0, 12.0, 4.0], [0.345499992, 13.0, 14.0, 0.0], [0.324500024, 15.0, 16.0, 0.0], [-0.475085467, 0.0, 0.0, 0.0], [0.0461650565, 0.0, 0.0, 0.0], [0.181382686, 0.0, 0.0, 0.0], [0.144999996, 17.0, 18.0, 6.0], [0.173506081, 0.0, 0.0, 0.0], [-0.0644739196, 0.0, 0.0, 0.0], [0.0192826986, 0.0, 0.0, 0.0], [0.900061667, 0.0, 0.0, 0.0], [-0.0592921786, 0.0, 0.0, 0.0], [-0.385327071, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 11, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_26(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.978500009, 1.0, 2.0, 3.0], [-0.772500038, 3.0, 4.0, 2.0], [0.351500005, 5.0, 6.0, 6.0], [0.332000017, 7.0, 8.0, 6.0], [-0.245499998, 9.0, 10.0, 4.0], [0.331499994, 11.0, 12.0, 6.0], [-0.025249999, 13.0, 14.0, 4.0], [-0.470208049, 0.0, 0.0, 0.0], [-0.134053633, 0.0, 0.0, 0.0], [0.415971786, 0.0, 0.0, 0.0], [-0.467691362, 0.0, 0.0, 0.0], [0.32950002, 15.0, 16.0, 0.0], [-0.688500047, 17.0, 18.0, 2.0], [0.479009598, 0.0, 0.0, 0.0], [-0.00302405586, 0.0, 0.0, 0.0], [-0.108087659, 0.0, 0.0, 0.0], [0.0994392559, 0.0, 0.0, 0.0], [-0.751992166, 0.0, 0.0, 0.0], [0.300716132, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 15, 16, 17, 18, 13, 14])
    branch_indices = np.array([0, 1, 3, 4, 2, 5, 11, 12, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_27(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.377499998, 1.0, 2.0, 4.0], [-0.813500047, 3.0, 4.0, 3.0], [0.0728999972, 5.0, 6.0, 6.0], [-0.233999997, 7.0, 8.0, 1.0], [-0.790500045, 9.0, 10.0, 3.0], [-0.482591391, 0.0, 0.0, 0.0], [0.1655, 11.0, 12.0, 6.0], [-0.433944702, 0.0, 0.0, 0.0], [0.0971026048, 0.0, 0.0, 0.0], [0.629006684, 0.0, 0.0, 0.0], [-0.342448384, 0.0, 0.0, 0.0], [-0.342999995, 13.0, 14.0, 4.0], [0.211499989, 15.0, 16.0, 6.0], [0.0230677929, 0.0, 0.0, 0.0], [0.523183405, 0.0, 0.0, 0.0], [-0.17511189, 0.0, 0.0, 0.0], [0.11025884, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 5, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 3, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_28(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.921000004, 1.0, 2.0, 1.0], [-0.967999995, 3.0, 4.0, 5.0], [-0.0166999996, 5.0, 6.0, 6.0], [0.932500005, 7.0, 8.0, 0.0], [-0.705500007, 9.0, 10.0, 4.0], [0.193668991, 0.0, 0.0, 0.0], [0.33950001, 11.0, 12.0, 6.0], [-0.896499991, 13.0, 14.0, 4.0], [0.96449995, 15.0, 16.0, 0.0], [0.922500014, 17.0, 18.0, 0.0], [-0.582499981, 19.0, 20.0, 4.0], [0.935500026, 21.0, 22.0, 0.0], [-0.0129233766, 0.0, 0.0, 0.0], [-0.661135435, 0.0, 0.0, 0.0], [0.0773257241, 0.0, 0.0, 0.0], [0.277601779, 0.0, 0.0, 0.0], [0.0397951342, 0.0, 0.0, 0.0], [0.905265629, 0.0, 0.0, 0.0], [0.366611034, 0.0, 0.0, 0.0], [0.0213977564, 0.0, 0.0, 0.0], [0.263231009, 0.0, 0.0, 0.0], [-0.45758602, 0.0, 0.0, 0.0], [-0.164490029, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_29(xs):
    #Predicts Class 4
    function_dict = np.array([[0.782000005, 1.0, 2.0, 0.0], [-0.914499998, 3.0, 4.0, 5.0], [0.993499994, 5.0, 6.0, 0.0], [-0.101948418, 0.0, 0.0, 0.0], [-0.434036344, 0.0, 0.0, 0.0], [-0.921000004, 7.0, 8.0, 1.0], [0.200499997, 9.0, 10.0, 6.0], [-0.967999995, 11.0, 12.0, 5.0], [0.0820500031, 13.0, 14.0, 6.0], [0.168500006, 15.0, 16.0, 6.0], [0.29549998, 17.0, 18.0, 6.0], [0.087725766, 0.0, 0.0, 0.0], [-0.516869962, 0.0, 0.0, 0.0], [-0.0372408479, 0.0, 0.0, 0.0], [0.603258252, 0.0, 0.0, 0.0], [-0.0974523649, 0.0, 0.0, 0.0], [-0.79682529, 0.0, 0.0, 0.0], [0.363852888, 0.0, 0.0, 0.0], [-0.0335151143, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 13, 14, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 2, 5, 7, 8, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_30(xs):
    #Predicts Class 0
    function_dict = np.array([[0.746500015, 1.0, 2.0, 0.0], [0.281499982, 3.0, 4.0, 6.0], [-0.408164293, 0.0, 0.0, 0.0], [-0.773499966, 5.0, 6.0, 2.0], [-0.086149998, 7.0, 8.0, 0.0], [0.25849998, 9.0, 10.0, 6.0], [-0.894500017, 11.0, 12.0, 3.0], [-0.521499991, 13.0, 14.0, 2.0], [-0.54400003, 15.0, 16.0, 1.0], [0.0665307641, 0.0, 0.0, 0.0], [0.785780013, 0.0, 0.0, 0.0], [-0.219224229, 0.0, 0.0, 0.0], [0.11881686, 0.0, 0.0, 0.0], [0.473745644, 0.0, 0.0, 0.0], [-0.0203612782, 0.0, 0.0, 0.0], [0.2341858, 0.0, 0.0, 0.0], [-0.283804476, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_31(xs):
    #Predicts Class 1
    function_dict = np.array([[0.283500016, 1.0, 2.0, 6.0], [-0.771499991, 3.0, 4.0, 2.0], [-0.54400003, 5.0, 6.0, 1.0], [0.25849998, 7.0, 8.0, 6.0], [0.245499998, 9.0, 10.0, 6.0], [-0.930000007, 11.0, 12.0, 3.0], [-0.925500035, 13.0, 14.0, 3.0], [-0.92750001, 15.0, 16.0, 3.0], [-0.52700001, 17.0, 18.0, 1.0], [-0.769500017, 19.0, 20.0, 3.0], [-0.486499995, 21.0, 22.0, 2.0], [-0.406857848, 0.0, 0.0, 0.0], [0.310499996, 23.0, 24.0, 6.0], [-0.0276999995, 25.0, 26.0, 4.0], [-0.375999987, 27.0, 28.0, 1.0], [-0.329738945, 0.0, 0.0, 0.0], [0.09012454, 0.0, 0.0, 0.0], [-0.0171687789, 0.0, 0.0, 0.0], [-0.847673535, 0.0, 0.0, 0.0], [0.00444791419, 0.0, 0.0, 0.0], [-0.415123791, 0.0, 0.0, 0.0], [0.306747109, 0.0, 0.0, 0.0], [-0.225328937, 0.0, 0.0, 0.0], [-0.181308329, 0.0, 0.0, 0.0], [0.333524197, 0.0, 0.0, 0.0], [0.590721071, 0.0, 0.0, 0.0], [-0.0474775434, 0.0, 0.0, 0.0], [0.372280747, 0.0, 0.0, 0.0], [0.00689288322, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 11, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_32(xs):
    #Predicts Class 2
    function_dict = np.array([[0.640499949, 1.0, 2.0, 0.0], [0.485500008, 3.0, 4.0, 0.0], [-0.605499983, 5.0, 6.0, 2.0], [-0.467500001, 7.0, 8.0, 2.0], [0.489499986, 9.0, 10.0, 0.0], [-0.755499959, 11.0, 12.0, 2.0], [0.179621711, 0.0, 0.0, 0.0], [-0.437999994, 13.0, 14.0, 5.0], [-0.528999984, 15.0, 16.0, 3.0], [1.21889555, 0.0, 0.0, 0.0], [0.03345, 17.0, 18.0, 4.0], [-0.426019311, 0.0, 0.0, 0.0], [0.178499997, 19.0, 20.0, 6.0], [-0.183017835, 0.0, 0.0, 0.0], [0.253251076, 0.0, 0.0, 0.0], [0.274095863, 0.0, 0.0, 0.0], [-0.411326438, 0.0, 0.0, 0.0], [0.30529055, 0.0, 0.0, 0.0], [-0.169985563, 0.0, 0.0, 0.0], [0.269695938, 0.0, 0.0, 0.0], [-0.391419798, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 17, 18, 11, 19, 20, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_33(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.926499963, 1.0, 2.0, 2.0], [-0.0416499972, 3.0, 4.0, 6.0], [-0.422592729, 0.0, 0.0, 0.0], [0.385528564, 0.0, 0.0, 0.0], [0.0433499999, 5.0, 6.0, 6.0], [0.0335000008, 7.0, 8.0, 6.0], [0.0581500009, 9.0, 10.0, 6.0], [0.0291768629, 0.0, 0.0, 0.0], [-0.571213245, 0.0, 0.0, 0.0], [0.393009365, 0.0, 0.0, 0.0], [0.0281369705, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 2])
    branch_indices = np.array([0, 1, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_34(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.958500028, 1.0, 2.0, 2.0], [-0.999500036, 3.0, 4.0, 3.0], [-0.423859477, 0.0, 0.0, 0.0], [0.980499983, 5.0, 6.0, 0.0], [0.992499948, 7.0, 8.0, 0.0], [0.907500029, 9.0, 10.0, 0.0], [0.98150003, 11.0, 12.0, 0.0], [-0.995499969, 13.0, 14.0, 1.0], [0.136000007, 15.0, 16.0, 6.0], [0.533401966, 0.0, 0.0, 0.0], [-0.266280085, 0.0, 0.0, 0.0], [0.848141253, 0.0, 0.0, 0.0], [0.0193060432, 0.0, 0.0, 0.0], [0.519862413, 0.0, 0.0, 0.0], [0.0817483813, 0.0, 0.0, 0.0], [-0.265257329, 0.0, 0.0, 0.0], [-1.11656046, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_35(xs):
    #Predicts Class 0
    function_dict = np.array([[0.568500042, 1.0, 2.0, 0.0], [-0.422500014, 3.0, 4.0, 2.0], [-0.951499999, 5.0, 6.0, 3.0], [0.0745999962, 7.0, 8.0, 4.0], [-0.0774499997, 9.0, 10.0, 0.0], [-0.428499997, 11.0, 12.0, 1.0], [-0.869500041, 13.0, 14.0, 3.0], [0.135500014, 15.0, 16.0, 0.0], [-0.428609908, 0.0, 0.0, 0.0], [0.0701583624, 0.0, 0.0, 0.0], [-0.454177767, 0.0, 0.0, 0.0], [-0.833999991, 17.0, 18.0, 2.0], [0.630500019, 19.0, 20.0, 0.0], [-0.412999988, 21.0, 22.0, 1.0], [0.201000005, 23.0, 24.0, 6.0], [0.249924242, 0.0, 0.0, 0.0], [0.0302161612, 0.0, 0.0, 0.0], [-0.278830796, 0.0, 0.0, 0.0], [-0.638802707, 0.0, 0.0, 0.0], [-0.28607592, 0.0, 0.0, 0.0], [0.130321011, 0.0, 0.0, 0.0], [0.20392032, 0.0, 0.0, 0.0], [-0.195013791, 0.0, 0.0, 0.0], [0.000751906482, 0.0, 0.0, 0.0], [-0.493401676, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_36(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.965499997, 1.0, 2.0, 3.0], [0.299499989, 3.0, 4.0, 6.0], [0.590499997, 5.0, 6.0, 0.0], [-0.2755, 7.0, 8.0, 1.0], [0.640499949, 9.0, 10.0, 0.0], [-0.658499956, 11.0, 12.0, 2.0], [-0.869500041, 13.0, 14.0, 3.0], [0.0140000004, 15.0, 16.0, 6.0], [-0.194499999, 17.0, 18.0, 1.0], [0.391891003, 0.0, 0.0, 0.0], [-0.229447812, 0.0, 0.0, 0.0], [-0.715000033, 19.0, 20.0, 5.0], [-0.868499994, 21.0, 22.0, 3.0], [-0.953500032, 23.0, 24.0, 3.0], [0.197999999, 25.0, 26.0, 6.0], [0.0118868826, 0.0, 0.0, 0.0], [-0.424937755, 0.0, 0.0, 0.0], [0.475638419, 0.0, 0.0, 0.0], [-0.321192771, 0.0, 0.0, 0.0], [0.0497410148, 0.0, 0.0, 0.0], [-0.322333157, 0.0, 0.0, 0.0], [0.293588489, 0.0, 0.0, 0.0], [-0.0511480011, 0.0, 0.0, 0.0], [0.462978303, 0.0, 0.0, 0.0], [-0.013775398, 0.0, 0.0, 0.0], [0.158623904, 0.0, 0.0, 0.0], [0.501461864, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_37(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.431500018, 1.0, 2.0, 4.0], [-0.31099999, 3.0, 4.0, 1.0], [0.0678500012, 5.0, 6.0, 0.0], [-0.411901325, 0.0, 0.0, 0.0], [-0.0752898306, 0.0, 0.0, 0.0], [-0.453999996, 7.0, 8.0, 5.0], [0.0728999972, 9.0, 10.0, 6.0], [-0.543500006, 11.0, 12.0, 2.0], [-0.180500001, 13.0, 14.0, 0.0], [-0.526499987, 15.0, 16.0, 2.0], [0.168500006, 17.0, 18.0, 6.0], [-0.295217872, 0.0, 0.0, 0.0], [-0.743775845, 0.0, 0.0, 0.0], [-0.140167654, 0.0, 0.0, 0.0], [0.389749557, 0.0, 0.0, 0.0], [-0.446192294, 0.0, 0.0, 0.0], [-0.0876281783, 0.0, 0.0, 0.0], [0.437751263, 0.0, 0.0, 0.0], [0.0483162403, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 13, 14, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 2, 5, 7, 8, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_38(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.926499963, 1.0, 2.0, 2.0], [-0.0526000001, 3.0, 4.0, 6.0], [-0.409721285, 0.0, 0.0, 0.0], [0.364692718, 0.0, 0.0, 0.0], [-0.035149999, 5.0, 6.0, 6.0], [-0.995499969, 7.0, 8.0, 1.0], [0.996500015, 9.0, 10.0, 0.0], [-1.0522666, 0.0, 0.0, 0.0], [0.234809101, 0.0, 0.0, 0.0], [0.0167616904, 0.0, 0.0, 0.0], [0.280814886, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 2])
    branch_indices = np.array([0, 1, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_39(xs):
    #Predicts Class 4
    function_dict = np.array([[0.773499966, 1.0, 2.0, 0.0], [-0.403688222, 0.0, 0.0, 0.0], [0.996500015, 3.0, 4.0, 0.0], [0.0838000029, 5.0, 6.0, 6.0], [0.145999998, 7.0, 8.0, 6.0], [-0.993499994, 9.0, 10.0, 1.0], [0.958500028, 11.0, 12.0, 0.0], [0.99849999, 13.0, 14.0, 0.0], [0.130818903, 0.0, 0.0, 0.0], [0.285332799, 0.0, 0.0, 0.0], [-0.125829861, 0.0, 0.0, 0.0], [0.161567077, 0.0, 0.0, 0.0], [-0.0309557058, 0.0, 0.0, 0.0], [-0.478547782, 0.0, 0.0, 0.0], [0.0670079142, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 8])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_40(xs):
    #Predicts Class 0
    function_dict = np.array([[0.676999986, 1.0, 2.0, 0.0], [0.212500006, 3.0, 4.0, 6.0], [0.0299999993, 5.0, 6.0, 6.0], [0.0144499997, 7.0, 8.0, 6.0], [0.2315, 9.0, 10.0, 6.0], [-0.0524162799, 0.0, 0.0, 0.0], [0.696500003, 11.0, 12.0, 0.0], [-0.450844854, 0.0, 0.0, 0.0], [-0.438499987, 13.0, 14.0, 2.0], [-0.0357000008, 15.0, 16.0, 1.0], [-0.585500002, 17.0, 18.0, 2.0], [-0.100526929, 0.0, 0.0, 0.0], [0.25849998, 19.0, 20.0, 6.0], [0.210646257, 0.0, 0.0, 0.0], [-0.336042553, 0.0, 0.0, 0.0], [-0.435791045, 0.0, 0.0, 0.0], [0.207538769, 0.0, 0.0, 0.0], [0.0454393551, 0.0, 0.0, 0.0], [-0.272429466, 0.0, 0.0, 0.0], [-0.411594778, 0.0, 0.0, 0.0], [-0.113142811, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 15, 16, 17, 18, 5, 11, 19, 20])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_41(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.957499981, 1.0, 2.0, 3.0], [-0.278500021, 3.0, 4.0, 1.0], [-0.949499965, 5.0, 6.0, 3.0], [0.266499996, 7.0, 8.0, 6.0], [-0.537999988, 9.0, 10.0, 5.0], [0.575500011, 11.0, 12.0, 0.0], [0.245499998, 13.0, 14.0, 6.0], [0.2315, 15.0, 16.0, 6.0], [-0.833000004, 17.0, 18.0, 2.0], [-0.101999998, 19.0, 20.0, 1.0], [-0.390465379, 0.0, 0.0, 0.0], [-0.360000014, 21.0, 22.0, 4.0], [0.592000008, 23.0, 24.0, 0.0], [0.598999977, 25.0, 26.0, 0.0], [-0.946500003, 27.0, 28.0, 3.0], [-0.21428667, 0.0, 0.0, 0.0], [-0.575023353, 0.0, 0.0, 0.0], [-0.361401856, 0.0, 0.0, 0.0], [0.206808448, 0.0, 0.0, 0.0], [0.550103307, 0.0, 0.0, 0.0], [-0.217976496, 0.0, 0.0, 0.0], [-0.160602316, 0.0, 0.0, 0.0], [0.62166214, 0.0, 0.0, 0.0], [-0.584372461, 0.0, 0.0, 0.0], [0.285491705, 0.0, 0.0, 0.0], [-0.129550815, 0.0, 0.0, 0.0], [0.199280977, 0.0, 0.0, 0.0], [-0.455835432, 0.0, 0.0, 0.0], [0.10990417, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_42(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.729499996, 1.0, 2.0, 5.0], [0.51849997, 3.0, 4.0, 0.0], [-0.734500051, 5.0, 6.0, 2.0], [-0.18900001, 7.0, 8.0, 1.0], [0.602499962, 9.0, 10.0, 0.0], [-0.419499993, 11.0, 12.0, 1.0], [-0.969500005, 13.0, 14.0, 3.0], [-0.410827279, 0.0, 0.0, 0.0], [-0.0322661437, 0.0, 0.0, 0.0], [-0.310000002, 15.0, 16.0, 1.0], [-0.755499959, 17.0, 18.0, 2.0], [0.222000003, 19.0, 20.0, 6.0], [0.265500009, 21.0, 22.0, 6.0], [0.574405134, 0.0, 0.0, 0.0], [-0.29549998, 23.0, 24.0, 2.0], [0.448436171, 0.0, 0.0, 0.0], [-0.310038388, 0.0, 0.0, 0.0], [-0.406690001, 0.0, 0.0, 0.0], [-0.099594146, 0.0, 0.0, 0.0], [0.273504585, 0.0, 0.0, 0.0], [-0.315777272, 0.0, 0.0, 0.0], [1.13263547, 0.0, 0.0, 0.0], [-0.243850455, 0.0, 0.0, 0.0], [-0.0360517427, 0.0, 0.0, 0.0], [0.366968185, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 13, 23, 24])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_43(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.644999981, 1.0, 2.0, 1.0], [0.9745, 3.0, 4.0, 0.0], [-0.392411232, 0.0, 0.0, 0.0], [-0.99849999, 5.0, 6.0, 3.0], [0.98150003, 7.0, 8.0, 0.0], [-0.992499948, 9.0, 10.0, 1.0], [-0.994500041, 11.0, 12.0, 5.0], [0.980499983, 13.0, 14.0, 0.0], [0.03565, 15.0, 16.0, 6.0], [-0.0339748003, 0.0, 0.0, 0.0], [0.393627107, 0.0, 0.0, 0.0], [-0.311483115, 0.0, 0.0, 0.0], [0.113251232, 0.0, 0.0, 0.0], [-0.108605318, 0.0, 0.0, 0.0], [-0.537470877, 0.0, 0.0, 0.0], [0.190681741, 0.0, 0.0, 0.0], [-0.00637626788, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_44(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.958500028, 1.0, 2.0, 2.0], [-0.997500002, 3.0, 4.0, 3.0], [-0.395691335, 0.0, 0.0, 0.0], [0.96449995, 5.0, 6.0, 0.0], [0.982499957, 7.0, 8.0, 0.0], [0.961500049, 9.0, 10.0, 0.0], [-0.990499973, 11.0, 12.0, 5.0], [-0.994500041, 13.0, 14.0, 5.0], [-0.414205909, 0.0, 0.0, 0.0], [-0.0792312548, 0.0, 0.0, 0.0], [-1.06771886, 0.0, 0.0, 0.0], [0.0196853131, 0.0, 0.0, 0.0], [0.597205639, 0.0, 0.0, 0.0], [0.41907078, 0.0, 0.0, 0.0], [0.0375369936, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_45(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.0614, 1.0, 2.0, 0.0], [-0.462000012, 3.0, 4.0, 5.0], [-0.29549998, 5.0, 6.0, 4.0], [-0.0126499999, 7.0, 8.0, 4.0], [-0.267881662, 0.0, 0.0, 0.0], [-0.787, 9.0, 10.0, 3.0], [-0.832499981, 11.0, 12.0, 3.0], [-0.888999999, 13.0, 14.0, 3.0], [0.08946307, 0.0, 0.0, 0.0], [-0.379500002, 15.0, 16.0, 1.0], [-0.715499997, 17.0, 18.0, 2.0], [-0.207500011, 19.0, 20.0, 1.0], [-0.198500007, 21.0, 22.0, 1.0], [0.179266497, 0.0, 0.0, 0.0], [0.454890102, 0.0, 0.0, 0.0], [0.0112984162, 0.0, 0.0, 0.0], [0.380049676, 0.0, 0.0, 0.0], [-0.571313202, 0.0, 0.0, 0.0], [0.0559567586, 0.0, 0.0, 0.0], [-0.10656897, 0.0, 0.0, 0.0], [-0.450483978, 0.0, 0.0, 0.0], [-0.121558428, 0.0, 0.0, 0.0], [0.367667764, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 15, 16, 17, 18, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_46(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.83949995, 1.0, 2.0, 2.0], [-0.918500006, 3.0, 4.0, 3.0], [0.345499992, 5.0, 6.0, 6.0], [-0.404188365, 0.0, 0.0, 0.0], [-0.541000009, 7.0, 8.0, 1.0], [0.331499994, 9.0, 10.0, 6.0], [-0.884500027, 11.0, 12.0, 3.0], [-0.538500011, 13.0, 14.0, 4.0], [-0.385194898, 0.0, 0.0, 0.0], [0.301499993, 15.0, 16.0, 6.0], [0.32249999, 17.0, 18.0, 0.0], [0.351500005, 19.0, 20.0, 6.0], [-0.0715499967, 21.0, 22.0, 4.0], [-0.171031937, 0.0, 0.0, 0.0], [0.401165724, 0.0, 0.0, 0.0], [0.00239918195, 0.0, 0.0, 0.0], [0.25905928, 0.0, 0.0, 0.0], [0.175795719, 0.0, 0.0, 0.0], [-0.744620502, 0.0, 0.0, 0.0], [-0.33299616, 0.0, 0.0, 0.0], [0.337011099, 0.0, 0.0, 0.0], [0.508642852, 0.0, 0.0, 0.0], [0.0257020015, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 13, 14, 8, 15, 16, 17, 18, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 4, 7, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_47(xs):
    #Predicts Class 2
    function_dict = np.array([[0.301499993, 1.0, 2.0, 6.0], [0.103500001, 3.0, 4.0, 6.0], [-0.565500021, 5.0, 6.0, 2.0], [-0.373475254, 0.0, 0.0, 0.0], [0.138500005, 7.0, 8.0, 6.0], [-0.419499993, 9.0, 10.0, 1.0], [-0.396499991, 11.0, 12.0, 5.0], [-0.895500004, 13.0, 14.0, 3.0], [-0.19749999, 15.0, 16.0, 4.0], [-0.0907968208, 0.0, 0.0, 0.0], [-0.520224333, 0.0, 0.0, 0.0], [-0.340108633, 0.0, 0.0, 0.0], [0.356808364, 0.0, 0.0, 0.0], [-0.0392251424, 0.0, 0.0, 0.0], [0.516097724, 0.0, 0.0, 0.0], [-0.105380759, 0.0, 0.0, 0.0], [0.0902595669, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 13, 14, 15, 16, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 4, 7, 8, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_48(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.921000004, 1.0, 2.0, 1.0], [-0.858999968, 3.0, 4.0, 4.0], [0.313499987, 5.0, 6.0, 6.0], [0.932500005, 7.0, 8.0, 0.0], [0.215999991, 9.0, 10.0, 6.0], [0.91900003, 11.0, 12.0, 0.0], [0.106119052, 0.0, 0.0, 0.0], [0.902999997, 13.0, 14.0, 0.0], [0.940500021, 15.0, 16.0, 0.0], [-0.996500015, 17.0, 18.0, 3.0], [-0.32250914, 0.0, 0.0, 0.0], [0.0969000012, 19.0, 20.0, 6.0], [0.948500037, 21.0, 22.0, 0.0], [0.0344046913, 0.0, 0.0, 0.0], [-0.500197589, 0.0, 0.0, 0.0], [0.39801994, 0.0, 0.0, 0.0], [0.0105066178, 0.0, 0.0, 0.0], [0.521719396, 0.0, 0.0, 0.0], [0.120084956, 0.0, 0.0, 0.0], [0.0075303237, 0.0, 0.0, 0.0], [-0.446290761, 0.0, 0.0, 0.0], [0.317230463, 0.0, 0.0, 0.0], [-0.341291606, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 10, 19, 20, 21, 22, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_49(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.958500028, 1.0, 2.0, 2.0], [0.300500005, 3.0, 4.0, 6.0], [-0.3720406, 0.0, 0.0, 0.0], [0.292500019, 5.0, 6.0, 6.0], [0.379500002, 7.0, 8.0, 6.0], [0.199499995, 9.0, 10.0, 6.0], [-0.986500025, 11.0, 12.0, 4.0], [-0.934000015, 13.0, 14.0, 1.0], [0.453000009, 15.0, 16.0, 6.0], [-0.00687490264, 0.0, 0.0, 0.0], [0.185677499, 0.0, 0.0, 0.0], [0.325169414, 0.0, 0.0, 0.0], [-1.34210241, 0.0, 0.0, 0.0], [0.394209594, 0.0, 0.0, 0.0], [0.0986102447, 0.0, 0.0, 0.0], [-0.0120343426, 0.0, 0.0, 0.0], [-0.255348206, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_50(xs):
    #Predicts Class 0
    function_dict = np.array([[0.175500005, 1.0, 2.0, 0.0], [-0.629000008, 3.0, 4.0, 5.0], [0.696500003, 5.0, 6.0, 0.0], [0.2685, 7.0, 8.0, 6.0], [0.217000008, 9.0, 10.0, 6.0], [-0.835500002, 11.0, 12.0, 5.0], [0.0299999993, 13.0, 14.0, 6.0], [0.460690558, 0.0, 0.0, 0.0], [-0.913499951, 15.0, 16.0, 3.0], [-0.476999998, 17.0, 18.0, 5.0], [-0.0490499996, 19.0, 20.0, 0.0], [0.537500024, 21.0, 22.0, 0.0], [-0.793500006, 23.0, 24.0, 2.0], [-0.0457439385, 0.0, 0.0, 0.0], [-0.356557906, 0.0, 0.0, 0.0], [-0.490083188, 0.0, 0.0, 0.0], [0.336304784, 0.0, 0.0, 0.0], [0.337563246, 0.0, 0.0, 0.0], [-0.334126711, 0.0, 0.0, 0.0], [0.215043142, 0.0, 0.0, 0.0], [-0.496191174, 0.0, 0.0, 0.0], [0.39266932, 0.0, 0.0, 0.0], [0.0295382794, 0.0, 0.0, 0.0], [0.0796122923, 0.0, 0.0, 0.0], [-0.0855392963, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 13, 14])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 5, 11, 12, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_51(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.794499993, 1.0, 2.0, 2.0], [-0.898499966, 3.0, 4.0, 3.0], [-0.792500019, 5.0, 6.0, 3.0], [0.55250001, 7.0, 8.0, 0.0], [0.342000008, 9.0, 10.0, 0.0], [0.173500001, 11.0, 12.0, 6.0], [-0.728500009, 13.0, 14.0, 5.0], [0.136999995, 15.0, 16.0, 0.0], [-0.907500029, 17.0, 18.0, 2.0], [-0.639500022, 19.0, 20.0, 5.0], [0.560000002, 21.0, 22.0, 0.0], [0.0164000001, 23.0, 24.0, 6.0], [-0.00151500001, 25.0, 26.0, 1.0], [-0.787, 27.0, 28.0, 3.0], [-0.601500034, 29.0, 30.0, 3.0], [-0.0991311669, 0.0, 0.0, 0.0], [-0.449746519, 0.0, 0.0, 0.0], [-0.338109702, 0.0, 0.0, 0.0], [0.0561265014, 0.0, 0.0, 0.0], [-0.392601401, 0.0, 0.0, 0.0], [0.321225971, 0.0, 0.0, 0.0], [0.365305007, 0.0, 0.0, 0.0], [-0.0671833679, 0.0, 0.0, 0.0], [0.400170177, 0.0, 0.0, 0.0], [-0.428448498, 0.0, 0.0, 0.0], [0.122319162, 0.0, 0.0, 0.0], [-0.166473225, 0.0, 0.0, 0.0], [-0.44890973, 0.0, 0.0, 0.0], [0.440274537, 0.0, 0.0, 0.0], [-0.371781886, 0.0, 0.0, 0.0], [0.142277643, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_52(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.801499963, 1.0, 2.0, 3.0], [-0.00151500001, 3.0, 4.0, 1.0], [-0.513000011, 5.0, 6.0, 5.0], [0.216499999, 7.0, 8.0, 6.0], [0.254500002, 9.0, 10.0, 6.0], [-0.197999999, 11.0, 12.0, 4.0], [0.0718999952, 13.0, 14.0, 4.0], [-0.628000021, 15.0, 16.0, 5.0], [-0.940500021, 17.0, 18.0, 3.0], [0.466803849, 0.0, 0.0, 0.0], [-0.853000045, 19.0, 20.0, 3.0], [0.195999995, 21.0, 22.0, 6.0], [0.286000013, 23.0, 24.0, 6.0], [-0.601500034, 25.0, 26.0, 3.0], [-0.471499979, 27.0, 28.0, 5.0], [-0.0846916959, 0.0, 0.0, 0.0], [-0.371483803, 0.0, 0.0, 0.0], [0.22071065, 0.0, 0.0, 0.0], [-0.132969096, 0.0, 0.0, 0.0], [0.176620588, 0.0, 0.0, 0.0], [-0.445518076, 0.0, 0.0, 0.0], [0.233054668, 0.0, 0.0, 0.0], [-0.179931477, 0.0, 0.0, 0.0], [0.508483291, 0.0, 0.0, 0.0], [-0.234546453, 0.0, 0.0, 0.0], [-0.0554536507, 0.0, 0.0, 0.0], [-0.762639046, 0.0, 0.0, 0.0], [-0.475720108, 0.0, 0.0, 0.0], [0.414327741, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_53(xs):
    #Predicts Class 3
    function_dict = np.array([[0.889999986, 1.0, 2.0, 0.0], [0.318499982, 3.0, 4.0, 6.0], [0.164499998, 5.0, 6.0, 6.0], [-0.997500002, 7.0, 8.0, 3.0], [0.0801435336, 0.0, 0.0, 0.0], [0.139499992, 9.0, 10.0, 6.0], [0.178000003, 11.0, 12.0, 6.0], [-0.0591715463, 0.0, 0.0, 0.0], [0.845999956, 13.0, 14.0, 0.0], [-0.995499969, 15.0, 16.0, 5.0], [0.973500013, 17.0, 18.0, 0.0], [0.168500006, 19.0, 20.0, 6.0], [-0.99849999, 21.0, 22.0, 1.0], [-0.384028673, 0.0, 0.0, 0.0], [-0.0661358982, 0.0, 0.0, 0.0], [-0.0046264017, 0.0, 0.0, 0.0], [0.179425597, 0.0, 0.0, 0.0], [0.172133312, 0.0, 0.0, 0.0], [-0.376030475, 0.0, 0.0, 0.0], [0.0810595751, 0.0, 0.0, 0.0], [0.712112248, 0.0, 0.0, 0.0], [-0.335864633, 0.0, 0.0, 0.0], [0.0455386862, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 4, 15, 16, 17, 18, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 8, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_54(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.899500012, 1.0, 2.0, 3.0], [0.164499998, 3.0, 4.0, 6.0], [-0.435019284, 0.0, 0.0, 0.0], [0.139499992, 5.0, 6.0, 6.0], [0.178499997, 7.0, 8.0, 6.0], [-0.989500046, 9.0, 10.0, 4.0], [0.973500013, 11.0, 12.0, 0.0], [0.168500006, 13.0, 14.0, 6.0], [-0.99849999, 15.0, 16.0, 1.0], [-0.119999915, 0.0, 0.0, 0.0], [0.0364855453, 0.0, 0.0, 0.0], [-0.120893717, 0.0, 0.0, 0.0], [0.383656353, 0.0, 0.0, 0.0], [-0.0866286829, 0.0, 0.0, 0.0], [-0.660413563, 0.0, 0.0, 0.0], [0.344443411, 0.0, 0.0, 0.0], [-0.0171041191, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_55(xs):
    #Predicts Class 0
    function_dict = np.array([[0.071800001, 1.0, 2.0, 4.0], [-0.895500004, 3.0, 4.0, 3.0], [-0.383287191, 0.0, 0.0, 0.0], [-0.296499997, 5.0, 6.0, 1.0], [-0.393000007, 7.0, 8.0, 1.0], [-0.759500027, 9.0, 10.0, 5.0], [0.0874000043, 11.0, 12.0, 0.0], [-0.416500002, 13.0, 14.0, 4.0], [-0.87650001, 15.0, 16.0, 3.0], [-0.1116722, 0.0, 0.0, 0.0], [0.186212927, 0.0, 0.0, 0.0], [0.0302164592, 0.0, 0.0, 0.0], [-0.400822014, 0.0, 0.0, 0.0], [0.21791631, 0.0, 0.0, 0.0], [-0.222997278, 0.0, 0.0, 0.0], [0.477462918, 0.0, 0.0, 0.0], [0.0912213027, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_56(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.172499999, 1.0, 2.0, 1.0], [-0.7245, 3.0, 4.0, 5.0], [-0.524500012, 5.0, 6.0, 2.0], [-0.29549998, 7.0, 8.0, 4.0], [-0.0157500003, 9.0, 10.0, 4.0], [-0.695500016, 11.0, 12.0, 3.0], [0.392499983, 13.0, 14.0, 0.0], [-0.787, 15.0, 16.0, 3.0], [0.266499996, 17.0, 18.0, 0.0], [-0.581499994, 19.0, 20.0, 2.0], [0.256500006, 21.0, 22.0, 6.0], [-0.620000005, 23.0, 24.0, 5.0], [-0.114999995, 25.0, 26.0, 1.0], [0.00407500006, 27.0, 28.0, 4.0], [0.208999991, 29.0, 30.0, 6.0], [-0.0944902003, 0.0, 0.0, 0.0], [0.256151766, 0.0, 0.0, 0.0], [-0.179101259, 0.0, 0.0, 0.0], [0.443826288, 0.0, 0.0, 0.0], [-0.109828897, 0.0, 0.0, 0.0], [-0.585554123, 0.0, 0.0, 0.0], [0.370034128, 0.0, 0.0, 0.0], [-0.216476321, 0.0, 0.0, 0.0], [0.160392076, 0.0, 0.0, 0.0], [0.592760563, 0.0, 0.0, 0.0], [-0.560895145, 0.0, 0.0, 0.0], [-0.0183759015, 0.0, 0.0, 0.0], [0.355097145, 0.0, 0.0, 0.0], [-0.378014773, 0.0, 0.0, 0.0], [0.0729125664, 0.0, 0.0, 0.0], [-0.440976053, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_57(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.840499997, 1.0, 2.0, 2.0], [-0.370555252, 0.0, 0.0, 0.0], [-0.176499993, 3.0, 4.0, 1.0], [0.0889500007, 5.0, 6.0, 6.0], [-0.159500003, 7.0, 8.0, 1.0], [-0.387308598, 0.0, 0.0, 0.0], [0.249500006, 9.0, 10.0, 6.0], [0.0609499961, 11.0, 12.0, 4.0], [-0.0148999998, 13.0, 14.0, 4.0], [0.15255712, 0.0, 0.0, 0.0], [-0.081150651, 0.0, 0.0, 0.0], [-0.762375116, 0.0, 0.0, 0.0], [-0.128485948, 0.0, 0.0, 0.0], [-0.121057458, 0.0, 0.0, 0.0], [0.212037668, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 9, 10, 11, 12, 13, 14])
    branch_indices = np.array([0, 2, 3, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_58(xs):
    #Predicts Class 3
    function_dict = np.array([[0.958500028, 1.0, 2.0, 0.0], [0.13350001, 3.0, 4.0, 6.0], [0.963500023, 5.0, 6.0, 0.0], [0.952000022, 7.0, 8.0, 0.0], [-0.76849997, 9.0, 10.0, 4.0], [0.0797999948, 11.0, 12.0, 6.0], [-0.981000006, 13.0, 14.0, 5.0], [0.92900002, 15.0, 16.0, 0.0], [-0.988499999, 17.0, 18.0, 1.0], [-0.99150002, 19.0, 20.0, 1.0], [-0.984500051, 21.0, 22.0, 3.0], [-0.27078405, 0.0, 0.0, 0.0], [-0.989500046, 23.0, 24.0, 1.0], [-0.9745, 25.0, 26.0, 1.0], [-0.819000006, 27.0, 28.0, 4.0], [-0.0307056736, 0.0, 0.0, 0.0], [0.428342998, 0.0, 0.0, 0.0], [-0.424694628, 0.0, 0.0, 0.0], [-0.0564431064, 0.0, 0.0, 0.0], [-0.63974452, 0.0, 0.0, 0.0], [-0.287248462, 0.0, 0.0, 0.0], [0.315247089, 0.0, 0.0, 0.0], [-0.319173574, 0.0, 0.0, 0.0], [0.622333765, 0.0, 0.0, 0.0], [0.158651277, 0.0, 0.0, 0.0], [-0.0020477185, 0.0, 0.0, 0.0], [0.41206339, 0.0, 0.0, 0.0], [-0.716765821, 0.0, 0.0, 0.0], [0.0330154002, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 11, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_59(xs):
    #Predicts Class 4
    function_dict = np.array([[0.773499966, 1.0, 2.0, 0.0], [-0.314214885, 0.0, 0.0, 0.0], [0.958500028, 3.0, 4.0, 0.0], [0.13350001, 5.0, 6.0, 6.0], [0.963500023, 7.0, 8.0, 0.0], [0.952000022, 9.0, 10.0, 0.0], [-0.76849997, 11.0, 12.0, 4.0], [0.0797999948, 13.0, 14.0, 6.0], [-0.981000006, 15.0, 16.0, 5.0], [-0.147129223, 0.0, 0.0, 0.0], [0.346404254, 0.0, 0.0, 0.0], [0.449556947, 0.0, 0.0, 0.0], [-0.155488327, 0.0, 0.0, 0.0], [0.280898571, 0.0, 0.0, 0.0], [-0.490145355, 0.0, 0.0, 0.0], [0.00532273389, 0.0, 0.0, 0.0], [0.466285855, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_60(xs):
    #Predicts Class 0
    function_dict = np.array([[0.0146999992, 1.0, 2.0, 6.0], [-0.389848262, 0.0, 0.0, 0.0], [0.0719500035, 3.0, 4.0, 6.0], [-0.816499949, 5.0, 6.0, 2.0], [-0.843500018, 7.0, 8.0, 3.0], [-0.140068874, 0.0, 0.0, 0.0], [0.416810244, 0.0, 0.0, 0.0], [-0.656000018, 9.0, 10.0, 2.0], [-0.819499969, 11.0, 12.0, 3.0], [-0.00344756618, 0.0, 0.0, 0.0], [-0.270546049, 0.0, 0.0, 0.0], [0.355497539, 0.0, 0.0, 0.0], [0.000991461449, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 9, 10, 11, 12])
    branch_indices = np.array([0, 2, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_61(xs):
    #Predicts Class 1
    function_dict = np.array([[0.345499992, 1.0, 2.0, 6.0], [0.32950002, 3.0, 4.0, 6.0], [-0.79550004, 5.0, 6.0, 2.0], [0.314500004, 7.0, 8.0, 6.0], [-0.693500042, 9.0, 10.0, 2.0], [0.0057523991, 0.0, 0.0, 0.0], [-0.571500003, 11.0, 12.0, 5.0], [-0.00389999989, 13.0, 14.0, 6.0], [0.0788000003, 15.0, 16.0, 0.0], [-0.92750001, 17.0, 18.0, 3.0], [-0.850000024, 19.0, 20.0, 3.0], [0.374068171, 0.0, 0.0, 0.0], [0.0962865651, 0.0, 0.0, 0.0], [0.358999103, 0.0, 0.0, 0.0], [-0.0201857593, 0.0, 0.0, 0.0], [-0.0498055257, 0.0, 0.0, 0.0], [0.409275085, 0.0, 0.0, 0.0], [0.195681363, 0.0, 0.0, 0.0], [-0.574672103, 0.0, 0.0, 0.0], [0.278633922, 0.0, 0.0, 0.0], [-0.0261026826, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_62(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.455500007, 1.0, 2.0, 1.0], [-0.813500047, 3.0, 4.0, 3.0], [-0.796499968, 5.0, 6.0, 2.0], [-0.48299998, 7.0, 8.0, 5.0], [0.229499996, 9.0, 10.0, 6.0], [-0.377499998, 11.0, 12.0, 4.0], [-0.892500043, 13.0, 14.0, 3.0], [0.125499994, 15.0, 16.0, 6.0], [0.280078381, 0.0, 0.0, 0.0], [-0.743499994, 17.0, 18.0, 5.0], [-0.273917854, 0.0, 0.0, 0.0], [0.0818558261, 0.0, 0.0, 0.0], [0.505626976, 0.0, 0.0, 0.0], [0.222499996, 19.0, 20.0, 6.0], [-0.156500012, 21.0, 22.0, 4.0], [-0.108338416, 0.0, 0.0, 0.0], [-0.430768937, 0.0, 0.0, 0.0], [0.00112647226, 0.0, 0.0, 0.0], [0.592225671, 0.0, 0.0, 0.0], [-0.0733590573, 0.0, 0.0, 0.0], [0.184288785, 0.0, 0.0, 0.0], [-0.214564979, 0.0, 0.0, 0.0], [0.0276541393, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 10, 11, 12, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_63(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.935500026, 1.0, 2.0, 1.0], [-0.971500039, 3.0, 4.0, 5.0], [-0.982499957, 5.0, 6.0, 5.0], [-0.995499969, 7.0, 8.0, 4.0], [-0.993000031, 9.0, 10.0, 3.0], [0.16027917, 0.0, 0.0, 0.0], [-0.698500037, 11.0, 12.0, 5.0], [0.19749999, 13.0, 14.0, 6.0], [-0.994500041, 15.0, 16.0, 4.0], [0.43162933, 0.0, 0.0, 0.0], [0.0518813729, 0.0, 0.0, 0.0], [-0.993499994, 17.0, 18.0, 3.0], [-0.0261293482, 0.0, 0.0, 0.0], [0.306777805, 0.0, 0.0, 0.0], [-0.0128532592, 0.0, 0.0, 0.0], [-0.276300043, 0.0, 0.0, 0.0], [0.000268517848, 0.0, 0.0, 0.0], [-0.414671063, 0.0, 0.0, 0.0], [-0.159781605, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 17, 18, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_64(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [0.19749999, 3.0, 4.0, 6.0], [-0.994500041, 5.0, 6.0, 4.0], [-0.99849999, 7.0, 8.0, 1.0], [0.0254268497, 0.0, 0.0, 0.0], [0.0910999998, 9.0, 10.0, 6.0], [-0.989500046, 11.0, 12.0, 4.0], [0.116500005, 13.0, 14.0, 6.0], [-0.424607933, 0.0, 0.0, 0.0], [-0.294513106, 0.0, 0.0, 0.0], [0.1285, 15.0, 16.0, 6.0], [0.198500007, 17.0, 18.0, 6.0], [0.0458000004, 19.0, 20.0, 6.0], [-0.312443614, 0.0, 0.0, 0.0], [0.149453223, 0.0, 0.0, 0.0], [0.776880264, 0.0, 0.0, 0.0], [0.21648331, 0.0, 0.0, 0.0], [-0.147492796, 0.0, 0.0, 0.0], [0.338148296, 0.0, 0.0, 0.0], [0.178780407, 0.0, 0.0, 0.0], [0.00239133765, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 9, 15, 16, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_65(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.602999985, 1.0, 2.0, 4.0], [-0.337732822, 0.0, 0.0, 0.0], [-0.841500044, 3.0, 4.0, 2.0], [0.219999999, 5.0, 6.0, 6.0], [0.21450001, 7.0, 8.0, 6.0], [-0.864500046, 9.0, 10.0, 5.0], [0.29549998, 11.0, 12.0, 6.0], [-0.520500004, 13.0, 14.0, 1.0], [0.2315, 15.0, 16.0, 6.0], [0.202973843, 0.0, 0.0, 0.0], [-0.282079637, 0.0, 0.0, 0.0], [0.392504007, 0.0, 0.0, 0.0], [0.0700383559, 0.0, 0.0, 0.0], [-0.34099701, 0.0, 0.0, 0.0], [0.0928022563, 0.0, 0.0, 0.0], [-0.320304871, 0.0, 0.0, 0.0], [-0.00781787932, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_66(xs):
    #Predicts Class 1
    function_dict = np.array([[0.185499996, 1.0, 2.0, 6.0], [-0.00389999989, 3.0, 4.0, 6.0], [0.188499987, 5.0, 6.0, 6.0], [0.238446385, 0.0, 0.0, 0.0], [-0.494499981, 7.0, 8.0, 2.0], [-0.922999978, 9.0, 10.0, 3.0], [-0.935500026, 11.0, 12.0, 3.0], [0.603500009, 13.0, 14.0, 0.0], [-0.477999985, 15.0, 16.0, 2.0], [0.780515611, 0.0, 0.0, 0.0], [-0.0557442904, 0.0, 0.0, 0.0], [-0.765499949, 17.0, 18.0, 5.0], [0.201499999, 19.0, 20.0, 6.0], [-0.430709511, 0.0, 0.0, 0.0], [-0.0777371451, 0.0, 0.0, 0.0], [0.549588501, 0.0, 0.0, 0.0], [-0.287261993, 0.0, 0.0, 0.0], [0.118887372, 0.0, 0.0, 0.0], [-0.183292627, 0.0, 0.0, 0.0], [-0.283849716, 0.0, 0.0, 0.0], [0.0614638217, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 13, 14, 15, 16, 9, 10, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 4, 7, 8, 2, 5, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_67(xs):
    #Predicts Class 2
    function_dict = np.array([[0.168500006, 1.0, 2.0, 6.0], [0.0693500042, 3.0, 4.0, 6.0], [0.17750001, 5.0, 6.0, 6.0], [-0.270773888, 0.0, 0.0, 0.0], [-0.370000005, 7.0, 8.0, 4.0], [0.578000009, 9.0, 10.0, 0.0], [-0.390500009, 11.0, 12.0, 1.0], [0.544499993, 13.0, 14.0, 0.0], [0.426663876, 0.0, 0.0, 0.0], [-0.0575499982, 15.0, 16.0, 4.0], [0.0965633988, 0.0, 0.0, 0.0], [-0.917500019, 17.0, 18.0, 3.0], [-0.293500006, 19.0, 20.0, 1.0], [0.181369603, 0.0, 0.0, 0.0], [-0.226883918, 0.0, 0.0, 0.0], [-0.562935054, 0.0, 0.0, 0.0], [-0.142464533, 0.0, 0.0, 0.0], [-0.35848102, 0.0, 0.0, 0.0], [-0.0201779753, 0.0, 0.0, 0.0], [0.200410858, 0.0, 0.0, 0.0], [-0.0589220598, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 13, 14, 8, 15, 16, 10, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 4, 7, 2, 5, 9, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_68(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.03675, 1.0, 2.0, 6.0], [-0.999500036, 3.0, 4.0, 3.0], [-0.035149999, 5.0, 6.0, 6.0], [0.341157824, 0.0, 0.0, 0.0], [0.0350018069, 0.0, 0.0, 0.0], [-0.635160565, 0.0, 0.0, 0.0], [-0.0104499999, 7.0, 8.0, 6.0], [0.352624685, 0.0, 0.0, 0.0], [-0.921499968, 9.0, 10.0, 1.0], [0.00408468535, 0.0, 0.0, 0.0], [-0.235023424, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 7, 9, 10])
    branch_indices = np.array([0, 1, 2, 6, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_69(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.03675, 1.0, 2.0, 6.0], [-0.999500036, 3.0, 4.0, 3.0], [-0.035149999, 5.0, 6.0, 6.0], [-0.330068976, 0.0, 0.0, 0.0], [-0.023392871, 0.0, 0.0, 0.0], [0.662460744, 0.0, 0.0, 0.0], [-0.00850000046, 7.0, 8.0, 6.0], [-0.354521841, 0.0, 0.0, 0.0], [-0.899500012, 9.0, 10.0, 3.0], [0.0111230472, 0.0, 0.0, 0.0], [-0.331923336, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 7, 9, 10])
    branch_indices = np.array([0, 1, 2, 6, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_70(xs):
    #Predicts Class 0
    function_dict = np.array([[0.473500013, 1.0, 2.0, 0.0], [-0.801499963, 3.0, 4.0, 5.0], [-0.745499969, 5.0, 6.0, 2.0], [-0.771000028, 7.0, 8.0, 3.0], [-0.843500018, 9.0, 10.0, 3.0], [-0.791499972, 11.0, 12.0, 5.0], [-0.89199996, 13.0, 14.0, 3.0], [-0.318499982, 15.0, 16.0, 1.0], [-0.114732109, 0.0, 0.0, 0.0], [0.2685, 17.0, 18.0, 6.0], [-0.213499993, 19.0, 20.0, 4.0], [0.270500004, 21.0, 22.0, 6.0], [0.276499987, 23.0, 24.0, 6.0], [0.175999999, 25.0, 26.0, 6.0], [-0.676499963, 27.0, 28.0, 2.0], [0.512053251, 0.0, 0.0, 0.0], [0.0246248152, 0.0, 0.0, 0.0], [-0.0389586873, 0.0, 0.0, 0.0], [-0.335567862, 0.0, 0.0, 0.0], [-0.0565702207, 0.0, 0.0, 0.0], [0.203848183, 0.0, 0.0, 0.0], [-0.0269331802, 0.0, 0.0, 0.0], [-0.451787561, 0.0, 0.0, 0.0], [0.0126850922, 0.0, 0.0, 0.0], [0.64583087, 0.0, 0.0, 0.0], [-0.132098749, 0.0, 0.0, 0.0], [-0.517342806, 0.0, 0.0, 0.0], [0.0929408669, 0.0, 0.0, 0.0], [-0.401576489, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_71(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.972499967, 1.0, 2.0, 3.0], [0.266499996, 3.0, 4.0, 6.0], [-0.803499997, 5.0, 6.0, 3.0], [-0.752499998, 7.0, 8.0, 2.0], [-0.98150003, 9.0, 10.0, 3.0], [-0.33950001, 11.0, 12.0, 4.0], [-0.470499992, 13.0, 14.0, 1.0], [-0.398141056, 0.0, 0.0, 0.0], [-0.138109639, 0.0, 0.0, 0.0], [-0.157200158, 0.0, 0.0, 0.0], [0.200377271, 0.0, 0.0, 0.0], [-0.36650002, 15.0, 16.0, 4.0], [-0.764500022, 17.0, 18.0, 5.0], [-0.566499949, 19.0, 20.0, 1.0], [0.32249999, 21.0, 22.0, 6.0], [0.00940746721, 0.0, 0.0, 0.0], [-0.392736286, 0.0, 0.0, 0.0], [0.319318682, 0.0, 0.0, 0.0], [0.0543850847, 0.0, 0.0, 0.0], [-0.195762262, 0.0, 0.0, 0.0], [0.42167452, 0.0, 0.0, 0.0], [-0.160987347, 0.0, 0.0, 0.0], [0.224626318, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 4, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_72(xs):
    #Predicts Class 2
    function_dict = np.array([[0.0678500012, 1.0, 2.0, 0.0], [-0.453999996, 3.0, 4.0, 5.0], [-0.581499994, 5.0, 6.0, 2.0], [-0.174999997, 7.0, 8.0, 0.0], [0.194048852, 0.0, 0.0, 0.0], [0.265500009, 9.0, 10.0, 6.0], [-0.711500049, 11.0, 12.0, 3.0], [0.0267113131, 0.0, 0.0, 0.0], [-0.501832545, 0.0, 0.0, 0.0], [-0.590499997, 13.0, 14.0, 2.0], [-0.426371694, 0.0, 0.0, 0.0], [-0.792999983, 15.0, 16.0, 3.0], [0.289499998, 17.0, 18.0, 0.0], [0.0333339721, 0.0, 0.0, 0.0], [-0.409931064, 0.0, 0.0, 0.0], [0.0896462128, 0.0, 0.0, 0.0], [0.512997925, 0.0, 0.0, 0.0], [0.398867667, 0.0, 0.0, 0.0], [-0.383991867, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 4, 13, 14, 10, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 2, 5, 9, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_73(xs):
    #Predicts Class 3
    function_dict = np.array([[0.0581500009, 1.0, 2.0, 6.0], [0.0458000004, 3.0, 4.0, 6.0], [0.0815500021, 5.0, 6.0, 6.0], [0.03565, 7.0, 8.0, 6.0], [0.057099998, 9.0, 10.0, 6.0], [0.0811500028, 11.0, 12.0, 6.0], [-0.95449996, 13.0, 14.0, 4.0], [-0.979499996, 15.0, 16.0, 4.0], [0.987499952, 17.0, 18.0, 0.0], [0.443904489, 0.0, 0.0, 0.0], [0.0896698162, 0.0, 0.0, 0.0], [0.0763999969, 19.0, 20.0, 6.0], [-0.797679067, 0.0, 0.0, 0.0], [-0.968500018, 21.0, 22.0, 4.0], [-0.948500037, 23.0, 24.0, 4.0], [0.313658506, 0.0, 0.0, 0.0], [-0.0558612533, 0.0, 0.0, 0.0], [0.104318045, 0.0, 0.0, 0.0], [-0.540751636, 0.0, 0.0, 0.0], [-0.229628786, 0.0, 0.0, 0.0], [0.165511563, 0.0, 0.0, 0.0], [0.00323744211, 0.0, 0.0, 0.0], [0.271032095, 0.0, 0.0, 0.0], [-0.369607687, 0.0, 0.0, 0.0], [0.0147372335, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_74(xs):
    #Predicts Class 4
    function_dict = np.array([[0.989500046, 1.0, 2.0, 0.0], [0.987499952, 3.0, 4.0, 0.0], [-0.99849999, 5.0, 6.0, 3.0], [-0.983500004, 7.0, 8.0, 4.0], [-0.990499973, 9.0, 10.0, 1.0], [0.993499994, 11.0, 12.0, 0.0], [-0.506990492, 0.0, 0.0, 0.0], [0.0451999977, 13.0, 14.0, 6.0], [-0.999500036, 15.0, 16.0, 3.0], [-0.99849999, 17.0, 18.0, 1.0], [0.529950321, 0.0, 0.0, 0.0], [-0.99849999, 19.0, 20.0, 1.0], [-0.973500013, 21.0, 22.0, 4.0], [-0.37327069, 0.0, 0.0, 0.0], [0.358405471, 0.0, 0.0, 0.0], [-0.160365537, 0.0, 0.0, 0.0], [0.0706319362, 0.0, 0.0, 0.0], [0.227886394, 0.0, 0.0, 0.0], [-0.482638747, 0.0, 0.0, 0.0], [-0.176121205, 0.0, 0.0, 0.0], [0.191623271, 0.0, 0.0, 0.0], [-0.0967175215, 0.0, 0.0, 0.0], [0.315579444, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 10, 19, 20, 21, 22, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_75(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.0754500031, 1.0, 2.0, 4.0], [-0.585500002, 3.0, 4.0, 3.0], [-0.740499973, 5.0, 6.0, 3.0], [0.345499992, 7.0, 8.0, 0.0], [-0.469500005, 9.0, 10.0, 3.0], [-0.000810000114, 11.0, 12.0, 0.0], [-0.185499996, 13.0, 14.0, 1.0], [0.2685, 15.0, 16.0, 6.0], [0.25849998, 17.0, 18.0, 6.0], [-0.402761638, 0.0, 0.0, 0.0], [-0.0564378835, 0.0, 0.0, 0.0], [-0.1435, 19.0, 20.0, 0.0], [0.174999997, 21.0, 22.0, 6.0], [-0.237991825, 0.0, 0.0, 0.0], [-0.488000005, 23.0, 24.0, 2.0], [0.234806344, 0.0, 0.0, 0.0], [-0.0863718539, 0.0, 0.0, 0.0], [-0.0921599418, 0.0, 0.0, 0.0], [0.106432177, 0.0, 0.0, 0.0], [-0.172422007, 0.0, 0.0, 0.0], [0.214051336, 0.0, 0.0, 0.0], [0.0372080058, 0.0, 0.0, 0.0], [-0.443407953, 0.0, 0.0, 0.0], [0.631987095, 0.0, 0.0, 0.0], [-0.090840362, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 21, 22, 13, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_76(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.658499956, 1.0, 2.0, 2.0], [-0.702499986, 3.0, 4.0, 5.0], [-0.640499949, 5.0, 6.0, 2.0], [-0.261500001, 7.0, 8.0, 4.0], [-0.684499979, 9.0, 10.0, 5.0], [-0.706499994, 11.0, 12.0, 3.0], [-0.634500027, 13.0, 14.0, 2.0], [-0.381500006, 15.0, 16.0, 1.0], [-0.781000018, 17.0, 18.0, 2.0], [-0.402999997, 19.0, 20.0, 1.0], [-0.679499984, 21.0, 22.0, 5.0], [0.236000001, 23.0, 24.0, 6.0], [-0.132647306, 0.0, 0.0, 0.0], [-0.233999997, 25.0, 26.0, 1.0], [-0.221500009, 27.0, 28.0, 1.0], [0.0299070105, 0.0, 0.0, 0.0], [-0.171750382, 0.0, 0.0, 0.0], [-0.137827232, 0.0, 0.0, 0.0], [0.433425963, 0.0, 0.0, 0.0], [-0.148252577, 0.0, 0.0, 0.0], [-0.568879843, 0.0, 0.0, 0.0], [0.2982333, 0.0, 0.0, 0.0], [-0.162701085, 0.0, 0.0, 0.0], [0.0567154847, 0.0, 0.0, 0.0], [0.631242454, 0.0, 0.0, 0.0], [-0.0229169745, 0.0, 0.0, 0.0], [-0.758931577, 0.0, 0.0, 0.0], [0.18795982, 0.0, 0.0, 0.0], [-0.0112174377, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 12, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_77(xs):
    #Predicts Class 2
    function_dict = np.array([[0.667500019, 1.0, 2.0, 0.0], [0.549499989, 3.0, 4.0, 0.0], [0.149500012, 5.0, 6.0, 6.0], [0.531499982, 7.0, 8.0, 0.0], [0.578500032, 9.0, 10.0, 0.0], [-0.0462955572, 0.0, 0.0, 0.0], [-0.35326466, 0.0, 0.0, 0.0], [-0.568500042, 11.0, 12.0, 5.0], [-0.738000035, 13.0, 14.0, 2.0], [-0.939499974, 15.0, 16.0, 3.0], [0.636999965, 17.0, 18.0, 0.0], [-0.0732438862, 0.0, 0.0, 0.0], [0.108254433, 0.0, 0.0, 0.0], [0.238283589, 0.0, 0.0, 0.0], [-0.418746352, 0.0, 0.0, 0.0], [0.618067026, 0.0, 0.0, 0.0], [0.0640443414, 0.0, 0.0, 0.0], [-0.137751877, 0.0, 0.0, 0.0], [0.369741708, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 15, 16, 17, 18, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_78(xs):
    #Predicts Class 3
    function_dict = np.array([[0.199499995, 1.0, 2.0, 6.0], [-0.978500009, 3.0, 4.0, 1.0], [0.222499996, 5.0, 6.0, 6.0], [0.193500012, 7.0, 8.0, 6.0], [-0.983500004, 9.0, 10.0, 5.0], [-0.984500051, 11.0, 12.0, 5.0], [-0.995499969, 13.0, 14.0, 1.0], [0.99150002, 15.0, 16.0, 0.0], [0.987499952, 17.0, 18.0, 0.0], [-0.997500002, 19.0, 20.0, 3.0], [-0.965499997, 21.0, 22.0, 5.0], [-0.424758822, 0.0, 0.0, 0.0], [0.190026909, 0.0, 0.0, 0.0], [0.987499952, 23.0, 24.0, 0.0], [-0.931500018, 25.0, 26.0, 4.0], [0.0204742365, 0.0, 0.0, 0.0], [-0.0743074566, 0.0, 0.0, 0.0], [-0.40939793, 0.0, 0.0, 0.0], [0.527265668, 0.0, 0.0, 0.0], [0.452054888, 0.0, 0.0, 0.0], [0.0432124063, 0.0, 0.0, 0.0], [-0.306124657, 0.0, 0.0, 0.0], [0.132380918, 0.0, 0.0, 0.0], [0.739857793, 0.0, 0.0, 0.0], [-0.148113385, 0.0, 0.0, 0.0], [-0.258739799, 0.0, 0.0, 0.0], [0.12923488, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 11, 12, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_79(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.9745, 1.0, 2.0, 1.0], [-0.996500015, 3.0, 4.0, 3.0], [-0.993499994, 5.0, 6.0, 5.0], [-0.896000028, 7.0, 8.0, 4.0], [-0.871500015, 9.0, 10.0, 4.0], [-0.995499969, 11.0, 12.0, 5.0], [-0.77700001, 13.0, 14.0, 4.0], [-0.999500036, 15.0, 16.0, 2.0], [0.141499996, 17.0, 18.0, 6.0], [0.390223294, 0.0, 0.0, 0.0], [-0.00331824669, 0.0, 0.0, 0.0], [-0.202613488, 0.0, 0.0, 0.0], [-0.552889824, 0.0, 0.0, 0.0], [-0.982499957, 19.0, 20.0, 5.0], [-0.994500041, 21.0, 22.0, 3.0], [0.00525274966, 0.0, 0.0, 0.0], [0.590867579, 0.0, 0.0, 0.0], [-0.407579422, 0.0, 0.0, 0.0], [-0.013989022, 0.0, 0.0, 0.0], [-0.0513720512, 0.0, 0.0, 0.0], [0.320193172, 0.0, 0.0, 0.0], [0.0582859479, 0.0, 0.0, 0.0], [-0.298742443, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 11, 12, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_80(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.249500006, 1.0, 2.0, 4.0], [-0.763499975, 3.0, 4.0, 5.0], [-0.7245, 5.0, 6.0, 5.0], [-0.45450002, 7.0, 8.0, 1.0], [-0.916499972, 9.0, 10.0, 3.0], [-0.831499994, 11.0, 12.0, 3.0], [0.0930999964, 13.0, 14.0, 0.0], [0.638999999, 15.0, 16.0, 0.0], [-0.932500005, 17.0, 18.0, 3.0], [-0.313499987, 19.0, 20.0, 1.0], [0.287499994, 21.0, 22.0, 6.0], [-0.502812743, 0.0, 0.0, 0.0], [0.0187668186, 0.0, 0.0, 0.0], [-0.62650001, 23.0, 24.0, 5.0], [0.291500002, 25.0, 26.0, 0.0], [0.184178263, 0.0, 0.0, 0.0], [-0.239898592, 0.0, 0.0, 0.0], [-0.47605595, 0.0, 0.0, 0.0], [0.00112150132, 0.0, 0.0, 0.0], [0.435612172, 0.0, 0.0, 0.0], [-0.164506584, 0.0, 0.0, 0.0], [-0.054010056, 0.0, 0.0, 0.0], [0.248590469, 0.0, 0.0, 0.0], [0.381862313, 0.0, 0.0, 0.0], [-0.0597068779, 0.0, 0.0, 0.0], [-0.225289196, 0.0, 0.0, 0.0], [0.0199124143, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 11, 12, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_81(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.842499971, 1.0, 2.0, 2.0], [-0.355499983, 3.0, 4.0, 4.0], [0.2685, 5.0, 6.0, 6.0], [0.657500029, 7.0, 8.0, 0.0], [-0.746999979, 9.0, 10.0, 5.0], [-0.0962000042, 11.0, 12.0, 4.0], [0.276499987, 13.0, 14.0, 6.0], [-0.380141109, 0.0, 0.0, 0.0], [-0.942999959, 15.0, 16.0, 2.0], [0.344542116, 0.0, 0.0, 0.0], [-0.240601972, 0.0, 0.0, 0.0], [-0.594500005, 17.0, 18.0, 2.0], [-0.871500015, 19.0, 20.0, 3.0], [-0.370000005, 21.0, 22.0, 1.0], [-0.565999985, 23.0, 24.0, 5.0], [-0.283640653, 0.0, 0.0, 0.0], [0.157614365, 0.0, 0.0, 0.0], [-0.0189221427, 0.0, 0.0, 0.0], [-0.317116439, 0.0, 0.0, 0.0], [0.237198114, 0.0, 0.0, 0.0], [-0.0454364717, 0.0, 0.0, 0.0], [-0.0206860974, 0.0, 0.0, 0.0], [0.444032431, 0.0, 0.0, 0.0], [0.075537473, 0.0, 0.0, 0.0], [-0.177499622, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 9, 10, 17, 18, 19, 20, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 8, 4, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_82(xs):
    #Predicts Class 2
    function_dict = np.array([[0.257499993, 1.0, 2.0, 6.0], [-0.371500015, 3.0, 4.0, 2.0], [-0.0212500002, 5.0, 6.0, 4.0], [-0.0280000009, 7.0, 8.0, 4.0], [0.374512851, 0.0, 0.0, 0.0], [-0.511999965, 9.0, 10.0, 5.0], [-0.194999993, 11.0, 12.0, 1.0], [-0.338499993, 13.0, 14.0, 1.0], [-0.319000006, 15.0, 16.0, 1.0], [-0.559499979, 17.0, 18.0, 5.0], [-0.541162789, 0.0, 0.0, 0.0], [0.115999997, 19.0, 20.0, 4.0], [0.274500012, 21.0, 22.0, 6.0], [-0.0624471456, 0.0, 0.0, 0.0], [0.152281016, 0.0, 0.0, 0.0], [0.244562685, 0.0, 0.0, 0.0], [-0.232710972, 0.0, 0.0, 0.0], [-0.384671688, 0.0, 0.0, 0.0], [0.327886224, 0.0, 0.0, 0.0], [0.687080264, 0.0, 0.0, 0.0], [-0.116739772, 0.0, 0.0, 0.0], [-0.343103409, 0.0, 0.0, 0.0], [0.156317487, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 10, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_83(xs):
    #Predicts Class 3
    function_dict = np.array([[0.912999988, 1.0, 2.0, 0.0], [-0.999500036, 3.0, 4.0, 3.0], [0.245499998, 5.0, 6.0, 6.0], [-0.509579718, 0.0, 0.0, 0.0], [-0.99849999, 7.0, 8.0, 3.0], [0.239499986, 9.0, 10.0, 6.0], [0.287999988, 11.0, 12.0, 6.0], [0.369705558, 0.0, 0.0, 0.0], [0.114500001, 13.0, 14.0, 6.0], [0.199499995, 15.0, 16.0, 6.0], [0.771839917, 0.0, 0.0, 0.0], [-0.391401142, 0.0, 0.0, 0.0], [0.300500005, 17.0, 18.0, 6.0], [0.00128096505, 0.0, 0.0, 0.0], [-0.304325134, 0.0, 0.0, 0.0], [0.0202092286, 0.0, 0.0, 0.0], [-0.176112324, 0.0, 0.0, 0.0], [0.218868792, 0.0, 0.0, 0.0], [-0.183884576, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 13, 14, 15, 16, 10, 11, 17, 18])
    branch_indices = np.array([0, 1, 4, 8, 2, 5, 9, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_84(xs):
    #Predicts Class 4
    function_dict = np.array([[0.0581500009, 1.0, 2.0, 6.0], [0.0458000004, 3.0, 4.0, 6.0], [0.0593999997, 5.0, 6.0, 6.0], [-0.993499994, 7.0, 8.0, 1.0], [0.057099998, 9.0, 10.0, 6.0], [0.424194485, 0.0, 0.0, 0.0], [-0.999500036, 11.0, 12.0, 1.0], [-0.98150003, 13.0, 14.0, 4.0], [-0.997500002, 15.0, 16.0, 3.0], [-0.406974763, 0.0, 0.0, 0.0], [-0.109998338, 0.0, 0.0, 0.0], [0.300088137, 0.0, 0.0, 0.0], [0.245499998, 17.0, 18.0, 6.0], [-0.112143964, 0.0, 0.0, 0.0], [0.47902438, 0.0, 0.0, 0.0], [-0.363012999, 0.0, 0.0, 0.0], [0.140949056, 0.0, 0.0, 0.0], [-0.0027833865, 0.0, 0.0, 0.0], [0.108949028, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 11, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_85(xs):
    #Predicts Class 0
    function_dict = np.array([[0.0128000006, 1.0, 2.0, 4.0], [-0.597000003, 3.0, 4.0, 3.0], [-0.509000003, 5.0, 6.0, 3.0], [-0.537500024, 7.0, 8.0, 1.0], [0.231999993, 9.0, 10.0, 0.0], [-0.34037596, 0.0, 0.0, 0.0], [0.196656525, 0.0, 0.0, 0.0], [0.219999999, 11.0, 12.0, 0.0], [0.2685, 13.0, 14.0, 6.0], [0.0627489761, 0.0, 0.0, 0.0], [-0.403500021, 15.0, 16.0, 3.0], [0.286019713, 0.0, 0.0, 0.0], [-0.220778823, 0.0, 0.0, 0.0], [0.0780342147, 0.0, 0.0, 0.0], [-0.0585128106, 0.0, 0.0, 0.0], [-0.388007194, 0.0, 0.0, 0.0], [-0.0924445093, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 9, 15, 16, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_86(xs):
    #Predicts Class 1
    function_dict = np.array([[0.348500013, 1.0, 2.0, 6.0], [-0.971500039, 3.0, 4.0, 3.0], [0.354499996, 5.0, 6.0, 6.0], [0.266499996, 7.0, 8.0, 6.0], [0.173500001, 9.0, 10.0, 6.0], [0.091323033, 0.0, 0.0, 0.0], [0.316880554, 0.0, 0.0, 0.0], [0.2315, 11.0, 12.0, 6.0], [-0.0223014373, 0.0, 0.0, 0.0], [0.00926000066, 13.0, 14.0, 6.0], [0.638499975, 15.0, 16.0, 0.0], [-0.0917769298, 0.0, 0.0, 0.0], [-0.346344888, 0.0, 0.0, 0.0], [0.2925497, 0.0, 0.0, 0.0], [-0.302507967, 0.0, 0.0, 0.0], [0.00110501866, 0.0, 0.0, 0.0], [0.183928877, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 13, 14, 15, 16, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_87(xs):
    #Predicts Class 2
    function_dict = np.array([[0.301499993, 1.0, 2.0, 6.0], [-0.559499979, 3.0, 4.0, 5.0], [0.0710999966, 5.0, 6.0, 4.0], [-0.741999984, 7.0, 8.0, 3.0], [-0.69749999, 9.0, 10.0, 3.0], [-0.354894459, 0.0, 0.0, 0.0], [-0.861000001, 11.0, 12.0, 3.0], [-0.0213500001, 13.0, 14.0, 4.0], [-0.0692500025, 15.0, 16.0, 1.0], [0.0935000032, 17.0, 18.0, 0.0], [-0.597000003, 19.0, 20.0, 2.0], [-0.215169132, 0.0, 0.0, 0.0], [0.0754221752, 0.0, 0.0, 0.0], [-0.0557491332, 0.0, 0.0, 0.0], [-0.578576624, 0.0, 0.0, 0.0], [0.254467577, 0.0, 0.0, 0.0], [-0.275440156, 0.0, 0.0, 0.0], [-0.23009187, 0.0, 0.0, 0.0], [0.222114876, 0.0, 0.0, 0.0], [0.269820958, 0.0, 0.0, 0.0], [-0.306555331, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_88(xs):
    #Predicts Class 3
    function_dict = np.array([[0.481000006, 1.0, 2.0, 6.0], [0.300500005, 3.0, 4.0, 6.0], [0.308699906, 0.0, 0.0, 0.0], [-0.0357000008, 5.0, 6.0, 6.0], [-0.909999967, 7.0, 8.0, 4.0], [-0.999500036, 9.0, 10.0, 5.0], [-0.035149999, 11.0, 12.0, 6.0], [-0.343892604, 0.0, 0.0, 0.0], [0.0566192605, 0.0, 0.0, 0.0], [0.356760979, 0.0, 0.0, 0.0], [-0.0100994091, 0.0, 0.0, 0.0], [-0.424090028, 0.0, 0.0, 0.0], [0.000346943998, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 7, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_89(xs):
    #Predicts Class 4
    function_dict = np.array([[0.419499993, 1.0, 2.0, 6.0], [0.300500005, 3.0, 4.0, 6.0], [-0.30637145, 0.0, 0.0, 0.0], [0.242500007, 5.0, 6.0, 6.0], [-0.909999967, 7.0, 8.0, 4.0], [0.2315, 9.0, 10.0, 6.0], [0.245499998, 11.0, 12.0, 6.0], [0.345748484, 0.0, 0.0, 0.0], [-0.0537047535, 0.0, 0.0, 0.0], [0.00320876972, 0.0, 0.0, 0.0], [0.258878738, 0.0, 0.0, 0.0], [-0.699731708, 0.0, 0.0, 0.0], [0.0128662959, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 7, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_90(xs):
    #Predicts Class 0
    function_dict = np.array([[0.32950002, 1.0, 2.0, 6.0], [-0.799499989, 3.0, 4.0, 5.0], [-0.479499996, 5.0, 6.0, 1.0], [0.382499993, 7.0, 8.0, 0.0], [-0.794499993, 9.0, 10.0, 5.0], [-0.27333194, 0.0, 0.0, 0.0], [-0.693500042, 11.0, 12.0, 2.0], [-0.938500047, 13.0, 14.0, 3.0], [0.28549999, 15.0, 16.0, 6.0], [0.43599999, 17.0, 18.0, 0.0], [0.280499995, 19.0, 20.0, 6.0], [-0.773000002, 21.0, 22.0, 5.0], [0.025150001, 23.0, 24.0, 0.0], [0.101126604, 0.0, 0.0, 0.0], [0.477476716, 0.0, 0.0, 0.0], [0.0503333248, 0.0, 0.0, 0.0], [-0.377084613, 0.0, 0.0, 0.0], [0.012669987, 0.0, 0.0, 0.0], [-0.558284044, 0.0, 0.0, 0.0], [0.00624635676, 0.0, 0.0, 0.0], [-0.18143703, 0.0, 0.0, 0.0], [-0.0366814509, 0.0, 0.0, 0.0], [0.432415515, 0.0, 0.0, 0.0], [0.0685848221, 0.0, 0.0, 0.0], [-0.241317123, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_91(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.845499992, 1.0, 2.0, 2.0], [-0.355499983, 3.0, 4.0, 4.0], [-0.36500001, 5.0, 6.0, 3.0], [0.657500029, 7.0, 8.0, 0.0], [-0.299499989, 9.0, 10.0, 4.0], [-0.445500016, 11.0, 12.0, 1.0], [0.345052332, 0.0, 0.0, 0.0], [-0.327673703, 0.0, 0.0, 0.0], [-0.942999959, 13.0, 14.0, 2.0], [0.119235314, 0.0, 0.0, 0.0], [-0.0600794442, 0.0, 0.0, 0.0], [0.249500006, 15.0, 16.0, 6.0], [-0.415499985, 17.0, 18.0, 1.0], [-0.241475314, 0.0, 0.0, 0.0], [0.0126767363, 0.0, 0.0, 0.0], [-0.0732778013, 0.0, 0.0, 0.0], [0.224248812, 0.0, 0.0, 0.0], [-0.223344982, 0.0, 0.0, 0.0], [0.0131646181, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 9, 10, 15, 16, 17, 18, 6])
    branch_indices = np.array([0, 1, 3, 8, 4, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_92(xs):
    #Predicts Class 2
    function_dict = np.array([[0.638499975, 1.0, 2.0, 0.0], [0.485500008, 3.0, 4.0, 0.0], [0.1505, 5.0, 6.0, 6.0], [0.227499992, 7.0, 8.0, 6.0], [0.190499991, 9.0, 10.0, 6.0], [-0.0150179984, 0.0, 0.0, 0.0], [-0.317850441, 0.0, 0.0, 0.0], [0.222499996, 11.0, 12.0, 6.0], [-0.571500003, 13.0, 14.0, 2.0], [0.175500005, 15.0, 16.0, 6.0], [-0.707499981, 17.0, 18.0, 2.0], [-0.016881993, 0.0, 0.0, 0.0], [0.464154899, 0.0, 0.0, 0.0], [-0.268070161, 0.0, 0.0, 0.0], [0.0597561859, 0.0, 0.0, 0.0], [0.112958044, 0.0, 0.0, 0.0], [-0.327282578, 0.0, 0.0, 0.0], [0.278372228, 0.0, 0.0, 0.0], [0.0240183845, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 15, 16, 17, 18, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_93(xs):
    #Predicts Class 3
    function_dict = np.array([[0.03565, 1.0, 2.0, 6.0], [-0.989500046, 3.0, 4.0, 4.0], [-0.992499948, 5.0, 6.0, 4.0], [0.355920613, 0.0, 0.0, 0.0], [-0.993499994, 7.0, 8.0, 1.0], [0.109499998, 9.0, 10.0, 6.0], [-0.989500046, 11.0, 12.0, 4.0], [-0.00203999993, 13.0, 14.0, 6.0], [0.922999978, 15.0, 16.0, 0.0], [-0.994500041, 17.0, 18.0, 4.0], [0.145500004, 19.0, 20.0, 6.0], [0.987499952, 21.0, 22.0, 0.0], [0.99150002, 23.0, 24.0, 0.0], [-0.403019309, 0.0, 0.0, 0.0], [0.0852987841, 0.0, 0.0, 0.0], [-0.133524403, 0.0, 0.0, 0.0], [0.299407005, 0.0, 0.0, 0.0], [0.0138423033, 0.0, 0.0, 0.0], [-0.604646921, 0.0, 0.0, 0.0], [0.292323679, 0.0, 0.0, 0.0], [-0.067930758, 0.0, 0.0, 0.0], [-0.288815171, 0.0, 0.0, 0.0], [0.171383277, 0.0, 0.0, 0.0], [0.00995009579, 0.0, 0.0, 0.0], [-0.104432158, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 4, 7, 8, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_94(xs):
    #Predicts Class 4
    function_dict = np.array([[0.873000026, 1.0, 2.0, 0.0], [-0.989500046, 3.0, 4.0, 2.0], [0.889999986, 5.0, 6.0, 0.0], [-0.0525690876, 0.0, 0.0, 0.0], [-0.288072258, 0.0, 0.0, 0.0], [0.376928866, 0.0, 0.0, 0.0], [0.03565, 7.0, 8.0, 6.0], [-0.989500046, 9.0, 10.0, 4.0], [-0.992499948, 11.0, 12.0, 4.0], [-0.35280019, 0.0, 0.0, 0.0], [-0.0308002532, 0.0, 0.0, 0.0], [0.126809329, 0.0, 0.0, 0.0], [-0.00181447947, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 2, 6, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_95(xs):
    #Predicts Class 0
    function_dict = np.array([[0.178499997, 1.0, 2.0, 0.0], [-0.62650001, 3.0, 4.0, 5.0], [-0.300500005, 5.0, 6.0, 4.0], [-0.0576499999, 7.0, 8.0, 0.0], [0.00490499986, 9.0, 10.0, 0.0], [-0.307500005, 11.0, 12.0, 4.0], [-0.808500051, 13.0, 14.0, 3.0], [-0.0648500025, 15.0, 16.0, 0.0], [0.323500007, 17.0, 18.0, 6.0], [-0.516499996, 19.0, 20.0, 5.0], [0.21450001, 21.0, 22.0, 6.0], [-0.773499966, 23.0, 24.0, 3.0], [-0.874000013, 25.0, 26.0, 3.0], [0.181499988, 27.0, 28.0, 6.0], [0.2685, 29.0, 30.0, 6.0], [0.24225986, 0.0, 0.0, 0.0], [-0.46310389, 0.0, 0.0, 0.0], [0.335895896, 0.0, 0.0, 0.0], [-0.050702326, 0.0, 0.0, 0.0], [0.270456105, 0.0, 0.0, 0.0], [-0.115713157, 0.0, 0.0, 0.0], [0.0935374647, 0.0, 0.0, 0.0], [-0.474459797, 0.0, 0.0, 0.0], [0.0359680988, 0.0, 0.0, 0.0], [-0.24093242, 0.0, 0.0, 0.0], [0.468818545, 0.0, 0.0, 0.0], [0.033102762, 0.0, 0.0, 0.0], [0.199404046, 0.0, 0.0, 0.0], [-0.194189563, 0.0, 0.0, 0.0], [0.124125272, 0.0, 0.0, 0.0], [-0.3108733, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_96(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.792500019, 1.0, 2.0, 2.0], [-0.879500031, 3.0, 4.0, 3.0], [-0.918500006, 5.0, 6.0, 3.0], [0.0657999963, 7.0, 8.0, 0.0], [-0.86650002, 9.0, 10.0, 3.0], [-0.921499968, 11.0, 12.0, 3.0], [0.195499986, 13.0, 14.0, 6.0], [0.144115165, 0.0, 0.0, 0.0], [0.229499996, 15.0, 16.0, 6.0], [0.391898155, 0.0, 0.0, 0.0], [-0.773999989, 17.0, 18.0, 3.0], [-0.404500008, 19.0, 20.0, 4.0], [0.741490006, 0.0, 0.0, 0.0], [0.00926000066, 21.0, 22.0, 6.0], [0.517500043, 23.0, 24.0, 0.0], [-0.0428042971, 0.0, 0.0, 0.0], [-0.282003284, 0.0, 0.0, 0.0], [-0.180943772, 0.0, 0.0, 0.0], [0.217393398, 0.0, 0.0, 0.0], [0.445287406, 0.0, 0.0, 0.0], [0.016624691, 0.0, 0.0, 0.0], [0.265683591, 0.0, 0.0, 0.0], [-0.378115863, 0.0, 0.0, 0.0], [-0.0271281507, 0.0, 0.0, 0.0], [0.159007639, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 9, 17, 18, 19, 20, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 8, 4, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_97(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.340499997, 1.0, 2.0, 5.0], [0.152500004, 3.0, 4.0, 4.0], [0.295794815, 0.0, 0.0, 0.0], [0.0678500012, 5.0, 6.0, 0.0], [0.164999992, 7.0, 8.0, 4.0], [-0.0194000006, 9.0, 10.0, 0.0], [0.0860500038, 11.0, 12.0, 4.0], [-0.383690506, 0.0, 0.0, 0.0], [-0.0818612427, 0.0, 0.0, 0.0], [0.0241029579, 0.0, 0.0, 0.0], [-0.408952445, 0.0, 0.0, 0.0], [-0.00282537495, 0.0, 0.0, 0.0], [0.284862369, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 7, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_98(xs):
    #Predicts Class 3
    function_dict = np.array([[0.992499948, 1.0, 2.0, 0.0], [0.99150002, 3.0, 4.0, 0.0], [-0.99849999, 5.0, 6.0, 3.0], [0.990499973, 7.0, 8.0, 0.0], [-0.990499973, 9.0, 10.0, 4.0], [0.074500002, 11.0, 12.0, 6.0], [0.594458163, 0.0, 0.0, 0.0], [0.989500046, 13.0, 14.0, 0.0], [-0.982499957, 15.0, 16.0, 4.0], [-0.997500002, 17.0, 18.0, 1.0], [0.0923499987, 19.0, 20.0, 6.0], [-0.996500015, 21.0, 22.0, 1.0], [0.0997000039, 23.0, 24.0, 6.0], [0.0067367279, 0.0, 0.0, 0.0], [-0.167980641, 0.0, 0.0, 0.0], [0.325986862, 0.0, 0.0, 0.0], [-0.0909792483, 0.0, 0.0, 0.0], [0.239509687, 0.0, 0.0, 0.0], [-0.309149057, 0.0, 0.0, 0.0], [-0.188994497, 0.0, 0.0, 0.0], [-0.540462434, 0.0, 0.0, 0.0], [0.321628213, 0.0, 0.0, 0.0], [0.011618658, 0.0, 0.0, 0.0], [-0.429835021, 0.0, 0.0, 0.0], [0.0808086768, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_99(xs):
    #Predicts Class 4
    function_dict = np.array([[0.992499948, 1.0, 2.0, 0.0], [0.99150002, 3.0, 4.0, 0.0], [-0.99849999, 5.0, 6.0, 3.0], [0.990499973, 7.0, 8.0, 0.0], [-0.990499973, 9.0, 10.0, 4.0], [0.074500002, 11.0, 12.0, 6.0], [-0.589176297, 0.0, 0.0, 0.0], [0.989500046, 13.0, 14.0, 0.0], [-0.982499957, 15.0, 16.0, 4.0], [-0.997500002, 17.0, 18.0, 1.0], [0.0923499987, 19.0, 20.0, 6.0], [-0.996500015, 21.0, 22.0, 1.0], [0.0997000039, 23.0, 24.0, 6.0], [-0.00693035685, 0.0, 0.0, 0.0], [0.171139151, 0.0, 0.0, 0.0], [-0.323013365, 0.0, 0.0, 0.0], [0.0940992385, 0.0, 0.0, 0.0], [-0.237275079, 0.0, 0.0, 0.0], [0.313164949, 0.0, 0.0, 0.0], [0.191973135, 0.0, 0.0, 0.0], [0.541481137, 0.0, 0.0, 0.0], [-0.318670273, 0.0, 0.0, 0.0], [-0.00517695677, 0.0, 0.0, 0.0], [0.432895333, 0.0, 0.0, 0.0], [-0.0763695389, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_100(xs):
    #Predicts Class 0
    function_dict = np.array([[0.144499987, 1.0, 2.0, 6.0], [-0.828999996, 3.0, 4.0, 3.0], [-0.587499976, 5.0, 6.0, 5.0], [-0.368499994, 7.0, 8.0, 1.0], [-0.375355393, 0.0, 0.0, 0.0], [0.182500005, 9.0, 10.0, 6.0], [0.32950002, 11.0, 12.0, 6.0], [-0.819000006, 13.0, 14.0, 5.0], [0.219383404, 0.0, 0.0, 0.0], [-0.809000015, 15.0, 16.0, 5.0], [-0.596500039, 17.0, 18.0, 5.0], [-0.711500049, 19.0, 20.0, 3.0], [0.253212512, 0.0, 0.0, 0.0], [0.0446690619, 0.0, 0.0, 0.0], [-0.284154028, 0.0, 0.0, 0.0], [-0.00595579203, 0.0, 0.0, 0.0], [0.319032431, 0.0, 0.0, 0.0], [-0.00599790597, 0.0, 0.0, 0.0], [0.315633208, 0.0, 0.0, 0.0], [-0.252562791, 0.0, 0.0, 0.0], [0.0199095942, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 15, 16, 17, 18, 19, 20, 12])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 9, 10, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_101(xs):
    #Predicts Class 1
    function_dict = np.array([[0.00915000029, 1.0, 2.0, 6.0], [0.274116993, 0.0, 0.0, 0.0], [0.173500001, 3.0, 4.0, 6.0], [-0.807999969, 5.0, 6.0, 3.0], [-0.112499997, 7.0, 8.0, 1.0], [-0.311308682, 0.0, 0.0, 0.0], [0.0740604103, 0.0, 0.0, 0.0], [-0.237500012, 9.0, 10.0, 1.0], [-0.532999992, 11.0, 12.0, 2.0], [0.0130480602, 0.0, 0.0, 0.0], [-0.100908943, 0.0, 0.0, 0.0], [0.351077974, 0.0, 0.0, 0.0], [-0.0125016803, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 9, 10, 11, 12])
    branch_indices = np.array([0, 2, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_102(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.453500003, 1.0, 2.0, 4.0], [-0.287571132, 0.0, 0.0, 0.0], [0.168500006, 3.0, 4.0, 6.0], [0.0693500042, 5.0, 6.0, 6.0], [0.174499989, 7.0, 8.0, 6.0], [-0.23088634, 0.0, 0.0, 0.0], [0.585500002, 9.0, 10.0, 0.0], [-0.288070649, 0.0, 0.0, 0.0], [-0.178499997, 11.0, 12.0, 1.0], [0.357310683, 0.0, 0.0, 0.0], [-0.0377536714, 0.0, 0.0, 0.0], [0.04943005, 0.0, 0.0, 0.0], [-0.0674715862, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 9, 10, 7, 11, 12])
    branch_indices = np.array([0, 2, 3, 6, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_103(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.999500036, 1.0, 2.0, 1.0], [-0.248929143, 0.0, 0.0, 0.0], [0.993499994, 3.0, 4.0, 0.0], [-0.997500002, 5.0, 6.0, 1.0], [-0.973500013, 7.0, 8.0, 4.0], [0.1435, 9.0, 10.0, 6.0], [-0.957499981, 11.0, 12.0, 4.0], [-0.980499983, 13.0, 14.0, 4.0], [-0.970499992, 15.0, 16.0, 4.0], [0.0255873948, 0.0, 0.0, 0.0], [-0.165437862, 0.0, 0.0, 0.0], [0.0538913868, 0.0, 0.0, 0.0], [-0.0345763154, 0.0, 0.0, 0.0], [0.0655254871, 0.0, 0.0, 0.0], [0.444894403, 0.0, 0.0, 0.0], [-0.432870567, 0.0, 0.0, 0.0], [-0.0798791796, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_104(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.999500036, 1.0, 2.0, 1.0], [0.251365662, 0.0, 0.0, 0.0], [0.379500002, 3.0, 4.0, 6.0], [0.300500005, 5.0, 6.0, 6.0], [-0.253423244, 0.0, 0.0, 0.0], [0.996500015, 7.0, 8.0, 0.0], [0.248830587, 0.0, 0.0, 0.0], [8.07007018e-05, 0.0, 0.0, 0.0], [-0.194002628, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 7, 8, 6, 4])
    branch_indices = np.array([0, 2, 3, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_105(xs):
    #Predicts Class 0
    function_dict = np.array([[0.207500011, 1.0, 2.0, 0.0], [-0.472499996, 3.0, 4.0, 1.0], [0.222499996, 5.0, 6.0, 0.0], [0.335358173, 0.0, 0.0, 0.0], [0.2685, 7.0, 8.0, 6.0], [-0.356441885, 0.0, 0.0, 0.0], [0.255500019, 9.0, 10.0, 6.0], [-0.176499993, 11.0, 12.0, 4.0], [-0.886500001, 13.0, 14.0, 3.0], [-0.469500005, 15.0, 16.0, 1.0], [-0.449000001, 17.0, 18.0, 1.0], [0.304322153, 0.0, 0.0, 0.0], [0.0199415013, 0.0, 0.0, 0.0], [-0.392350137, 0.0, 0.0, 0.0], [0.0426295027, 0.0, 0.0, 0.0], [0.0874375477, 0.0, 0.0, 0.0], [-0.105919048, 0.0, 0.0, 0.0], [-0.147867724, 0.0, 0.0, 0.0], [0.166933089, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 11, 12, 13, 14, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 4, 7, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_106(xs):
    #Predicts Class 1
    function_dict = np.array([[0.3495, 1.0, 2.0, 6.0], [0.328500003, 3.0, 4.0, 6.0], [0.249710664, 0.0, 0.0, 0.0], [-0.957499981, 5.0, 6.0, 3.0], [-0.693500042, 7.0, 8.0, 2.0], [0.2315, 9.0, 10.0, 6.0], [-0.95449996, 11.0, 12.0, 3.0], [-0.486000001, 13.0, 14.0, 1.0], [0.10162285, 0.0, 0.0, 0.0], [0.107239023, 0.0, 0.0, 0.0], [-0.228724644, 0.0, 0.0, 0.0], [0.257959902, 0.0, 0.0, 0.0], [0.00745932665, 0.0, 0.0, 0.0], [0.0857551843, 0.0, 0.0, 0.0], [-0.32466951, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_107(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.338499993, 1.0, 2.0, 1.0], [-0.823500037, 3.0, 4.0, 3.0], [-0.331499994, 5.0, 6.0, 1.0], [0.543500006, 7.0, 8.0, 0.0], [0.2465, 9.0, 10.0, 6.0], [0.376778454, 0.0, 0.0, 0.0], [0.488499999, 11.0, 12.0, 0.0], [0.183499992, 13.0, 14.0, 6.0], [0.577499986, 15.0, 16.0, 0.0], [0.588500023, 17.0, 18.0, 0.0], [-0.279700816, 0.0, 0.0, 0.0], [-0.0449500009, 19.0, 20.0, 1.0], [0.514500022, 21.0, 22.0, 0.0], [0.132013515, 0.0, 0.0, 0.0], [-0.304949373, 0.0, 0.0, 0.0], [0.196374118, 0.0, 0.0, 0.0], [-0.269271582, 0.0, 0.0, 0.0], [0.321157217, 0.0, 0.0, 0.0], [-0.143921643, 0.0, 0.0, 0.0], [0.0137788327, 0.0, 0.0, 0.0], [-0.178576112, 0.0, 0.0, 0.0], [0.348386317, 0.0, 0.0, 0.0], [-0.0186231602, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 10, 5, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_108(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.921000004, 1.0, 2.0, 1.0], [-0.858999968, 3.0, 4.0, 4.0], [-0.73150003, 5.0, 6.0, 5.0], [0.932500005, 7.0, 8.0, 0.0], [-0.997500002, 9.0, 10.0, 3.0], [0.0687500015, 11.0, 12.0, 6.0], [0.0425783582, 0.0, 0.0, 0.0], [0.902999997, 13.0, 14.0, 0.0], [0.940500021, 15.0, 16.0, 0.0], [0.391327918, 0.0, 0.0, 0.0], [0.115500003, 17.0, 18.0, 6.0], [-0.00532236788, 0.0, 0.0, 0.0], [-0.283068627, 0.0, 0.0, 0.0], [0.0751947984, 0.0, 0.0, 0.0], [-0.350908756, 0.0, 0.0, 0.0], [0.314703077, 0.0, 0.0, 0.0], [-0.00272432971, 0.0, 0.0, 0.0], [0.219879255, 0.0, 0.0, 0.0], [-0.132581517, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 17, 18, 11, 12, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_109(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.969500005, 1.0, 2.0, 4.0], [0.965499997, 3.0, 4.0, 0.0], [-0.957499981, 5.0, 6.0, 4.0], [0.962000012, 7.0, 8.0, 0.0], [0.975499988, 9.0, 10.0, 0.0], [-0.999500036, 11.0, 12.0, 3.0], [-0.994500041, 13.0, 14.0, 1.0], [-0.139386758, 0.0, 0.0, 0.0], [0.785491288, 0.0, 0.0, 0.0], [0.968500018, 15.0, 16.0, 0.0], [-0.993499994, 17.0, 18.0, 1.0], [0.976500034, 19.0, 20.0, 0.0], [-0.992499948, 21.0, 22.0, 1.0], [0.1215, 23.0, 24.0, 6.0], [-0.992499948, 25.0, 26.0, 1.0], [0.0828610286, 0.0, 0.0, 0.0], [-0.34691906, 0.0, 0.0, 0.0], [0.00394358672, 0.0, 0.0, 0.0], [0.308727115, 0.0, 0.0, 0.0], [0.0531672202, 0.0, 0.0, 0.0], [-0.455630064, 0.0, 0.0, 0.0], [0.330582827, 0.0, 0.0, 0.0], [-0.29895547, 0.0, 0.0, 0.0], [-0.034248393, 0.0, 0.0, 0.0], [0.560566962, 0.0, 0.0, 0.0], [-0.238864183, 0.0, 0.0, 0.0], [0.00274132611, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_110(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.343500018, 1.0, 2.0, 1.0], [-0.69749999, 3.0, 4.0, 2.0], [0.517500043, 5.0, 6.0, 0.0], [-0.706499994, 7.0, 8.0, 2.0], [-0.299000025, 9.0, 10.0, 4.0], [-0.695500016, 11.0, 12.0, 5.0], [0.152999997, 13.0, 14.0, 6.0], [-0.702499986, 15.0, 16.0, 5.0], [-0.92750001, 17.0, 18.0, 3.0], [0.500110984, 0.0, 0.0, 0.0], [-0.622500002, 19.0, 20.0, 5.0], [-0.922500014, 21.0, 22.0, 3.0], [-0.830500007, 23.0, 24.0, 3.0], [0.17237246, 0.0, 0.0, 0.0], [-0.401726693, 0.0, 0.0, 0.0], [-0.0242240373, 0.0, 0.0, 0.0], [0.270101637, 0.0, 0.0, 0.0], [-0.537219524, 0.0, 0.0, 0.0], [-0.011514185, 0.0, 0.0, 0.0], [-0.200166807, 0.0, 0.0, 0.0], [0.237071946, 0.0, 0.0, 0.0], [-0.0909933001, 0.0, 0.0, 0.0], [0.230845466, 0.0, 0.0, 0.0], [-0.296497852, 0.0, 0.0, 0.0], [0.0223129988, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 21, 22, 23, 24, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 11, 12, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_111(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.340499997, 1.0, 2.0, 5.0], [-0.778499961, 3.0, 4.0, 2.0], [-0.273909122, 0.0, 0.0, 0.0], [0.239499986, 5.0, 6.0, 6.0], [0.245499998, 7.0, 8.0, 6.0], [0.521000028, 9.0, 10.0, 0.0], [0.281499982, 11.0, 12.0, 6.0], [0.523499966, 13.0, 14.0, 0.0], [-0.445500016, 15.0, 16.0, 1.0], [0.435609162, 0.0, 0.0, 0.0], [-0.15236564, 0.0, 0.0, 0.0], [-0.308514655, 0.0, 0.0, 0.0], [0.0604100116, 0.0, 0.0, 0.0], [-0.0901648402, 0.0, 0.0, 0.0], [0.137889564, 0.0, 0.0, 0.0], [0.367389739, 0.0, 0.0, 0.0], [0.0348491296, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_112(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.2755, 1.0, 2.0, 4.0], [0.560500026, 3.0, 4.0, 0.0], [0.227499992, 5.0, 6.0, 6.0], [0.168500006, 7.0, 8.0, 6.0], [0.245499998, 9.0, 10.0, 6.0], [-0.631500006, 11.0, 12.0, 5.0], [-0.581499994, 13.0, 14.0, 2.0], [0.0546569191, 0.0, 0.0, 0.0], [-0.771499991, 15.0, 16.0, 3.0], [-0.796499968, 17.0, 18.0, 2.0], [0.447038352, 0.0, 0.0, 0.0], [-0.19749999, 19.0, 20.0, 4.0], [-0.159500003, 21.0, 22.0, 1.0], [-0.702000022, 23.0, 24.0, 2.0], [-0.940500021, 25.0, 26.0, 3.0], [-0.381007761, 0.0, 0.0, 0.0], [-0.100057475, 0.0, 0.0, 0.0], [0.0714104474, 0.0, 0.0, 0.0], [-0.270067602, 0.0, 0.0, 0.0], [0.00730327982, 0.0, 0.0, 0.0], [0.447889775, 0.0, 0.0, 0.0], [-0.120815046, 0.0, 0.0, 0.0], [0.0781983882, 0.0, 0.0, 0.0], [0.111194424, 0.0, 0.0, 0.0], [-0.257112741, 0.0, 0.0, 0.0], [0.341618121, 0.0, 0.0, 0.0], [0.0276195277, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 17, 18, 10, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_113(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.992499948, 1.0, 2.0, 3.0], [-0.909500003, 3.0, 4.0, 4.0], [0.944999993, 5.0, 6.0, 0.0], [-0.996500015, 7.0, 8.0, 5.0], [-0.961500049, 9.0, 10.0, 1.0], [0.902500033, 11.0, 12.0, 0.0], [-0.301521897, 0.0, 0.0, 0.0], [0.904000044, 13.0, 14.0, 0.0], [0.0579499975, 15.0, 16.0, 6.0], [0.91050005, 17.0, 18.0, 0.0], [-0.834499955, 19.0, 20.0, 4.0], [-0.960500002, 21.0, 22.0, 3.0], [0.146236703, 0.0, 0.0, 0.0], [0.318808287, 0.0, 0.0, 0.0], [-0.00117911119, 0.0, 0.0, 0.0], [0.19803527, 0.0, 0.0, 0.0], [-0.214648962, 0.0, 0.0, 0.0], [-0.0291502886, 0.0, 0.0, 0.0], [0.322547555, 0.0, 0.0, 0.0], [-0.217587158, 0.0, 0.0, 0.0], [0.0476517603, 0.0, 0.0, 0.0], [-0.00209959061, 0.0, 0.0, 0.0], [-0.236940324, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 12, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_114(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.805999994, 1.0, 2.0, 1.0], [-0.992499948, 3.0, 4.0, 3.0], [-0.233477339, 0.0, 0.0, 0.0], [-0.909500003, 5.0, 6.0, 4.0], [-0.962000012, 7.0, 8.0, 3.0], [-0.996500015, 9.0, 10.0, 5.0], [-0.961500049, 11.0, 12.0, 1.0], [0.284392387, 0.0, 0.0, 0.0], [0.107999995, 13.0, 14.0, 6.0], [0.00131165737, 0.0, 0.0, 0.0], [0.139076427, 0.0, 0.0, 0.0], [-0.250565886, 0.0, 0.0, 0.0], [0.101515673, 0.0, 0.0, 0.0], [-0.0821697414, 0.0, 0.0, 0.0], [0.06894923, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 7, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_115(xs):
    #Predicts Class 0
    function_dict = np.array([[0.619500041, 1.0, 2.0, 0.0], [-0.377499998, 3.0, 4.0, 4.0], [0.25849998, 5.0, 6.0, 6.0], [-0.410000026, 7.0, 8.0, 1.0], [-0.763499975, 9.0, 10.0, 5.0], [0.0649999976, 11.0, 12.0, 6.0], [-0.438499987, 13.0, 14.0, 1.0], [0.528499961, 15.0, 16.0, 0.0], [-0.380999982, 17.0, 18.0, 1.0], [0.541000009, 19.0, 20.0, 0.0], [-0.296000004, 21.0, 22.0, 4.0], [-0.0196661688, 0.0, 0.0, 0.0], [-0.308988512, 0.0, 0.0, 0.0], [-0.0905110911, 0.0, 0.0, 0.0], [0.32501331, 0.0, 0.0, 0.0], [0.36478731, 0.0, 0.0, 0.0], [0.0742789656, 0.0, 0.0, 0.0], [-0.389089435, 0.0, 0.0, 0.0], [0.128374591, 0.0, 0.0, 0.0], [-0.337183714, 0.0, 0.0, 0.0], [0.177970126, 0.0, 0.0, 0.0], [0.162844285, 0.0, 0.0, 0.0], [-0.0100478847, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_116(xs):
    #Predicts Class 1
    function_dict = np.array([[0.338499993, 1.0, 2.0, 0.0], [-0.782500029, 3.0, 4.0, 5.0], [0.28549999, 5.0, 6.0, 6.0], [-0.933500051, 7.0, 8.0, 3.0], [-0.763499975, 9.0, 10.0, 5.0], [0.276499987, 11.0, 12.0, 6.0], [0.331499994, 13.0, 14.0, 6.0], [-0.0762166381, 0.0, 0.0, 0.0], [-0.426115841, 0.0, 0.0, 0.0], [-0.491999984, 15.0, 16.0, 1.0], [-0.621500015, 17.0, 18.0, 2.0], [0.353500009, 19.0, 20.0, 0.0], [0.521499991, 21.0, 22.0, 0.0], [0.431500018, 23.0, 24.0, 0.0], [0.345499992, 25.0, 26.0, 6.0], [-0.136389688, 0.0, 0.0, 0.0], [0.615829527, 0.0, 0.0, 0.0], [-0.16357775, 0.0, 0.0, 0.0], [0.0581208244, 0.0, 0.0, 0.0], [0.423769414, 0.0, 0.0, 0.0], [0.00545228692, 0.0, 0.0, 0.0], [-0.0667111799, 0.0, 0.0, 0.0], [-0.503560841, 0.0, 0.0, 0.0], [0.14112477, 0.0, 0.0, 0.0], [0.405142426, 0.0, 0.0, 0.0], [-0.161892563, 0.0, 0.0, 0.0], [0.165458083, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_117(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.370000005, 1.0, 2.0, 4.0], [0.569499969, 3.0, 4.0, 0.0], [-0.362500012, 5.0, 6.0, 4.0], [0.542500019, 7.0, 8.0, 0.0], [-0.269104332, 0.0, 0.0, 0.0], [0.352663845, 0.0, 0.0, 0.0], [-0.314500004, 9.0, 10.0, 4.0], [-0.213608205, 0.0, 0.0, 0.0], [0.0915280506, 0.0, 0.0, 0.0], [-0.777500033, 11.0, 12.0, 5.0], [-0.970499992, 13.0, 14.0, 3.0], [-0.0394668356, 0.0, 0.0, 0.0], [-0.26325351, 0.0, 0.0, 0.0], [0.283803016, 0.0, 0.0, 0.0], [0.0029956277, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 4, 5, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_118(xs):
    #Predicts Class 3
    function_dict = np.array([[0.932500005, 1.0, 2.0, 0.0], [-0.896499991, 3.0, 4.0, 4.0], [0.940500021, 5.0, 6.0, 0.0], [0.104499996, 7.0, 8.0, 6.0], [-0.710999966, 9.0, 10.0, 4.0], [-0.906000018, 11.0, 12.0, 4.0], [0.943500042, 13.0, 14.0, 0.0], [-0.400121599, 0.0, 0.0, 0.0], [0.116499998, 15.0, 16.0, 6.0], [-0.77700001, 17.0, 18.0, 4.0], [0.887500048, 19.0, 20.0, 0.0], [0.318479061, 0.0, 0.0, 0.0], [0.0534412637, 0.0, 0.0, 0.0], [-0.411582023, 0.0, 0.0, 0.0], [0.951499999, 21.0, 22.0, 0.0], [0.318123609, 0.0, 0.0, 0.0], [-0.261779755, 0.0, 0.0, 0.0], [-0.0121365506, 0.0, 0.0, 0.0], [0.289575309, 0.0, 0.0, 0.0], [-0.0463268124, 0.0, 0.0, 0.0], [-0.270511866, 0.0, 0.0, 0.0], [0.240536571, 0.0, 0.0, 0.0], [0.00025208795, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 17, 18, 19, 20, 11, 12, 13, 21, 22])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 5, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_119(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 1.0], [-0.999500036, 3.0, 4.0, 3.0], [-0.999500036, 5.0, 6.0, 5.0], [0.965499997, 7.0, 8.0, 0.0], [-0.942499995, 9.0, 10.0, 4.0], [0.0821499974, 11.0, 12.0, 6.0], [0.992499948, 13.0, 14.0, 0.0], [0.526313066, 0.0, 0.0, 0.0], [-0.967499971, 15.0, 16.0, 4.0], [0.992499948, 17.0, 18.0, 0.0], [-0.105521858, 0.0, 0.0, 0.0], [0.0342999995, 19.0, 20.0, 6.0], [0.986500025, 21.0, 22.0, 0.0], [0.970499992, 23.0, 24.0, 0.0], [0.993499994, 25.0, 26.0, 0.0], [0.0106141558, 0.0, 0.0, 0.0], [-0.284411341, 0.0, 0.0, 0.0], [0.446062118, 0.0, 0.0, 0.0], [-0.0111164981, 0.0, 0.0, 0.0], [-0.30179894, 0.0, 0.0, 0.0], [0.348803103, 0.0, 0.0, 0.0], [0.0263963416, 0.0, 0.0, 0.0], [-0.54674226, 0.0, 0.0, 0.0], [-0.050673604, 0.0, 0.0, 0.0], [0.130078852, 0.0, 0.0, 0.0], [-0.507453561, 0.0, 0.0, 0.0], [0.127716035, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 17, 18, 10, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_120(xs):
    #Predicts Class 0
    function_dict = np.array([[0.215499997, 1.0, 2.0, 6.0], [0.191500008, 3.0, 4.0, 6.0], [0.2315, 5.0, 6.0, 6.0], [-0.755499959, 7.0, 8.0, 3.0], [-0.901499987, 9.0, 10.0, 3.0], [-0.153499991, 11.0, 12.0, 1.0], [-0.423500001, 13.0, 14.0, 1.0], [-0.89349997, 15.0, 16.0, 3.0], [-0.317169696, 0.0, 0.0, 0.0], [-0.174500003, 17.0, 18.0, 4.0], [0.634000003, 19.0, 20.0, 0.0], [-0.469999999, 21.0, 22.0, 1.0], [0.110173091, 0.0, 0.0, 0.0], [0.243499994, 23.0, 24.0, 6.0], [0.254500002, 25.0, 26.0, 6.0], [-0.10720329, 0.0, 0.0, 0.0], [0.156752869, 0.0, 0.0, 0.0], [-0.180070415, 0.0, 0.0, 0.0], [0.194866762, 0.0, 0.0, 0.0], [0.331372201, 0.0, 0.0, 0.0], [-0.0627629682, 0.0, 0.0, 0.0], [-0.135971218, 0.0, 0.0, 0.0], [-0.460966438, 0.0, 0.0, 0.0], [0.330503821, 0.0, 0.0, 0.0], [0.0198835712, 0.0, 0.0, 0.0], [-0.161394551, 0.0, 0.0, 0.0], [0.00811141171, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 12, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_121(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.842499971, 1.0, 2.0, 2.0], [0.227499992, 3.0, 4.0, 6.0], [-0.36500001, 5.0, 6.0, 3.0], [-0.869500041, 7.0, 8.0, 5.0], [-0.236625314, 0.0, 0.0, 0.0], [-0.696500003, 9.0, 10.0, 3.0], [0.286649436, 0.0, 0.0, 0.0], [-0.175088122, 0.0, 0.0, 0.0], [0.164256945, 0.0, 0.0, 0.0], [-0.00151500001, 11.0, 12.0, 1.0], [-0.568499982, 13.0, 14.0, 2.0], [0.0262984615, 0.0, 0.0, 0.0], [-0.166503727, 0.0, 0.0, 0.0], [-0.22326088, 0.0, 0.0, 0.0], [0.128718406, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 4, 11, 12, 13, 14, 6])
    branch_indices = np.array([0, 1, 3, 2, 5, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_122(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.340499997, 1.0, 2.0, 5.0], [0.0678500012, 3.0, 4.0, 0.0], [0.246971503, 0.0, 0.0, 0.0], [-0.56400001, 5.0, 6.0, 2.0], [-0.551499963, 7.0, 8.0, 2.0], [0.0734687746, 0.0, 0.0, 0.0], [-0.345523477, 0.0, 0.0, 0.0], [0.265500009, 9.0, 10.0, 6.0], [-0.711500049, 11.0, 12.0, 3.0], [-0.00104938459, 0.0, 0.0, 0.0], [-0.333339214, 0.0, 0.0, 0.0], [0.118486486, 0.0, 0.0, 0.0], [-0.164106548, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 6, 9, 10, 11, 12, 2])
    branch_indices = np.array([0, 1, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_123(xs):
    #Predicts Class 3
    function_dict = np.array([[0.961500049, 1.0, 2.0, 0.0], [0.193500012, 3.0, 4.0, 6.0], [0.963500023, 5.0, 6.0, 0.0], [-0.992499948, 7.0, 8.0, 1.0], [-0.76849997, 9.0, 10.0, 4.0], [-0.987499952, 11.0, 12.0, 1.0], [0.965499997, 13.0, 14.0, 0.0], [-0.970499992, 15.0, 16.0, 4.0], [0.934499979, 17.0, 18.0, 0.0], [-0.347155482, 0.0, 0.0, 0.0], [-0.0130901234, 0.0, 0.0, 0.0], [-0.953000009, 19.0, 20.0, 4.0], [0.0107078059, 0.0, 0.0, 0.0], [-0.948499978, 21.0, 22.0, 4.0], [0.967499971, 23.0, 24.0, 0.0], [0.303398043, 0.0, 0.0, 0.0], [-0.361047804, 0.0, 0.0, 0.0], [-0.090600498, 0.0, 0.0, 0.0], [0.213060156, 0.0, 0.0, 0.0], [0.131131336, 0.0, 0.0, 0.0], [0.499820739, 0.0, 0.0, 0.0], [-0.5076406, 0.0, 0.0, 0.0], [0.122408353, 0.0, 0.0, 0.0], [0.252030641, 0.0, 0.0, 0.0], [0.003889343, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_124(xs):
    #Predicts Class 4
    function_dict = np.array([[0.139499992, 1.0, 2.0, 6.0], [0.127499998, 3.0, 4.0, 6.0], [0.1505, 5.0, 6.0, 6.0], [0.122500002, 7.0, 8.0, 6.0], [0.986500025, 9.0, 10.0, 0.0], [0.973999977, 11.0, 12.0, 0.0], [0.151499987, 13.0, 14.0, 6.0], [0.103500001, 15.0, 16.0, 6.0], [-0.977499962, 17.0, 18.0, 4.0], [-0.990999997, 19.0, 20.0, 1.0], [-0.460924178, 0.0, 0.0, 0.0], [-0.99849999, 21.0, 22.0, 3.0], [-0.965499997, 23.0, 24.0, 4.0], [-0.533728838, 0.0, 0.0, 0.0], [0.164499998, 25.0, 26.0, 6.0], [0.00585621223, 0.0, 0.0, 0.0], [-0.131276295, 0.0, 0.0, 0.0], [0.772717059, 0.0, 0.0, 0.0], [-0.0119398506, 0.0, 0.0, 0.0], [0.487310588, 0.0, 0.0, 0.0], [-0.476102889, 0.0, 0.0, 0.0], [-0.301212579, 0.0, 0.0, 0.0], [0.0786636844, 0.0, 0.0, 0.0], [0.384180307, 0.0, 0.0, 0.0], [0.0830618143, 0.0, 0.0, 0.0], [0.187672645, 0.0, 0.0, 0.0], [0.00211749482, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 21, 22, 23, 24, 13, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_125(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.342500001, 1.0, 2.0, 1.0], [-0.348500013, 3.0, 4.0, 1.0], [0.460500002, 5.0, 6.0, 0.0], [-0.653499961, 7.0, 8.0, 5.0], [0.370333374, 0.0, 0.0, 0.0], [-0.720499992, 9.0, 10.0, 5.0], [0.199499995, 11.0, 12.0, 6.0], [-0.233500004, 13.0, 14.0, 4.0], [-0.0847499967, 15.0, 16.0, 4.0], [-0.276499987, 17.0, 18.0, 1.0], [-0.236000001, 19.0, 20.0, 1.0], [-0.708999991, 21.0, 22.0, 2.0], [-0.76849997, 23.0, 24.0, 2.0], [0.0232598521, 0.0, 0.0, 0.0], [-0.218962729, 0.0, 0.0, 0.0], [0.271869272, 0.0, 0.0, 0.0], [-0.159824997, 0.0, 0.0, 0.0], [0.44435057, 0.0, 0.0, 0.0], [-0.0484210514, 0.0, 0.0, 0.0], [-0.22498019, 0.0, 0.0, 0.0], [0.0320866369, 0.0, 0.0, 0.0], [0.200875282, 0.0, 0.0, 0.0], [-0.19137308, 0.0, 0.0, 0.0], [-0.0522173569, 0.0, 0.0, 0.0], [-0.328211933, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 19, 20, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_126(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.45450002, 1.0, 2.0, 2.0], [-0.466499984, 3.0, 4.0, 2.0], [0.472499996, 5.0, 6.0, 0.0], [-0.0075749997, 7.0, 8.0, 4.0], [-0.312382579, 0.0, 0.0, 0.0], [0.0528500006, 9.0, 10.0, 4.0], [0.253499985, 11.0, 12.0, 6.0], [-0.0500999987, 13.0, 14.0, 4.0], [0.287999988, 15.0, 16.0, 0.0], [-0.0708499998, 17.0, 18.0, 4.0], [-0.115037061, 0.0, 0.0, 0.0], [-0.251127005, 0.0, 0.0, 0.0], [-0.0311372299, 0.0, 0.0, 0.0], [0.00705840392, 0.0, 0.0, 0.0], [-0.338795662, 0.0, 0.0, 0.0], [-0.137720868, 0.0, 0.0, 0.0], [0.253306061, 0.0, 0.0, 0.0], [-0.0303250104, 0.0, 0.0, 0.0], [0.44323802, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 10, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_127(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.918500006, 1.0, 2.0, 3.0], [-0.381999999, 3.0, 4.0, 1.0], [-0.908499956, 5.0, 6.0, 3.0], [0.575999975, 7.0, 8.0, 0.0], [-0.590000033, 9.0, 10.0, 5.0], [-0.235500008, 11.0, 12.0, 1.0], [-0.569000006, 13.0, 14.0, 5.0], [-0.386658758, 0.0, 0.0, 0.0], [-0.0169038791, 0.0, 0.0, 0.0], [0.585500002, 15.0, 16.0, 0.0], [-0.534999967, 17.0, 18.0, 5.0], [-0.314999998, 19.0, 20.0, 1.0], [-0.492500007, 21.0, 22.0, 2.0], [0.238499999, 23.0, 24.0, 6.0], [-0.539999962, 25.0, 26.0, 5.0], [0.139225438, 0.0, 0.0, 0.0], [-0.272141635, 0.0, 0.0, 0.0], [-0.318728447, 0.0, 0.0, 0.0], [0.0678231716, 0.0, 0.0, 0.0], [0.161209524, 0.0, 0.0, 0.0], [0.529913664, 0.0, 0.0, 0.0], [-0.25880754, 0.0, 0.0, 0.0], [0.00968994759, 0.0, 0.0, 0.0], [0.0480922349, 0.0, 0.0, 0.0], [-0.273218781, 0.0, 0.0, 0.0], [0.404416025, 0.0, 0.0, 0.0], [0.00304360036, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_128(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.992499948, 1.0, 2.0, 3.0], [-0.978500009, 3.0, 4.0, 1.0], [0.944999993, 5.0, 6.0, 0.0], [-0.999500036, 7.0, 8.0, 2.0], [-0.902500033, 9.0, 10.0, 4.0], [0.114500001, 11.0, 12.0, 6.0], [-0.284831136, 0.0, 0.0, 0.0], [-0.996500015, 13.0, 14.0, 3.0], [-0.322629899, 0.0, 0.0, 0.0], [0.199499995, 15.0, 16.0, 6.0], [0.1065, 17.0, 18.0, 6.0], [0.0701007545, 0.0, 0.0, 0.0], [-0.125904143, 0.0, 0.0, 0.0], [0.00610846886, 0.0, 0.0, 0.0], [-0.278981924, 0.0, 0.0, 0.0], [0.324032962, 0.0, 0.0, 0.0], [0.0618365854, 0.0, 0.0, 0.0], [0.174859256, 0.0, 0.0, 0.0], [-0.157515377, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 15, 16, 17, 18, 11, 12, 6])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_129(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.9745, 1.0, 2.0, 1.0], [-0.999500036, 3.0, 4.0, 2.0], [-0.876999974, 5.0, 6.0, 4.0], [-0.996500015, 7.0, 8.0, 3.0], [0.334584385, 0.0, 0.0, 0.0], [-0.293352544, 0.0, 0.0, 0.0], [-0.834499955, 9.0, 10.0, 4.0], [-0.995499969, 11.0, 12.0, 1.0], [0.949499965, 13.0, 14.0, 0.0], [-0.983500004, 15.0, 16.0, 5.0], [0.107500002, 17.0, 18.0, 6.0], [0.0165717509, 0.0, 0.0, 0.0], [-0.0381325893, 0.0, 0.0, 0.0], [0.0313605219, 0.0, 0.0, 0.0], [0.333621174, 0.0, 0.0, 0.0], [0.082972616, 0.0, 0.0, 0.0], [0.322280049, 0.0, 0.0, 0.0], [-0.19418855, 0.0, 0.0, 0.0], [-0.00257903524, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_130(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.472499996, 1.0, 2.0, 2.0], [-0.0615499988, 3.0, 4.0, 1.0], [0.0342999995, 5.0, 6.0, 1.0], [-0.585500002, 7.0, 8.0, 2.0], [-0.846000016, 9.0, 10.0, 3.0], [-0.305007815, 0.0, 0.0, 0.0], [0.0952499956, 11.0, 12.0, 1.0], [0.0939500034, 13.0, 14.0, 0.0], [0.211499989, 15.0, 16.0, 6.0], [-0.106344916, 0.0, 0.0, 0.0], [0.293736517, 0.0, 0.0, 0.0], [0.106445439, 0.0, 0.0, 0.0], [-0.163970247, 0.0, 0.0, 0.0], [0.167360529, 0.0, 0.0, 0.0], [-0.00127736107, 0.0, 0.0, 0.0], [-0.0138652083, 0.0, 0.0, 0.0], [-0.315668851, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_131(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.982499957, 1.0, 2.0, 3.0], [-0.224622205, 0.0, 0.0, 0.0], [-0.658499956, 3.0, 4.0, 2.0], [-0.715499997, 5.0, 6.0, 5.0], [-0.640499949, 7.0, 8.0, 2.0], [-0.29549998, 9.0, 10.0, 4.0], [-0.304499984, 11.0, 12.0, 1.0], [-0.706499994, 13.0, 14.0, 3.0], [-0.630499959, 15.0, 16.0, 2.0], [-0.00978680514, 0.0, 0.0, 0.0], [0.163063943, 0.0, 0.0, 0.0], [-0.0514932759, 0.0, 0.0, 0.0], [-0.30732736, 0.0, 0.0, 0.0], [0.315712422, 0.0, 0.0, 0.0], [-0.0551830418, 0.0, 0.0, 0.0], [-0.33204025, 0.0, 0.0, 0.0], [0.0345917419, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_132(xs):
    #Predicts Class 2
    function_dict = np.array([[0.100500003, 1.0, 2.0, 1.0], [0.0626000017, 3.0, 4.0, 1.0], [0.227209046, 0.0, 0.0, 0.0], [0.37349999, 5.0, 6.0, 0.0], [-0.335626632, 0.0, 0.0, 0.0], [-0.0967999995, 7.0, 8.0, 1.0], [0.387499988, 9.0, 10.0, 0.0], [0.142410487, 0.0, 0.0, 0.0], [-0.138902009, 0.0, 0.0, 0.0], [-0.330028981, 0.0, 0.0, 0.0], [-0.0112164291, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 4, 2])
    branch_indices = np.array([0, 1, 3, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_133(xs):
    #Predicts Class 3
    function_dict = np.array([[0.186500013, 1.0, 2.0, 6.0], [0.184500009, 3.0, 4.0, 6.0], [-0.96449995, 5.0, 6.0, 4.0], [-0.975499988, 7.0, 8.0, 4.0], [-0.975499988, 9.0, 10.0, 4.0], [0.984500051, 11.0, 12.0, 0.0], [-0.999500036, 13.0, 14.0, 3.0], [-0.977499962, 15.0, 16.0, 4.0], [-0.971500039, 17.0, 18.0, 4.0], [-0.304244608, 0.0, 0.0, 0.0], [0.704632044, 0.0, 0.0, 0.0], [0.292999983, 19.0, 20.0, 6.0], [0.193500012, 21.0, 22.0, 6.0], [0.982499957, 23.0, 24.0, 0.0], [0.191500008, 25.0, 26.0, 6.0], [0.0256088506, 0.0, 0.0, 0.0], [0.288716853, 0.0, 0.0, 0.0], [-0.191528812, 0.0, 0.0, 0.0], [-0.0176839717, 0.0, 0.0, 0.0], [-0.433575034, 0.0, 0.0, 0.0], [0.0381473415, 0.0, 0.0, 0.0], [-0.278916687, 0.0, 0.0, 0.0], [0.0598290227, 0.0, 0.0, 0.0], [0.461590916, 0.0, 0.0, 0.0], [-0.122519687, 0.0, 0.0, 0.0], [0.213833973, 0.0, 0.0, 0.0], [-0.138178736, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_134(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.631500006, 1.0, 2.0, 4.0], [-0.989500046, 3.0, 4.0, 1.0], [-0.188830256, 0.0, 0.0, 0.0], [-0.990499973, 5.0, 6.0, 1.0], [0.992499948, 7.0, 8.0, 0.0], [0.971500039, 9.0, 10.0, 0.0], [-0.92750001, 11.0, 12.0, 4.0], [0.973500013, 13.0, 14.0, 0.0], [-0.30415082, 0.0, 0.0, 0.0], [0.149995774, 0.0, 0.0, 0.0], [-0.0194629766, 0.0, 0.0, 0.0], [-0.348773986, 0.0, 0.0, 0.0], [0.293819666, 0.0, 0.0, 0.0], [-0.0103945946, 0.0, 0.0, 0.0], [0.262808293, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_135(xs):
    #Predicts Class 0
    function_dict = np.array([[0.2685, 1.0, 2.0, 6.0], [0.648500025, 3.0, 4.0, 0.0], [-0.369499981, 5.0, 6.0, 1.0], [0.264499992, 7.0, 8.0, 6.0], [0.149500012, 9.0, 10.0, 6.0], [0.281499982, 11.0, 12.0, 6.0], [0.313499987, 13.0, 14.0, 6.0], [-0.766499996, 15.0, 16.0, 3.0], [-0.720000029, 17.0, 18.0, 2.0], [-0.0482364222, 0.0, 0.0, 0.0], [-0.266244739, 0.0, 0.0, 0.0], [-0.506500006, 19.0, 20.0, 1.0], [0.240500003, 21.0, 22.0, 0.0], [-0.780499995, 23.0, 24.0, 5.0], [-0.743499994, 25.0, 26.0, 5.0], [0.0473825298, 0.0, 0.0, 0.0], [-0.0934166759, 0.0, 0.0, 0.0], [0.060283646, 0.0, 0.0, 0.0], [0.393654674, 0.0, 0.0, 0.0], [-0.0635648817, 0.0, 0.0, 0.0], [0.329200745, 0.0, 0.0, 0.0], [0.100665927, 0.0, 0.0, 0.0], [-0.163978845, 0.0, 0.0, 0.0], [0.0877623707, 0.0, 0.0, 0.0], [-0.325667322, 0.0, 0.0, 0.0], [-0.13535367, 0.0, 0.0, 0.0], [0.12876229, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_136(xs):
    #Predicts Class 1
    function_dict = np.array([[0.549499989, 1.0, 2.0, 0.0], [0.533499956, 3.0, 4.0, 0.0], [0.567499995, 5.0, 6.0, 0.0], [-0.801499963, 7.0, 8.0, 5.0], [-0.738000035, 9.0, 10.0, 2.0], [0.281499982, 11.0, 12.0, 6.0], [0.216499999, 13.0, 14.0, 6.0], [-0.796499968, 15.0, 16.0, 3.0], [-0.742499948, 17.0, 18.0, 5.0], [-0.0748480037, 0.0, 0.0, 0.0], [-0.828999996, 19.0, 20.0, 3.0], [-0.348500013, 21.0, 22.0, 1.0], [0.0897518322, 0.0, 0.0, 0.0], [-0.862499952, 23.0, 24.0, 3.0], [-0.721500039, 25.0, 26.0, 2.0], [-0.233843833, 0.0, 0.0, 0.0], [0.133676663, 0.0, 0.0, 0.0], [0.165852204, 0.0, 0.0, 0.0], [-0.0260586906, 0.0, 0.0, 0.0], [0.340301365, 0.0, 0.0, 0.0], [0.00125923986, 0.0, 0.0, 0.0], [-0.4587982, 0.0, 0.0, 0.0], [-0.15404132, 0.0, 0.0, 0.0], [-0.317105591, 0.0, 0.0, 0.0], [0.117116466, 0.0, 0.0, 0.0], [0.00801175553, 0.0, 0.0, 0.0], [0.39440465, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 21, 22, 12, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_137(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.584499955, 1.0, 2.0, 2.0], [-0.605499983, 3.0, 4.0, 2.0], [0.547999978, 5.0, 6.0, 0.0], [-0.678499997, 7.0, 8.0, 5.0], [-0.157000005, 9.0, 10.0, 1.0], [-0.595000029, 11.0, 12.0, 5.0], [-0.586499989, 13.0, 14.0, 5.0], [-0.707000017, 15.0, 16.0, 2.0], [0.259499997, 17.0, 18.0, 6.0], [-0.0261499994, 19.0, 20.0, 4.0], [-0.921499968, 21.0, 22.0, 3.0], [-0.653499961, 23.0, 24.0, 5.0], [0.528499961, 25.0, 26.0, 0.0], [0.447365403, 0.0, 0.0, 0.0], [-0.123596452, 0.0, 0.0, 0.0], [0.0103455205, 0.0, 0.0, 0.0], [-0.269518256, 0.0, 0.0, 0.0], [0.118356884, 0.0, 0.0, 0.0], [-0.166663572, 0.0, 0.0, 0.0], [-0.498171389, 0.0, 0.0, 0.0], [-0.125064969, 0.0, 0.0, 0.0], [0.309497416, 0.0, 0.0, 0.0], [-0.0597160868, 0.0, 0.0, 0.0], [0.0946471319, 0.0, 0.0, 0.0], [-0.369067192, 0.0, 0.0, 0.0], [0.125055104, 0.0, 0.0, 0.0], [-0.203438938, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_138(xs):
    #Predicts Class 3
    function_dict = np.array([[0.989500046, 1.0, 2.0, 0.0], [0.987499952, 3.0, 4.0, 0.0], [0.198500007, 5.0, 6.0, 6.0], [-0.983500004, 7.0, 8.0, 4.0], [-0.979499996, 9.0, 10.0, 4.0], [-0.949499965, 11.0, 12.0, 4.0], [0.296499997, 13.0, 14.0, 6.0], [0.0451999977, 15.0, 16.0, 6.0], [-0.999500036, 17.0, 18.0, 3.0], [-0.99849999, 19.0, 20.0, 1.0], [-0.975499988, 21.0, 22.0, 4.0], [-0.957499981, 23.0, 24.0, 4.0], [0.403018504, 0.0, 0.0, 0.0], [-0.396754682, 0.0, 0.0, 0.0], [0.994500041, 25.0, 26.0, 0.0], [0.284255654, 0.0, 0.0, 0.0], [-0.221633911, 0.0, 0.0, 0.0], [0.0884159356, 0.0, 0.0, 0.0], [-0.0294128507, 0.0, 0.0, 0.0], [-0.11366719, 0.0, 0.0, 0.0], [0.344316095, 0.0, 0.0, 0.0], [-0.41229254, 0.0, 0.0, 0.0], [0.0547338538, 0.0, 0.0, 0.0], [-0.00338060712, 0.0, 0.0, 0.0], [-0.413271427, 0.0, 0.0, 0.0], [-0.11052157, 0.0, 0.0, 0.0], [0.173334464, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 12, 13, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_139(xs):
    #Predicts Class 4
    function_dict = np.array([[0.989500046, 1.0, 2.0, 0.0], [0.987499952, 3.0, 4.0, 0.0], [0.198500007, 5.0, 6.0, 6.0], [-0.983500004, 7.0, 8.0, 4.0], [-0.979499996, 9.0, 10.0, 4.0], [-0.949499965, 11.0, 12.0, 4.0], [0.296499997, 13.0, 14.0, 6.0], [0.0451999977, 15.0, 16.0, 6.0], [0.222499996, 17.0, 18.0, 6.0], [-0.99849999, 19.0, 20.0, 1.0], [-0.975499988, 21.0, 22.0, 4.0], [-0.957499981, 23.0, 24.0, 4.0], [-0.401533067, 0.0, 0.0, 0.0], [0.397550017, 0.0, 0.0, 0.0], [0.994500041, 25.0, 26.0, 0.0], [-0.282800108, 0.0, 0.0, 0.0], [0.222927734, 0.0, 0.0, 0.0], [-0.00398905016, 0.0, 0.0, 0.0], [-0.174328357, 0.0, 0.0, 0.0], [0.115126878, 0.0, 0.0, 0.0], [-0.341956973, 0.0, 0.0, 0.0], [0.413245469, 0.0, 0.0, 0.0], [-0.0520473607, 0.0, 0.0, 0.0], [0.00604996225, 0.0, 0.0, 0.0], [0.414353043, 0.0, 0.0, 0.0], [0.113667175, 0.0, 0.0, 0.0], [-0.169935659, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 12, 13, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_140(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.979499996, 1.0, 2.0, 3.0], [-0.206760615, 0.0, 0.0, 0.0], [0.215499997, 3.0, 4.0, 6.0], [0.196500003, 5.0, 6.0, 6.0], [0.230500013, 7.0, 8.0, 6.0], [-0.743499994, 9.0, 10.0, 3.0], [-0.557000041, 11.0, 12.0, 2.0], [0.385999978, 13.0, 14.0, 0.0], [-0.666499972, 15.0, 16.0, 5.0], [0.0556347743, 0.0, 0.0, 0.0], [-0.236700132, 0.0, 0.0, 0.0], [0.245485947, 0.0, 0.0, 0.0], [-0.0356117673, 0.0, 0.0, 0.0], [-0.0375709571, 0.0, 0.0, 0.0], [-0.362194151, 0.0, 0.0, 0.0], [0.0407042652, 0.0, 0.0, 0.0], [-0.087087512, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_141(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.842499971, 1.0, 2.0, 2.0], [0.223500013, 3.0, 4.0, 6.0], [-0.404500008, 5.0, 6.0, 4.0], [0.0247315317, 0.0, 0.0, 0.0], [-0.797500014, 7.0, 8.0, 5.0], [-0.413500011, 9.0, 10.0, 4.0], [-0.399500012, 11.0, 12.0, 4.0], [-0.076918222, 0.0, 0.0, 0.0], [-0.256896555, 0.0, 0.0, 0.0], [0.203500003, 13.0, 14.0, 6.0], [0.320306361, 0.0, 0.0, 0.0], [-0.293986797, 0.0, 0.0, 0.0], [0.504500031, 15.0, 16.0, 0.0], [-0.227378234, 0.0, 0.0, 0.0], [0.0882672295, 0.0, 0.0, 0.0], [0.0240392219, 0.0, 0.0, 0.0], [-0.069093667, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 13, 14, 10, 11, 15, 16])
    branch_indices = np.array([0, 1, 4, 2, 5, 9, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_142(xs):
    #Predicts Class 2
    function_dict = np.array([[0.0664999932, 1.0, 2.0, 0.0], [-0.0167999994, 3.0, 4.0, 0.0], [-0.551499963, 5.0, 6.0, 2.0], [0.0616509318, 0.0, 0.0, 0.0], [-0.355515003, 0.0, 0.0, 0.0], [0.265500009, 7.0, 8.0, 6.0], [0.226500005, 9.0, 10.0, 0.0], [-0.227499992, 11.0, 12.0, 4.0], [-0.249071151, 0.0, 0.0, 0.0], [-0.503499985, 13.0, 14.0, 5.0], [0.297500014, 15.0, 16.0, 0.0], [0.0706417784, 0.0, 0.0, 0.0], [-0.0587106869, 0.0, 0.0, 0.0], [0.0703318045, 0.0, 0.0, 0.0], [0.307800502, 0.0, 0.0, 0.0], [-0.2039859, 0.0, 0.0, 0.0], [0.0918395296, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 8, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 2, 5, 7, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_143(xs):
    #Predicts Class 3
    function_dict = np.array([[0.189500004, 1.0, 2.0, 6.0], [-0.995499969, 3.0, 4.0, 1.0], [-0.982499957, 5.0, 6.0, 4.0], [0.178000003, 7.0, 8.0, 6.0], [0.175500005, 9.0, 10.0, 6.0], [-0.987499952, 11.0, 12.0, 4.0], [0.222499996, 13.0, 14.0, 6.0], [-0.975499988, 15.0, 16.0, 4.0], [-0.975499988, 17.0, 18.0, 4.0], [-0.966500044, 19.0, 20.0, 4.0], [-0.953999996, 21.0, 22.0, 4.0], [0.993499994, 23.0, 24.0, 0.0], [-0.996500015, 25.0, 26.0, 1.0], [-0.98150003, 27.0, 28.0, 1.0], [-0.989500046, 29.0, 30.0, 1.0], [0.0354454592, 0.0, 0.0, 0.0], [-0.120175079, 0.0, 0.0, 0.0], [-0.462596893, 0.0, 0.0, 0.0], [0.0368118286, 0.0, 0.0, 0.0], [0.106317282, 0.0, 0.0, 0.0], [-0.0444756523, 0.0, 0.0, 0.0], [0.75184238, 0.0, 0.0, 0.0], [-0.120074049, 0.0, 0.0, 0.0], [-0.256613731, 0.0, 0.0, 0.0], [0.123243414, 0.0, 0.0, 0.0], [0.473254293, 0.0, 0.0, 0.0], [-0.279481769, 0.0, 0.0, 0.0], [-0.481983751, 0.0, 0.0, 0.0], [0.115682974, 0.0, 0.0, 0.0], [0.16592522, 0.0, 0.0, 0.0], [-0.178319752, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_144(xs):
    #Predicts Class 4
    function_dict = np.array([[0.189500004, 1.0, 2.0, 6.0], [-0.995499969, 3.0, 4.0, 1.0], [-0.982499957, 5.0, 6.0, 4.0], [0.178000003, 7.0, 8.0, 6.0], [0.175500005, 9.0, 10.0, 6.0], [-0.987499952, 11.0, 12.0, 4.0], [0.222499996, 13.0, 14.0, 6.0], [-0.975499988, 15.0, 16.0, 4.0], [-0.975499988, 17.0, 18.0, 4.0], [-0.966500044, 19.0, 20.0, 4.0], [-0.953999996, 21.0, 22.0, 4.0], [0.993499994, 23.0, 24.0, 0.0], [-0.996500015, 25.0, 26.0, 1.0], [-0.98150003, 27.0, 28.0, 1.0], [-0.989500046, 29.0, 30.0, 1.0], [-0.0333369039, 0.0, 0.0, 0.0], [0.122366697, 0.0, 0.0, 0.0], [0.46315363, 0.0, 0.0, 0.0], [-0.035555996, 0.0, 0.0, 0.0], [-0.104144134, 0.0, 0.0, 0.0], [0.0469554141, 0.0, 0.0, 0.0], [-0.750378132, 0.0, 0.0, 0.0], [0.102760419, 0.0, 0.0, 0.0], [0.258271217, 0.0, 0.0, 0.0], [-0.120232813, 0.0, 0.0, 0.0], [-0.469761729, 0.0, 0.0, 0.0], [0.280347586, 0.0, 0.0, 0.0], [0.482246578, 0.0, 0.0, 0.0], [-0.129598573, 0.0, 0.0, 0.0], [-0.162568733, 0.0, 0.0, 0.0], [0.16023092, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_145(xs):
    #Predicts Class 0
    function_dict = np.array([[0.473500013, 1.0, 2.0, 0.0], [-0.811499953, 3.0, 4.0, 2.0], [-0.949499965, 5.0, 6.0, 3.0], [0.402500004, 7.0, 8.0, 0.0], [-0.786499977, 9.0, 10.0, 2.0], [-0.833999991, 11.0, 12.0, 2.0], [-0.930500031, 13.0, 14.0, 3.0], [0.279291093, 0.0, 0.0, 0.0], [-0.025371572, 0.0, 0.0, 0.0], [0.239999995, 15.0, 16.0, 6.0], [0.2685, 17.0, 18.0, 6.0], [-0.0208291337, 0.0, 0.0, 0.0], [0.620499969, 19.0, 20.0, 0.0], [-0.377999991, 21.0, 22.0, 1.0], [-0.470499992, 23.0, 24.0, 4.0], [-0.360672742, 0.0, 0.0, 0.0], [0.0751308054, 0.0, 0.0, 0.0], [0.0771750212, 0.0, 0.0, 0.0], [-0.0818915591, 0.0, 0.0, 0.0], [-0.293479025, 0.0, 0.0, 0.0], [0.00368239777, 0.0, 0.0, 0.0], [0.333440393, 0.0, 0.0, 0.0], [-0.121699408, 0.0, 0.0, 0.0], [0.172784686, 0.0, 0.0, 0.0], [-0.131662384, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 15, 16, 17, 18, 11, 19, 20, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_146(xs):
    #Predicts Class 1
    function_dict = np.array([[0.471499979, 1.0, 2.0, 0.0], [-0.86650002, 3.0, 4.0, 3.0], [0.484499991, 5.0, 6.0, 0.0], [0.291500002, 7.0, 8.0, 0.0], [0.229499996, 9.0, 10.0, 6.0], [-0.881000042, 11.0, 12.0, 3.0], [-0.438499987, 13.0, 14.0, 1.0], [-0.794499993, 15.0, 16.0, 2.0], [0.333000004, 17.0, 18.0, 0.0], [-0.340201497, 0.0, 0.0, 0.0], [0.00729500037, 19.0, 20.0, 0.0], [0.0147384824, 0.0, 0.0, 0.0], [0.439870983, 0.0, 0.0, 0.0], [-0.834499955, 21.0, 22.0, 2.0], [-0.408500016, 23.0, 24.0, 1.0], [-0.181262061, 0.0, 0.0, 0.0], [0.203334361, 0.0, 0.0, 0.0], [-0.330447644, 0.0, 0.0, 0.0], [0.0192042235, 0.0, 0.0, 0.0], [-0.272291631, 0.0, 0.0, 0.0], [-0.0130028939, 0.0, 0.0, 0.0], [-0.0837275237, 0.0, 0.0, 0.0], [0.226819798, 0.0, 0.0, 0.0], [-0.273525655, 0.0, 0.0, 0.0], [-0.00108737708, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 11, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_147(xs):
    #Predicts Class 2
    function_dict = np.array([[0.164499998, 1.0, 2.0, 4.0], [0.0693500042, 3.0, 4.0, 6.0], [0.205587432, 0.0, 0.0, 0.0], [-0.23566021, 0.0, 0.0, 0.0], [0.168500006, 5.0, 6.0, 6.0], [-0.370000005, 7.0, 8.0, 4.0], [-0.455500007, 9.0, 10.0, 1.0], [-0.0552174337, 0.0, 0.0, 0.0], [0.30094555, 0.0, 0.0, 0.0], [-0.196718752, 0.0, 0.0, 0.0], [-0.00943695847, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 2])
    branch_indices = np.array([0, 1, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_148(xs):
    #Predicts Class 3
    function_dict = np.array([[0.19749999, 1.0, 2.0, 6.0], [-0.921499968, 3.0, 4.0, 4.0], [-0.96449995, 5.0, 6.0, 4.0], [-0.996500015, 7.0, 8.0, 5.0], [-0.91050005, 9.0, 10.0, 4.0], [-0.993499994, 11.0, 12.0, 4.0], [-0.989500046, 13.0, 14.0, 1.0], [0.0458500013, 15.0, 16.0, 6.0], [0.972499967, 17.0, 18.0, 0.0], [0.124499999, 19.0, 20.0, 6.0], [-0.895500004, 21.0, 22.0, 4.0], [0.168770283, 0.0, 0.0, 0.0], [0.242500007, 23.0, 24.0, 6.0], [0.245499998, 25.0, 26.0, 6.0], [0.299499989, 27.0, 28.0, 6.0], [-0.0895361006, 0.0, 0.0, 0.0], [0.0126849748, 0.0, 0.0, 0.0], [-0.396633029, 0.0, 0.0, 0.0], [-0.0130589735, 0.0, 0.0, 0.0], [0.357850075, 0.0, 0.0, 0.0], [0.0598376915, 0.0, 0.0, 0.0], [-0.125126362, 0.0, 0.0, 0.0], [0.090931505, 0.0, 0.0, 0.0], [-0.331509382, 0.0, 0.0, 0.0], [-0.110691935, 0.0, 0.0, 0.0], [0.285376519, 0.0, 0.0, 0.0], [-0.0714834854, 0.0, 0.0, 0.0], [-0.23894763, 0.0, 0.0, 0.0], [0.16384843, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 11, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_149(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.921499968, 1.0, 2.0, 4.0], [0.245499998, 3.0, 4.0, 6.0], [0.0847000033, 5.0, 6.0, 6.0], [0.242500007, 7.0, 8.0, 6.0], [0.360500008, 9.0, 10.0, 6.0], [0.035149999, 11.0, 12.0, 6.0], [0.0974999964, 13.0, 14.0, 6.0], [-0.925500035, 15.0, 16.0, 4.0], [-0.383211225, 0.0, 0.0, 0.0], [-0.999500036, 17.0, 18.0, 5.0], [-0.093386896, 0.0, 0.0, 0.0], [-0.835999966, 19.0, 20.0, 4.0], [-0.353117973, 0.0, 0.0, 0.0], [0.202856153, 0.0, 0.0, 0.0], [-0.902500033, 21.0, 22.0, 4.0], [0.0157240462, 0.0, 0.0, 0.0], [0.299754471, 0.0, 0.0, 0.0], [0.300977886, 0.0, 0.0, 0.0], [0.080787383, 0.0, 0.0, 0.0], [0.101984434, 0.0, 0.0, 0.0], [-0.0829112455, 0.0, 0.0, 0.0], [-0.188002229, 0.0, 0.0, 0.0], [0.00322059332, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 10, 19, 20, 12, 13, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 2, 5, 11, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_150(xs):
    #Predicts Class 0
    function_dict = np.array([[0.619500041, 1.0, 2.0, 0.0], [-0.324499995, 3.0, 4.0, 4.0], [0.25849998, 5.0, 6.0, 6.0], [-0.773000002, 7.0, 8.0, 3.0], [-0.763499975, 9.0, 10.0, 5.0], [0.16049999, 11.0, 12.0, 6.0], [-0.448000014, 13.0, 14.0, 1.0], [-0.897500038, 15.0, 16.0, 3.0], [-0.399500012, 17.0, 18.0, 4.0], [0.564499974, 19.0, 20.0, 0.0], [-0.519000053, 21.0, 22.0, 1.0], [-0.0534266084, 0.0, 0.0, 0.0], [-0.276225507, 0.0, 0.0, 0.0], [-0.0248192511, 0.0, 0.0, 0.0], [0.0937651992, 0.0, 0.0, 0.0], [0.0418455936, 0.0, 0.0, 0.0], [0.202044845, 0.0, 0.0, 0.0], [0.0420023985, 0.0, 0.0, 0.0], [-0.279827565, 0.0, 0.0, 0.0], [-0.324238747, 0.0, 0.0, 0.0], [0.0924869925, 0.0, 0.0, 0.0], [-0.18834056, 0.0, 0.0, 0.0], [0.0226502493, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_151(xs):
    #Predicts Class 1
    function_dict = np.array([[0.638499975, 1.0, 2.0, 0.0], [0.63499999, 3.0, 4.0, 0.0], [0.25849998, 5.0, 6.0, 6.0], [-0.541499972, 7.0, 8.0, 1.0], [-0.291792154, 0.0, 0.0, 0.0], [0.154500008, 9.0, 10.0, 6.0], [-0.095448941, 0.0, 0.0, 0.0], [0.386500001, 11.0, 12.0, 0.0], [-0.53550005, 13.0, 14.0, 1.0], [-0.069922708, 0.0, 0.0, 0.0], [0.298500001, 0.0, 0.0, 0.0], [-0.277877867, 0.0, 0.0, 0.0], [0.0599368475, 0.0, 0.0, 0.0], [0.245579407, 0.0, 0.0, 0.0], [-0.00335587841, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 9, 10, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_152(xs):
    #Predicts Class 2
    function_dict = np.array([[0.638499975, 1.0, 2.0, 0.0], [0.0664999932, 3.0, 4.0, 0.0], [0.174499989, 5.0, 6.0, 6.0], [-0.453999996, 7.0, 8.0, 5.0], [-0.560000002, 9.0, 10.0, 5.0], [-0.0456312448, 0.0, 0.0, 0.0], [-0.231040552, 0.0, 0.0, 0.0], [-0.255980849, 0.0, 0.0, 0.0], [0.0856824219, 0.0, 0.0, 0.0], [0.257499993, 11.0, 12.0, 6.0], [-0.541499972, 13.0, 14.0, 5.0], [0.0157542117, 0.0, 0.0, 0.0], [-0.275431842, 0.0, 0.0, 0.0], [0.269379556, 0.0, 0.0, 0.0], [0.0272573996, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 11, 12, 13, 14, 5, 6])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_153(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [-0.99849999, 3.0, 4.0, 1.0], [-0.968500018, 5.0, 6.0, 4.0], [0.00394319743, 0.0, 0.0, 0.0], [0.279981971, 0.0, 0.0, 0.0], [-0.994500041, 7.0, 8.0, 1.0], [0.98150003, 9.0, 10.0, 0.0], [-0.00229999982, 11.0, 12.0, 6.0], [0.1175, 13.0, 14.0, 6.0], [-0.99849999, 15.0, 16.0, 5.0], [-0.99849999, 17.0, 18.0, 5.0], [-0.330876976, 0.0, 0.0, 0.0], [0.00655856775, 0.0, 0.0, 0.0], [0.126855895, 0.0, 0.0, 0.0], [-0.326400399, 0.0, 0.0, 0.0], [-0.167434156, 0.0, 0.0, 0.0], [0.0360247567, 0.0, 0.0, 0.0], [0.312421352, 0.0, 0.0, 0.0], [0.0201660041, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 13, 14, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 2, 5, 7, 8, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_154(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [-0.99849999, 3.0, 4.0, 1.0], [-0.968500018, 5.0, 6.0, 4.0], [-0.00160291651, 0.0, 0.0, 0.0], [-0.278702378, 0.0, 0.0, 0.0], [-0.994500041, 7.0, 8.0, 1.0], [0.98150003, 9.0, 10.0, 0.0], [-0.00229999982, 11.0, 12.0, 6.0], [0.1175, 13.0, 14.0, 6.0], [-0.99849999, 15.0, 16.0, 5.0], [-0.99849999, 17.0, 18.0, 5.0], [0.338233083, 0.0, 0.0, 0.0], [-0.00475084083, 0.0, 0.0, 0.0], [-0.124735184, 0.0, 0.0, 0.0], [0.328001738, 0.0, 0.0, 0.0], [0.169377208, 0.0, 0.0, 0.0], [-0.0400160812, 0.0, 0.0, 0.0], [-0.310612082, 0.0, 0.0, 0.0], [-0.018004002, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 13, 14, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 2, 5, 7, 8, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_155(xs):
    #Predicts Class 0
    function_dict = np.array([[0.0939500034, 1.0, 2.0, 0.0], [-0.0826999992, 3.0, 4.0, 4.0], [0.109499998, 5.0, 6.0, 0.0], [-0.913499951, 7.0, 8.0, 3.0], [-0.799999952, 9.0, 10.0, 3.0], [-0.267234534, 0.0, 0.0, 0.0], [0.135500014, 11.0, 12.0, 0.0], [-0.00294967997, 0.0, 0.0, 0.0], [-0.62349999, 13.0, 14.0, 5.0], [-0.177190259, 0.0, 0.0, 0.0], [0.0319271944, 0.0, 0.0, 0.0], [0.263776004, 0.0, 0.0, 0.0], [-0.342500001, 15.0, 16.0, 1.0], [0.311628073, 0.0, 0.0, 0.0], [0.0291987415, 0.0, 0.0, 0.0], [0.0192488469, 0.0, 0.0, 0.0], [-0.0681427494, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 9, 10, 5, 11, 15, 16])
    branch_indices = np.array([0, 1, 3, 8, 4, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_156(xs):
    #Predicts Class 1
    function_dict = np.array([[0.0140000004, 1.0, 2.0, 6.0], [0.211497322, 0.0, 0.0, 0.0], [-0.975499988, 3.0, 4.0, 3.0], [-0.190930679, 0.0, 0.0, 0.0], [0.351500005, 5.0, 6.0, 6.0], [-0.705500007, 7.0, 8.0, 3.0], [0.201718926, 0.0, 0.0, 0.0], [0.0087875938, 0.0, 0.0, 0.0], [-0.073899515, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 6])
    branch_indices = np.array([0, 2, 4, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_157(xs):
    #Predicts Class 2
    function_dict = np.array([[0.105499998, 1.0, 2.0, 6.0], [-0.20519872, 0.0, 0.0, 0.0], [0.144499987, 3.0, 4.0, 6.0], [0.236828446, 0.0, 0.0, 0.0], [-0.786499977, 5.0, 6.0, 5.0], [-0.17775096, 0.0, 0.0, 0.0], [-0.73300004, 7.0, 8.0, 2.0], [0.131753236, 0.0, 0.0, 0.0], [-0.0139737166, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 5, 7, 8])
    branch_indices = np.array([0, 2, 4, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_158(xs):
    #Predicts Class 3
    function_dict = np.array([[0.0210999995, 1.0, 2.0, 6.0], [-0.999500036, 3.0, 4.0, 3.0], [0.0458000004, 5.0, 6.0, 6.0], [-0.035149999, 7.0, 8.0, 6.0], [0.968999982, 9.0, 10.0, 0.0], [-0.99849999, 11.0, 12.0, 1.0], [0.0581500009, 13.0, 14.0, 6.0], [-0.0357000008, 15.0, 16.0, 6.0], [0.332847834, 0.0, 0.0, 0.0], [-0.132806674, 0.0, 0.0, 0.0], [0.0532948747, 0.0, 0.0, 0.0], [0.292872369, 0.0, 0.0, 0.0], [0.987499952, 17.0, 18.0, 0.0], [0.325451881, 0.0, 0.0, 0.0], [0.0838000029, 19.0, 20.0, 6.0], [0.208129585, 0.0, 0.0, 0.0], [-0.179113835, 0.0, 0.0, 0.0], [0.0454314947, 0.0, 0.0, 0.0], [-0.368921399, 0.0, 0.0, 0.0], [-0.113735683, 0.0, 0.0, 0.0], [0.00772479223, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 10, 11, 17, 18, 13, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 5, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_159(xs):
    #Predicts Class 4
    function_dict = np.array([[0.0210999995, 1.0, 2.0, 6.0], [-0.999500036, 3.0, 4.0, 3.0], [0.0458000004, 5.0, 6.0, 6.0], [-0.035149999, 7.0, 8.0, 6.0], [0.968999982, 9.0, 10.0, 0.0], [-0.99849999, 11.0, 12.0, 1.0], [0.0581500009, 13.0, 14.0, 6.0], [-0.0357000008, 15.0, 16.0, 6.0], [-0.331529051, 0.0, 0.0, 0.0], [0.13691771, 0.0, 0.0, 0.0], [-0.0520305634, 0.0, 0.0, 0.0], [-0.291422993, 0.0, 0.0, 0.0], [0.987499952, 17.0, 18.0, 0.0], [-0.328848392, 0.0, 0.0, 0.0], [0.0838000029, 19.0, 20.0, 6.0], [-0.203567907, 0.0, 0.0, 0.0], [0.182165429, 0.0, 0.0, 0.0], [-0.0477243438, 0.0, 0.0, 0.0], [0.371336102, 0.0, 0.0, 0.0], [0.115013465, 0.0, 0.0, 0.0], [-0.00712509174, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 10, 11, 17, 18, 13, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 5, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_160(xs):
    #Predicts Class 0
    function_dict = np.array([[0.2685, 1.0, 2.0, 6.0], [0.327499986, 3.0, 4.0, 0.0], [0.325500011, 5.0, 6.0, 6.0], [-0.605499983, 7.0, 8.0, 5.0], [-0.113499999, 9.0, 10.0, 1.0], [-0.691499949, 11.0, 12.0, 5.0], [-0.693500042, 13.0, 14.0, 2.0], [0.292500019, 15.0, 16.0, 0.0], [-0.0610499978, 17.0, 18.0, 1.0], [-0.597499967, 19.0, 20.0, 2.0], [-0.270489097, 0.0, 0.0, 0.0], [-0.744500041, 21.0, 22.0, 5.0], [0.0932500064, 23.0, 24.0, 0.0], [-0.449000001, 25.0, 26.0, 1.0], [-0.145784333, 0.0, 0.0, 0.0], [0.104173228, 0.0, 0.0, 0.0], [0.354970753, 0.0, 0.0, 0.0], [-0.176136076, 0.0, 0.0, 0.0], [0.149958909, 0.0, 0.0, 0.0], [-0.0203432608, 0.0, 0.0, 0.0], [0.2871418, 0.0, 0.0, 0.0], [-0.102339678, 0.0, 0.0, 0.0], [0.111003913, 0.0, 0.0, 0.0], [0.077372402, 0.0, 0.0, 0.0], [-0.348756135, 0.0, 0.0, 0.0], [-0.0766170025, 0.0, 0.0, 0.0], [0.212339565, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 21, 22, 23, 24, 25, 26, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_161(xs):
    #Predicts Class 1
    function_dict = np.array([[0.290499985, 1.0, 2.0, 6.0], [-0.412500024, 3.0, 4.0, 3.0], [0.328500003, 5.0, 6.0, 6.0], [-0.767500043, 7.0, 8.0, 3.0], [0.210871369, 0.0, 0.0, 0.0], [0.275999993, 9.0, 10.0, 0.0], [-0.693500042, 11.0, 12.0, 2.0], [-0.784500003, 13.0, 14.0, 3.0], [-0.299000025, 15.0, 16.0, 4.0], [-0.254500002, 17.0, 18.0, 4.0], [0.300618023, 0.0, 0.0, 0.0], [-0.719500005, 19.0, 20.0, 5.0], [0.146268949, 0.0, 0.0, 0.0], [-0.00858110934, 0.0, 0.0, 0.0], [0.197825655, 0.0, 0.0, 0.0], [0.149293974, 0.0, 0.0, 0.0], [-0.158023104, 0.0, 0.0, 0.0], [-0.215181619, 0.0, 0.0, 0.0], [0.107982658, 0.0, 0.0, 0.0], [0.0153822517, 0.0, 0.0, 0.0], [-0.265978932, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 10, 19, 20, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_162(xs):
    #Predicts Class 2
    function_dict = np.array([[0.219500005, 1.0, 2.0, 6.0], [-0.929499984, 3.0, 4.0, 3.0], [0.227499992, 5.0, 6.0, 6.0], [-0.491999984, 7.0, 8.0, 2.0], [0.196500003, 9.0, 10.0, 6.0], [0.51700002, 11.0, 12.0, 0.0], [-0.0238500014, 13.0, 14.0, 4.0], [-0.277608603, 0.0, 0.0, 0.0], [0.0742461085, 0.0, 0.0, 0.0], [-0.708999991, 15.0, 16.0, 2.0], [-0.178499997, 17.0, 18.0, 1.0], [-0.532500029, 19.0, 20.0, 2.0], [-0.142162442, 0.0, 0.0, 0.0], [-0.689499974, 21.0, 22.0, 2.0], [-0.772500038, 23.0, 24.0, 3.0], [-0.147185817, 0.0, 0.0, 0.0], [0.184684634, 0.0, 0.0, 0.0], [0.0879906416, 0.0, 0.0, 0.0], [-0.229854554, 0.0, 0.0, 0.0], [0.343040019, 0.0, 0.0, 0.0], [0.0556121469, 0.0, 0.0, 0.0], [0.0773547366, 0.0, 0.0, 0.0], [-0.182290748, 0.0, 0.0, 0.0], [0.180165678, 0.0, 0.0, 0.0], [-0.0981999189, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 15, 16, 17, 18, 19, 20, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_163(xs):
    #Predicts Class 3
    function_dict = np.array([[0.151499987, 1.0, 2.0, 6.0], [0.1505, 3.0, 4.0, 6.0], [0.164499998, 5.0, 6.0, 6.0], [0.994500041, 7.0, 8.0, 0.0], [0.396282077, 0.0, 0.0, 0.0], [0.992499948, 9.0, 10.0, 0.0], [-0.999500036, 11.0, 12.0, 3.0], [0.993499994, 13.0, 14.0, 0.0], [0.0982000008, 15.0, 16.0, 6.0], [0.961500049, 17.0, 18.0, 0.0], [-0.982499957, 19.0, 20.0, 4.0], [0.297500014, 21.0, 22.0, 6.0], [0.968500018, 23.0, 24.0, 0.0], [0.0298218057, 0.0, 0.0, 0.0], [0.221699327, 0.0, 0.0, 0.0], [0.2107227, 0.0, 0.0, 0.0], [-0.288651228, 0.0, 0.0, 0.0], [0.130389467, 0.0, 0.0, 0.0], [-0.453431398, 0.0, 0.0, 0.0], [-0.305985898, 0.0, 0.0, 0.0], [0.523966253, 0.0, 0.0, 0.0], [0.0364997201, 0.0, 0.0, 0.0], [-0.232672364, 0.0, 0.0, 0.0], [-0.0200574473, 0.0, 0.0, 0.0], [-0.270444214, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 19, 20, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_164(xs):
    #Predicts Class 4
    function_dict = np.array([[0.151499987, 1.0, 2.0, 6.0], [0.1505, 3.0, 4.0, 6.0], [0.164499998, 5.0, 6.0, 6.0], [0.994500041, 7.0, 8.0, 0.0], [-0.395824373, 0.0, 0.0, 0.0], [0.992499948, 9.0, 10.0, 0.0], [-0.999500036, 11.0, 12.0, 3.0], [0.993499994, 13.0, 14.0, 0.0], [0.0982000008, 15.0, 16.0, 6.0], [0.961500049, 17.0, 18.0, 0.0], [-0.982499957, 19.0, 20.0, 4.0], [0.297500014, 21.0, 22.0, 6.0], [0.968500018, 23.0, 24.0, 0.0], [-0.0283306055, 0.0, 0.0, 0.0], [-0.219928131, 0.0, 0.0, 0.0], [-0.208620891, 0.0, 0.0, 0.0], [0.290816307, 0.0, 0.0, 0.0], [-0.123219125, 0.0, 0.0, 0.0], [0.453671187, 0.0, 0.0, 0.0], [0.306412816, 0.0, 0.0, 0.0], [-0.522006214, 0.0, 0.0, 0.0], [-0.0346200876, 0.0, 0.0, 0.0], [0.234769613, 0.0, 0.0, 0.0], [-0.00519664446, 0.0, 0.0, 0.0], [0.272702336, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 19, 20, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_165(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.277500004, 1.0, 2.0, 1.0], [-0.299499989, 3.0, 4.0, 1.0], [-0.899500012, 5.0, 6.0, 3.0], [-0.743499994, 7.0, 8.0, 3.0], [-0.722499967, 9.0, 10.0, 5.0], [-0.273798436, 0.0, 0.0, 0.0], [0.2245, 11.0, 12.0, 6.0], [-0.789499998, 13.0, 14.0, 3.0], [0.351999998, 15.0, 16.0, 0.0], [0.359271258, 0.0, 0.0, 0.0], [0.0352465026, 0.0, 0.0, 0.0], [-0.470499992, 17.0, 18.0, 2.0], [0.155499995, 19.0, 20.0, 0.0], [-0.001117095, 0.0, 0.0, 0.0], [0.229229659, 0.0, 0.0, 0.0], [0.00548357796, 0.0, 0.0, 0.0], [-0.252707213, 0.0, 0.0, 0.0], [0.22078611, 0.0, 0.0, 0.0], [-0.119002119, 0.0, 0.0, 0.0], [0.132271722, 0.0, 0.0, 0.0], [-0.136802211, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_166(xs):
    #Predicts Class 1
    function_dict = np.array([[0.3495, 1.0, 2.0, 6.0], [0.0193499997, 3.0, 4.0, 6.0], [0.187252551, 0.0, 0.0, 0.0], [0.18119368, 0.0, 0.0, 0.0], [0.173500001, 5.0, 6.0, 6.0], [-0.789000034, 7.0, 8.0, 2.0], [-0.971500039, 9.0, 10.0, 3.0], [-0.00923988223, 0.0, 0.0, 0.0], [-0.231217131, 0.0, 0.0, 0.0], [-0.142256945, 0.0, 0.0, 0.0], [0.00406697905, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 2])
    branch_indices = np.array([0, 1, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_167(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.526499987, 1.0, 2.0, 2.0], [0.394500017, 3.0, 4.0, 0.0], [0.392499983, 5.0, 6.0, 0.0], [-0.233500004, 7.0, 8.0, 4.0], [-0.511500001, 9.0, 10.0, 5.0], [0.00407500006, 11.0, 12.0, 4.0], [-0.892500043, 13.0, 14.0, 3.0], [-0.734500051, 15.0, 16.0, 2.0], [0.208999991, 17.0, 18.0, 0.0], [-0.0252, 19.0, 20.0, 4.0], [-0.341520667, 0.0, 0.0, 0.0], [-0.0361000001, 21.0, 22.0, 4.0], [-0.4815, 23.0, 24.0, 2.0], [-0.595999956, 25.0, 26.0, 5.0], [-0.028450001, 27.0, 28.0, 1.0], [0.0670645609, 0.0, 0.0, 0.0], [-0.254120111, 0.0, 0.0, 0.0], [-0.0474571101, 0.0, 0.0, 0.0], [0.239680573, 0.0, 0.0, 0.0], [-0.0702520162, 0.0, 0.0, 0.0], [0.229878351, 0.0, 0.0, 0.0], [0.0550164767, 0.0, 0.0, 0.0], [-0.309976518, 0.0, 0.0, 0.0], [-0.00753374863, 0.0, 0.0, 0.0], [0.222950056, 0.0, 0.0, 0.0], [0.0155662764, 0.0, 0.0, 0.0], [0.358677894, 0.0, 0.0, 0.0], [-0.195201412, 0.0, 0.0, 0.0], [0.302144438, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_168(xs):
    #Predicts Class 3
    function_dict = np.array([[0.996500015, 1.0, 2.0, 0.0], [0.995499969, 3.0, 4.0, 0.0], [-0.989500046, 5.0, 6.0, 4.0], [0.289499998, 7.0, 8.0, 6.0], [-0.987499952, 9.0, 10.0, 4.0], [0.108500004, 11.0, 12.0, 6.0], [0.327656955, 0.0, 0.0, 0.0], [0.245499998, 13.0, 14.0, 6.0], [-0.996500015, 15.0, 16.0, 1.0], [-0.99150002, 17.0, 18.0, 4.0], [-0.406001002, 0.0, 0.0, 0.0], [-0.046796754, 0.0, 0.0, 0.0], [0.0195676982, 0.0, 0.0, 0.0], [-0.000528433302, 0.0, 0.0, 0.0], [-0.326696068, 0.0, 0.0, 0.0], [-0.0857353061, 0.0, 0.0, 0.0], [0.197639987, 0.0, 0.0, 0.0], [-0.0704117715, 0.0, 0.0, 0.0], [0.275270015, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_169(xs):
    #Predicts Class 4
    function_dict = np.array([[0.996500015, 1.0, 2.0, 0.0], [0.995499969, 3.0, 4.0, 0.0], [-0.989500046, 5.0, 6.0, 4.0], [0.289499998, 7.0, 8.0, 6.0], [-0.987499952, 9.0, 10.0, 4.0], [0.108500004, 11.0, 12.0, 6.0], [-0.327030629, 0.0, 0.0, 0.0], [0.247500002, 13.0, 14.0, 6.0], [-0.996500015, 15.0, 16.0, 1.0], [-0.99150002, 17.0, 18.0, 4.0], [0.406731308, 0.0, 0.0, 0.0], [0.0493156761, 0.0, 0.0, 0.0], [-0.0180604178, 0.0, 0.0, 0.0], [0.00139140268, 0.0, 0.0, 0.0], [0.29316929, 0.0, 0.0, 0.0], [0.0874115825, 0.0, 0.0, 0.0], [-0.195880175, 0.0, 0.0, 0.0], [0.0719689131, 0.0, 0.0, 0.0], [-0.274627745, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_170(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.619500041, 1.0, 2.0, 2.0], [-0.699499965, 3.0, 4.0, 2.0], [-0.710500002, 5.0, 6.0, 5.0], [-0.702499986, 7.0, 8.0, 5.0], [-0.232500002, 9.0, 10.0, 4.0], [0.173328593, 0.0, 0.0, 0.0], [-0.151999995, 11.0, 12.0, 1.0], [-0.245499998, 13.0, 14.0, 4.0], [-0.620499969, 15.0, 16.0, 5.0], [-0.294499993, 17.0, 18.0, 1.0], [-0.1875, 19.0, 20.0, 4.0], [-0.299370378, 0.0, 0.0, 0.0], [-0.822000027, 21.0, 22.0, 3.0], [-0.0039776871, 0.0, 0.0, 0.0], [-0.29741174, 0.0, 0.0, 0.0], [0.145194486, 0.0, 0.0, 0.0], [-0.129671931, 0.0, 0.0, 0.0], [0.359553218, 0.0, 0.0, 0.0], [-0.0608556122, 0.0, 0.0, 0.0], [-0.259258419, 0.0, 0.0, 0.0], [0.131566957, 0.0, 0.0, 0.0], [-0.230567828, 0.0, 0.0, 0.0], [0.100147106, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 11, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_171(xs):
    #Predicts Class 1
    function_dict = np.array([[0.543500006, 1.0, 2.0, 0.0], [0.531499982, 3.0, 4.0, 0.0], [0.28549999, 5.0, 6.0, 6.0], [-0.470499992, 7.0, 8.0, 1.0], [-0.924499989, 9.0, 10.0, 3.0], [0.604499996, 11.0, 12.0, 0.0], [0.205957532, 0.0, 0.0, 0.0], [-0.919499993, 13.0, 14.0, 3.0], [-0.744500041, 15.0, 16.0, 2.0], [0.279641658, 0.0, 0.0, 0.0], [0.0847494155, 0.0, 0.0, 0.0], [-0.733500004, 17.0, 18.0, 2.0], [-0.688500047, 19.0, 20.0, 5.0], [-0.360439956, 0.0, 0.0, 0.0], [0.0506443679, 0.0, 0.0, 0.0], [0.141049325, 0.0, 0.0, 0.0], [-0.0147356959, 0.0, 0.0, 0.0], [-0.312441826, 0.0, 0.0, 0.0], [-0.0321741588, 0.0, 0.0, 0.0], [0.0875884891, 0.0, 0.0, 0.0], [-0.141710818, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 17, 18, 19, 20, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_172(xs):
    #Predicts Class 2
    function_dict = np.array([[0.542500019, 1.0, 2.0, 0.0], [0.37349999, 3.0, 4.0, 0.0], [-0.386500001, 5.0, 6.0, 1.0], [-0.13350001, 7.0, 8.0, 4.0], [-0.534999967, 9.0, 10.0, 2.0], [0.237500012, 11.0, 12.0, 6.0], [-0.586499989, 13.0, 14.0, 5.0], [0.249500006, 15.0, 16.0, 0.0], [-0.704999983, 17.0, 18.0, 2.0], [0.236499995, 19.0, 20.0, 6.0], [-0.425999999, 21.0, 22.0, 2.0], [-0.800500035, 23.0, 24.0, 5.0], [0.0570385419, 0.0, 0.0, 0.0], [-0.895500004, 25.0, 26.0, 3.0], [-0.0810202211, 0.0, 0.0, 0.0], [0.0169879552, 0.0, 0.0, 0.0], [-0.207017586, 0.0, 0.0, 0.0], [-0.252051711, 0.0, 0.0, 0.0], [0.162385821, 0.0, 0.0, 0.0], [-0.0385376997, 0.0, 0.0, 0.0], [-0.204140559, 0.0, 0.0, 0.0], [0.176287174, 0.0, 0.0, 0.0], [-0.211811498, 0.0, 0.0, 0.0], [0.0431559421, 0.0, 0.0, 0.0], [-0.239461035, 0.0, 0.0, 0.0], [0.2647385, 0.0, 0.0, 0.0], [0.0225913562, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 12, 25, 26, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_173(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.996500015, 1.0, 2.0, 3.0], [0.194499999, 3.0, 4.0, 6.0], [0.944499969, 5.0, 6.0, 0.0], [0.193500012, 7.0, 8.0, 6.0], [0.229499996, 9.0, 10.0, 6.0], [0.114500001, 11.0, 12.0, 6.0], [-0.97300005, 13.0, 14.0, 1.0], [0.980499983, 15.0, 16.0, 0.0], [0.313483596, 0.0, 0.0, 0.0], [-0.99150002, 17.0, 18.0, 4.0], [0.245499998, 19.0, 20.0, 6.0], [0.0682500005, 21.0, 22.0, 6.0], [-0.121402986, 0.0, 0.0, 0.0], [-0.299606949, 0.0, 0.0, 0.0], [-0.0637186244, 0.0, 0.0, 0.0], [0.0655900538, 0.0, 0.0, 0.0], [-0.0125398245, 0.0, 0.0, 0.0], [0.148567975, 0.0, 0.0, 0.0], [-0.20220001, 0.0, 0.0, 0.0], [0.130650774, 0.0, 0.0, 0.0], [-0.0783504099, 0.0, 0.0, 0.0], [-0.085585475, 0.0, 0.0, 0.0], [0.176605493, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_174(xs):
    #Predicts Class 4
    function_dict = np.array([[0.194499999, 1.0, 2.0, 6.0], [0.193500012, 3.0, 4.0, 6.0], [0.229499996, 5.0, 6.0, 6.0], [0.980499983, 7.0, 8.0, 0.0], [-0.266364157, 0.0, 0.0, 0.0], [-0.99150002, 9.0, 10.0, 4.0], [0.245499998, 11.0, 12.0, 6.0], [-0.963500023, 13.0, 14.0, 4.0], [0.98150003, 15.0, 16.0, 0.0], [-0.147279948, 0.0, 0.0, 0.0], [0.963500023, 17.0, 18.0, 0.0], [0.242500007, 19.0, 20.0, 6.0], [0.284500003, 21.0, 22.0, 6.0], [-0.240673453, 0.0, 0.0, 0.0], [0.0383167453, 0.0, 0.0, 0.0], [0.277154326, 0.0, 0.0, 0.0], [0.00530029833, 0.0, 0.0, 0.0], [-0.0581778549, 0.0, 0.0, 0.0], [0.258166969, 0.0, 0.0, 0.0], [0.0169645939, 0.0, 0.0, 0.0], [-0.24315387, 0.0, 0.0, 0.0], [0.207611755, 0.0, 0.0, 0.0], [-0.0049105431, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 9, 17, 18, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_175(xs):
    #Predicts Class 0
    function_dict = np.array([[0.215499997, 1.0, 2.0, 6.0], [0.188499987, 3.0, 4.0, 6.0], [0.230500013, 5.0, 6.0, 6.0], [-0.38499999, 7.0, 8.0, 1.0], [-0.326499999, 9.0, 10.0, 1.0], [-0.469999999, 11.0, 12.0, 1.0], [-0.666499972, 13.0, 14.0, 5.0], [-0.416999996, 15.0, 16.0, 4.0], [-0.675500035, 17.0, 18.0, 2.0], [0.58950001, 19.0, 20.0, 0.0], [0.31400001, 21.0, 22.0, 0.0], [-0.00432962971, 0.0, 0.0, 0.0], [-0.256027907, 0.0, 0.0, 0.0], [0.328999996, 23.0, 24.0, 0.0], [-0.155000001, 25.0, 26.0, 4.0], [0.0903252512, 0.0, 0.0, 0.0], [-0.250214964, 0.0, 0.0, 0.0], [0.225966781, 0.0, 0.0, 0.0], [-0.0400576964, 0.0, 0.0, 0.0], [0.27594915, 0.0, 0.0, 0.0], [0.0709083527, 0.0, 0.0, 0.0], [0.196755081, 0.0, 0.0, 0.0], [-0.17296958, 0.0, 0.0, 0.0], [0.11968945, 0.0, 0.0, 0.0], [-0.0187949073, 0.0, 0.0, 0.0], [-0.270701677, 0.0, 0.0, 0.0], [0.0765945464, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 11, 12, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_176(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.833500028, 1.0, 2.0, 2.0], [-0.934499979, 3.0, 4.0, 3.0], [0.348500013, 5.0, 6.0, 6.0], [-0.223175064, 0.0, 0.0, 0.0], [-0.541000009, 7.0, 8.0, 1.0], [-0.932500005, 9.0, 10.0, 3.0], [0.16659756, 0.0, 0.0, 0.0], [-0.613499999, 11.0, 12.0, 1.0], [-0.164340943, 0.0, 0.0, 0.0], [-0.391499996, 13.0, 14.0, 4.0], [0.229499996, 15.0, 16.0, 6.0], [-0.0317154266, 0.0, 0.0, 0.0], [0.144905075, 0.0, 0.0, 0.0], [0.223547399, 0.0, 0.0, 0.0], [0.00178184127, 0.0, 0.0, 0.0], [-0.0961818174, 0.0, 0.0, 0.0], [0.0186394677, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 11, 12, 8, 13, 14, 15, 16, 6])
    branch_indices = np.array([0, 1, 4, 7, 2, 5, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_177(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.29549998, 1.0, 2.0, 2.0], [0.0678500012, 3.0, 4.0, 0.0], [0.172092959, 0.0, 0.0, 0.0], [-0.0167999994, 5.0, 6.0, 0.0], [-0.801499963, 7.0, 8.0, 3.0], [-0.000922347186, 0.0, 0.0, 0.0], [-0.259770721, 0.0, 0.0, 0.0], [-0.841500044, 9.0, 10.0, 3.0], [0.247000009, 11.0, 12.0, 6.0], [0.00604151003, 0.0, 0.0, 0.0], [-0.204671308, 0.0, 0.0, 0.0], [0.141646892, 0.0, 0.0, 0.0], [-0.106506452, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 6, 9, 10, 11, 12, 2])
    branch_indices = np.array([0, 1, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_178(xs):
    #Predicts Class 3
    function_dict = np.array([[0.932500005, 1.0, 2.0, 0.0], [0.895500004, 3.0, 4.0, 0.0], [0.940500021, 5.0, 6.0, 0.0], [-0.995499969, 7.0, 8.0, 3.0], [-0.77700001, 9.0, 10.0, 4.0], [0.205940038, 0.0, 0.0, 0.0], [0.958500028, 11.0, 12.0, 0.0], [0.141824335, 0.0, 0.0, 0.0], [-0.0897312015, 0.0, 0.0, 0.0], [0.0916499943, 13.0, 14.0, 6.0], [0.0558694713, 0.0, 0.0, 0.0], [0.097450003, 15.0, 16.0, 6.0], [-0.909500003, 17.0, 18.0, 4.0], [-0.00160205236, 0.0, 0.0, 0.0], [-0.378414661, 0.0, 0.0, 0.0], [0.164190829, 0.0, 0.0, 0.0], [-0.220292389, 0.0, 0.0, 0.0], [0.00246076146, 0.0, 0.0, 0.0], [0.166657999, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 13, 14, 10, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 4, 9, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_179(xs):
    #Predicts Class 4
    function_dict = np.array([[0.965499997, 1.0, 2.0, 0.0], [-0.993499994, 3.0, 4.0, 1.0], [0.967499971, 5.0, 6.0, 0.0], [0.96449995, 7.0, 8.0, 0.0], [-0.997500002, 9.0, 10.0, 3.0], [0.966500044, 11.0, 12.0, 0.0], [-0.992499948, 13.0, 14.0, 1.0], [0.118500002, 15.0, 16.0, 6.0], [0.562199175, 0.0, 0.0, 0.0], [0.0903500021, 17.0, 18.0, 6.0], [-0.631500006, 19.0, 20.0, 4.0], [-0.00757784024, 0.0, 0.0, 0.0], [-0.305132419, 0.0, 0.0, 0.0], [0.971500039, 21.0, 22.0, 0.0], [0.973500013, 23.0, 24.0, 0.0], [-0.268051445, 0.0, 0.0, 0.0], [0.246129215, 0.0, 0.0, 0.0], [-0.345375508, 0.0, 0.0, 0.0], [0.00114996731, 0.0, 0.0, 0.0], [0.177596882, 0.0, 0.0, 0.0], [-0.151791915, 0.0, 0.0, 0.0], [0.456565976, 0.0, 0.0, 0.0], [-0.0309522394, 0.0, 0.0, 0.0], [-0.194950476, 0.0, 0.0, 0.0], [0.159873053, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 11, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_180(xs):
    #Predicts Class 0
    function_dict = np.array([[0.676999986, 1.0, 2.0, 0.0], [-0.463, 3.0, 4.0, 4.0], [-0.133739948, 0.0, 0.0, 0.0], [-0.840499997, 5.0, 6.0, 5.0], [-0.842499971, 7.0, 8.0, 5.0], [0.236959368, 0.0, 0.0, 0.0], [-0.0351892039, 0.0, 0.0, 0.0], [-0.200268343, 0.0, 0.0, 0.0], [-0.811499953, 9.0, 10.0, 2.0], [0.11217086, 0.0, 0.0, 0.0], [-6.24760942e-05, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 6, 7, 9, 10, 2])
    branch_indices = np.array([0, 1, 3, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_181(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.325500011, 1.0, 2.0, 4.0], [-0.787, 3.0, 4.0, 3.0], [-0.769500017, 5.0, 6.0, 5.0], [-0.917500019, 7.0, 8.0, 3.0], [-0.388000011, 9.0, 10.0, 4.0], [0.502499998, 11.0, 12.0, 0.0], [-0.755499959, 13.0, 14.0, 2.0], [-0.92050004, 15.0, 16.0, 3.0], [-0.738499999, 17.0, 18.0, 2.0], [0.0282336976, 0.0, 0.0, 0.0], [0.213969603, 0.0, 0.0, 0.0], [0.30120635, 0.0, 0.0, 0.0], [0.0902357101, 0.0, 0.0, 0.0], [0.30250001, 19.0, 20.0, 6.0], [-0.756500006, 21.0, 22.0, 5.0], [-0.0503972843, 0.0, 0.0, 0.0], [0.296376437, 0.0, 0.0, 0.0], [-0.0296065155, 0.0, 0.0, 0.0], [-0.332605243, 0.0, 0.0, 0.0], [-0.184616193, 0.0, 0.0, 0.0], [0.222648472, 0.0, 0.0, 0.0], [-0.223277211, 0.0, 0.0, 0.0], [0.0312862061, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 11, 12, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_182(xs):
    #Predicts Class 2
    function_dict = np.array([[0.164499998, 1.0, 2.0, 4.0], [0.220499992, 3.0, 4.0, 6.0], [0.164587855, 0.0, 0.0, 0.0], [-0.928499997, 5.0, 6.0, 3.0], [0.227499992, 7.0, 8.0, 6.0], [-0.225499988, 9.0, 10.0, 1.0], [-0.631000042, 11.0, 12.0, 5.0], [0.51700002, 13.0, 14.0, 0.0], [0.453999996, 15.0, 16.0, 0.0], [-0.28539753, 0.0, 0.0, 0.0], [0.000407630228, 0.0, 0.0, 0.0], [0.0660259277, 0.0, 0.0, 0.0], [-0.104522258, 0.0, 0.0, 0.0], [0.197520897, 0.0, 0.0, 0.0], [-0.0681295395, 0.0, 0.0, 0.0], [-0.0720212013, 0.0, 0.0, 0.0], [0.0288750399, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_183(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.921000004, 1.0, 2.0, 1.0], [-0.858999968, 3.0, 4.0, 4.0], [-0.993499994, 5.0, 6.0, 3.0], [0.932500005, 7.0, 8.0, 0.0], [-0.997500002, 9.0, 10.0, 3.0], [-0.209752679, 0.0, 0.0, 0.0], [0.0100432793, 0.0, 0.0, 0.0], [0.902999997, 11.0, 12.0, 0.0], [-0.995499969, 13.0, 14.0, 1.0], [0.281868607, 0.0, 0.0, 0.0], [-0.953999996, 15.0, 16.0, 1.0], [0.0213786364, 0.0, 0.0, 0.0], [-0.26644361, 0.0, 0.0, 0.0], [-0.0197507627, 0.0, 0.0, 0.0], [0.0409302637, 0.0, 0.0, 0.0], [0.1318679, 0.0, 0.0, 0.0], [-0.0510079712, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 9, 15, 16, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_184(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 1.0], [0.0419500023, 3.0, 4.0, 6.0], [-0.00850000046, 5.0, 6.0, 6.0], [0.021949999, 7.0, 8.0, 6.0], [0.0997000039, 9.0, 10.0, 6.0], [-0.281161547, 0.0, 0.0, 0.0], [0.0402499996, 11.0, 12.0, 6.0], [-0.0358499996, 13.0, 14.0, 6.0], [0.0402499996, 15.0, 16.0, 6.0], [-0.98150003, 17.0, 18.0, 4.0], [0.155499995, 19.0, 20.0, 6.0], [-0.993499994, 21.0, 22.0, 1.0], [-0.992499948, 23.0, 24.0, 1.0], [-0.0328125432, 0.0, 0.0, 0.0], [0.24059549, 0.0, 0.0, 0.0], [-0.395409763, 0.0, 0.0, 0.0], [-0.0337267183, 0.0, 0.0, 0.0], [0.240778282, 0.0, 0.0, 0.0], [-0.15215756, 0.0, 0.0, 0.0], [-0.0896762833, 0.0, 0.0, 0.0], [0.0724989399, 0.0, 0.0, 0.0], [0.359452605, 0.0, 0.0, 0.0], [-0.0120048122, 0.0, 0.0, 0.0], [-0.131877556, 0.0, 0.0, 0.0], [0.017883962, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_185(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.0614, 1.0, 2.0, 0.0], [0.155657381, 0.0, 0.0, 0.0], [-0.0379000008, 3.0, 4.0, 4.0], [-0.659500003, 5.0, 6.0, 5.0], [-0.443000019, 7.0, 8.0, 5.0], [-0.666499972, 9.0, 10.0, 5.0], [0.385500014, 11.0, 12.0, 0.0], [-0.229641736, 0.0, 0.0, 0.0], [0.0387946926, 0.0, 0.0, 0.0], [-0.00337640708, 0.0, 0.0, 0.0], [-0.246207133, 0.0, 0.0, 0.0], [-0.0418773741, 0.0, 0.0, 0.0], [0.215030819, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 7, 8])
    branch_indices = np.array([0, 2, 3, 5, 6, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_186(xs):
    #Predicts Class 1
    function_dict = np.array([[0.471499979, 1.0, 2.0, 0.0], [-0.85650003, 3.0, 4.0, 3.0], [-0.862499952, 5.0, 6.0, 3.0], [0.291500002, 7.0, 8.0, 0.0], [-0.819499969, 9.0, 10.0, 3.0], [0.237500012, 11.0, 12.0, 6.0], [-0.796499968, 13.0, 14.0, 3.0], [0.252499998, 15.0, 16.0, 0.0], [-0.433499992, 17.0, 18.0, 1.0], [-0.843500018, 19.0, 20.0, 3.0], [-0.80400002, 21.0, 22.0, 3.0], [-0.434000015, 23.0, 24.0, 4.0], [-0.559499979, 25.0, 26.0, 5.0], [0.256159812, 0.0, 0.0, 0.0], [-0.674999952, 27.0, 28.0, 5.0], [0.0268973727, 0.0, 0.0, 0.0], [0.277117223, 0.0, 0.0, 0.0], [-0.224159792, 0.0, 0.0, 0.0], [0.0125440108, 0.0, 0.0, 0.0], [-0.0221073721, 0.0, 0.0, 0.0], [-0.284777552, 0.0, 0.0, 0.0], [0.173419118, 0.0, 0.0, 0.0], [-0.0811522901, 0.0, 0.0, 0.0], [-0.138828963, 0.0, 0.0, 0.0], [0.122774377, 0.0, 0.0, 0.0], [-0.0272480883, 0.0, 0.0, 0.0], [-0.294244796, 0.0, 0.0, 0.0], [0.155462682, 0.0, 0.0, 0.0], [-0.137054875, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 13, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_187(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.678499997, 1.0, 2.0, 5.0], [-0.237000003, 3.0, 4.0, 1.0], [-0.653499961, 5.0, 6.0, 5.0], [-0.733500004, 7.0, 8.0, 2.0], [-0.253499985, 9.0, 10.0, 4.0], [0.421000004, 11.0, 12.0, 0.0], [-0.64349997, 13.0, 14.0, 5.0], [-0.729499996, 15.0, 16.0, 5.0], [-0.953999996, 17.0, 18.0, 3.0], [-0.0650460646, 0.0, 0.0, 0.0], [0.189745337, 0.0, 0.0, 0.0], [0.0182949118, 0.0, 0.0, 0.0], [0.272523522, 0.0, 0.0, 0.0], [-0.231083751, 0.0, 0.0, 0.0], [0.42049998, 19.0, 20.0, 0.0], [-0.105139278, 0.0, 0.0, 0.0], [0.126642555, 0.0, 0.0, 0.0], [0.0319339894, 0.0, 0.0, 0.0], [-0.300767541, 0.0, 0.0, 0.0], [0.0670271069, 0.0, 0.0, 0.0], [-0.0473547429, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 11, 12, 13, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_188(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.982499957, 1.0, 2.0, 4.0], [0.99150002, 3.0, 4.0, 0.0], [-0.980499983, 5.0, 6.0, 4.0], [0.199499995, 7.0, 8.0, 6.0], [0.993499994, 9.0, 10.0, 0.0], [0.99150002, 11.0, 12.0, 0.0], [0.132499993, 13.0, 14.0, 6.0], [-0.985499978, 15.0, 16.0, 4.0], [-0.986500025, 17.0, 18.0, 4.0], [-0.995499969, 19.0, 20.0, 4.0], [-0.990499973, 21.0, 22.0, 4.0], [-0.995499969, 23.0, 24.0, 1.0], [0.993499994, 25.0, 26.0, 0.0], [0.130499989, 27.0, 28.0, 6.0], [0.157499999, 29.0, 30.0, 6.0], [0.0411219448, 0.0, 0.0, 0.0], [0.322475612, 0.0, 0.0, 0.0], [-0.0301209968, 0.0, 0.0, 0.0], [-0.315201551, 0.0, 0.0, 0.0], [0.160309508, 0.0, 0.0, 0.0], [-0.263852179, 0.0, 0.0, 0.0], [0.12637192, 0.0, 0.0, 0.0], [-0.0841645971, 0.0, 0.0, 0.0], [-0.519500077, 0.0, 0.0, 0.0], [0.193325594, 0.0, 0.0, 0.0], [0.168773279, 0.0, 0.0, 0.0], [-0.0614671372, 0.0, 0.0, 0.0], [0.0167930163, 0.0, 0.0, 0.0], [0.42169854, 0.0, 0.0, 0.0], [-0.187290266, 0.0, 0.0, 0.0], [0.00212819711, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_189(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.982499957, 1.0, 2.0, 4.0], [0.99150002, 3.0, 4.0, 0.0], [-0.980499983, 5.0, 6.0, 4.0], [0.199499995, 7.0, 8.0, 6.0], [0.993499994, 9.0, 10.0, 0.0], [0.99150002, 11.0, 12.0, 0.0], [0.132499993, 13.0, 14.0, 6.0], [-0.985499978, 15.0, 16.0, 4.0], [-0.986500025, 17.0, 18.0, 4.0], [-0.995499969, 19.0, 20.0, 4.0], [-0.990499973, 21.0, 22.0, 4.0], [-0.995499969, 23.0, 24.0, 1.0], [0.993499994, 25.0, 26.0, 0.0], [0.129500002, 27.0, 28.0, 6.0], [0.157499999, 29.0, 30.0, 6.0], [-0.0398622602, 0.0, 0.0, 0.0], [-0.321723759, 0.0, 0.0, 0.0], [0.0314607993, 0.0, 0.0, 0.0], [0.315678328, 0.0, 0.0, 0.0], [-0.15947713, 0.0, 0.0, 0.0], [0.265518069, 0.0, 0.0, 0.0], [-0.124559507, 0.0, 0.0, 0.0], [0.086097531, 0.0, 0.0, 0.0], [0.520328879, 0.0, 0.0, 0.0], [-0.192358956, 0.0, 0.0, 0.0], [-0.168058276, 0.0, 0.0, 0.0], [0.0629238859, 0.0, 0.0, 0.0], [-0.0157237872, 0.0, 0.0, 0.0], [-0.420274496, 0.0, 0.0, 0.0], [0.190301776, 0.0, 0.0, 0.0], [-0.00758495042, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_190(xs):
    #Predicts Class 0
    function_dict = np.array([[0.345499992, 1.0, 2.0, 0.0], [0.259499997, 3.0, 4.0, 6.0], [0.255500019, 5.0, 6.0, 6.0], [-0.528499961, 7.0, 8.0, 5.0], [-0.786499977, 9.0, 10.0, 5.0], [-0.29549998, 11.0, 12.0, 4.0], [-0.52700001, 13.0, 14.0, 1.0], [-0.522500038, 15.0, 16.0, 1.0], [-0.0814768672, 0.0, 0.0, 0.0], [0.264742225, 0.0, 0.0, 0.0], [0.135500014, 17.0, 18.0, 0.0], [-0.415499985, 19.0, 20.0, 1.0], [-0.831499994, 21.0, 22.0, 3.0], [-0.196998566, 0.0, 0.0, 0.0], [-0.876999974, 23.0, 24.0, 3.0], [-0.0373310037, 0.0, 0.0, 0.0], [0.215975925, 0.0, 0.0, 0.0], [0.0052667195, 0.0, 0.0, 0.0], [-0.19538857, 0.0, 0.0, 0.0], [0.0559558459, 0.0, 0.0, 0.0], [-0.0995221287, 0.0, 0.0, 0.0], [-0.22820285, 0.0, 0.0, 0.0], [-0.00680146413, 0.0, 0.0, 0.0], [0.151737303, 0.0, 0.0, 0.0], [-0.0550450683, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 17, 18, 19, 20, 21, 22, 13, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 4, 10, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_191(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.971500039, 1.0, 2.0, 3.0], [0.495000005, 3.0, 4.0, 0.0], [0.207500011, 5.0, 6.0, 6.0], [-0.181465536, 0.0, 0.0, 0.0], [0.00862593111, 0.0, 0.0, 0.0], [-0.901499987, 7.0, 8.0, 3.0], [-0.449000001, 9.0, 10.0, 5.0], [-0.532500029, 11.0, 12.0, 2.0], [0.638499975, 13.0, 14.0, 0.0], [-0.497500002, 15.0, 16.0, 5.0], [0.307999998, 17.0, 18.0, 0.0], [0.117341369, 0.0, 0.0, 0.0], [-0.052116923, 0.0, 0.0, 0.0], [-0.25878796, 0.0, 0.0, 0.0], [0.0999751389, 0.0, 0.0, 0.0], [0.0137630645, 0.0, 0.0, 0.0], [0.162262946, 0.0, 0.0, 0.0], [-0.198408455, 0.0, 0.0, 0.0], [0.0636036023, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 13, 14, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 2, 5, 7, 8, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_192(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.426999986, 1.0, 2.0, 5.0], [0.290499985, 3.0, 4.0, 6.0], [0.372500002, 5.0, 6.0, 0.0], [-0.237500012, 7.0, 8.0, 1.0], [-0.245871305, 0.0, 0.0, 0.0], [0.310000002, 9.0, 10.0, 6.0], [0.472499996, 11.0, 12.0, 0.0], [-0.293500006, 13.0, 14.0, 1.0], [-0.191500008, 15.0, 16.0, 1.0], [0.294203669, 0.0, 0.0, 0.0], [0.0141621176, 0.0, 0.0, 0.0], [-0.212669477, 0.0, 0.0, 0.0], [0.101661816, 0.0, 0.0, 0.0], [0.00726388907, 0.0, 0.0, 0.0], [-0.222918376, 0.0, 0.0, 0.0], [0.215041086, 0.0, 0.0, 0.0], [-0.00652219635, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_193(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.992499948, 1.0, 2.0, 4.0], [0.109499998, 3.0, 4.0, 6.0], [0.987499952, 5.0, 6.0, 0.0], [0.101500005, 7.0, 8.0, 6.0], [0.145500004, 9.0, 10.0, 6.0], [-0.997500002, 11.0, 12.0, 1.0], [0.0805500001, 13.0, 14.0, 6.0], [0.990499973, 15.0, 16.0, 0.0], [-0.422200054, 0.0, 0.0, 0.0], [-0.99849999, 17.0, 18.0, 1.0], [-0.99849999, 19.0, 20.0, 1.0], [-0.965499997, 21.0, 22.0, 4.0], [-0.956499994, 23.0, 24.0, 4.0], [0.0702500045, 25.0, 26.0, 6.0], [0.0997000039, 27.0, 28.0, 6.0], [-0.360951811, 0.0, 0.0, 0.0], [0.244104028, 0.0, 0.0, 0.0], [0.285702199, 0.0, 0.0, 0.0], [0.0314518288, 0.0, 0.0, 0.0], [-0.260980159, 0.0, 0.0, 0.0], [0.0463677533, 0.0, 0.0, 0.0], [-0.209376857, 0.0, 0.0, 0.0], [0.0713283569, 0.0, 0.0, 0.0], [0.0599766411, 0.0, 0.0, 0.0], [-0.0542478971, 0.0, 0.0, 0.0], [0.0564367585, 0.0, 0.0, 0.0], [0.540374637, 0.0, 0.0, 0.0], [-0.260475159, 0.0, 0.0, 0.0], [0.0575528517, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_194(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.992499948, 1.0, 2.0, 4.0], [0.109499998, 3.0, 4.0, 6.0], [0.987499952, 5.0, 6.0, 0.0], [0.101500005, 7.0, 8.0, 6.0], [0.145500004, 9.0, 10.0, 6.0], [-0.997500002, 11.0, 12.0, 1.0], [0.0805500001, 13.0, 14.0, 6.0], [0.990499973, 15.0, 16.0, 0.0], [0.423710853, 0.0, 0.0, 0.0], [-0.99849999, 17.0, 18.0, 1.0], [-0.99849999, 19.0, 20.0, 1.0], [-0.965499997, 21.0, 22.0, 4.0], [-0.956499994, 23.0, 24.0, 4.0], [0.0702500045, 25.0, 26.0, 6.0], [0.0997000039, 27.0, 28.0, 6.0], [0.362276345, 0.0, 0.0, 0.0], [-0.242633939, 0.0, 0.0, 0.0], [-0.285119146, 0.0, 0.0, 0.0], [-0.0308404956, 0.0, 0.0, 0.0], [0.261809051, 0.0, 0.0, 0.0], [-0.0448387042, 0.0, 0.0, 0.0], [0.210476339, 0.0, 0.0, 0.0], [-0.0705994666, 0.0, 0.0, 0.0], [-0.058542531, 0.0, 0.0, 0.0], [0.0503955409, 0.0, 0.0, 0.0], [-0.0540375747, 0.0, 0.0, 0.0], [-0.540111542, 0.0, 0.0, 0.0], [0.261158437, 0.0, 0.0, 0.0], [-0.0561687239, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_195(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.952499986, 1.0, 2.0, 3.0], [0.544499993, 3.0, 4.0, 0.0], [-0.537500024, 5.0, 6.0, 1.0], [-0.31400001, 7.0, 8.0, 1.0], [0.620499969, 9.0, 10.0, 0.0], [0.32950002, 11.0, 12.0, 0.0], [-0.523499966, 13.0, 14.0, 1.0], [-0.739500046, 15.0, 16.0, 2.0], [-0.18656297, 0.0, 0.0, 0.0], [-0.222239241, 0.0, 0.0, 0.0], [-0.062792711, 0.0, 0.0, 0.0], [0.0475239083, 0.0, 0.0, 0.0], [-0.843000054, 17.0, 18.0, 2.0], [0.258935452, 0.0, 0.0, 0.0], [0.2245, 19.0, 20.0, 6.0], [0.194747552, 0.0, 0.0, 0.0], [-0.00893894024, 0.0, 0.0, 0.0], [-0.0168532468, 0.0, 0.0, 0.0], [-0.224527732, 0.0, 0.0, 0.0], [0.0848862678, 0.0, 0.0, 0.0], [-0.0159413014, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 10, 11, 17, 18, 13, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 5, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_196(xs):
    #Predicts Class 1
    function_dict = np.array([[0.0217499994, 1.0, 2.0, 6.0], [0.156923696, 0.0, 0.0, 0.0], [0.201499999, 3.0, 4.0, 6.0], [-0.924499989, 5.0, 6.0, 3.0], [-0.573500037, 7.0, 8.0, 3.0], [-0.27700001, 9.0, 10.0, 1.0], [0.638499975, 11.0, 12.0, 0.0], [-0.705500007, 13.0, 14.0, 3.0], [-0.57949996, 15.0, 16.0, 2.0], [-0.0976261124, 0.0, 0.0, 0.0], [0.152691081, 0.0, 0.0, 0.0], [-0.306441426, 0.0, 0.0, 0.0], [0.0500870235, 0.0, 0.0, 0.0], [0.00808321219, 0.0, 0.0, 0.0], [-0.132778987, 0.0, 0.0, 0.0], [0.17995283, 0.0, 0.0, 0.0], [0.0255231541, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_197(xs):
    #Predicts Class 2
    function_dict = np.array([[0.0678500012, 1.0, 2.0, 0.0], [-0.141218066, 0.0, 0.0, 0.0], [-0.526499987, 3.0, 4.0, 2.0], [-0.0771500021, 5.0, 6.0, 1.0], [-0.50849998, 7.0, 8.0, 2.0], [0.394500017, 9.0, 10.0, 0.0], [-0.22201173, 0.0, 0.0, 0.0], [-0.0712500066, 11.0, 12.0, 1.0], [-0.419499993, 13.0, 14.0, 5.0], [0.101786688, 0.0, 0.0, 0.0], [-0.0304001812, 0.0, 0.0, 0.0], [0.253213257, 0.0, 0.0, 0.0], [0.0657106712, 0.0, 0.0, 0.0], [-0.0124128023, 0.0, 0.0, 0.0], [0.200618893, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 6, 11, 12, 13, 14])
    branch_indices = np.array([0, 2, 3, 5, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_198(xs):
    #Predicts Class 3
    function_dict = np.array([[0.116499998, 1.0, 2.0, 6.0], [0.102499999, 3.0, 4.0, 6.0], [0.9745, 5.0, 6.0, 0.0], [0.971500039, 7.0, 8.0, 0.0], [-0.990499973, 9.0, 10.0, 4.0], [-0.99150002, 11.0, 12.0, 1.0], [-0.993499994, 13.0, 14.0, 1.0], [0.952000022, 15.0, 16.0, 0.0], [0.980499983, 17.0, 18.0, 0.0], [-0.99849999, 19.0, 20.0, 1.0], [0.977499962, 21.0, 22.0, 0.0], [-0.976500034, 23.0, 24.0, 4.0], [-0.999500036, 25.0, 26.0, 2.0], [-0.99849999, 27.0, 28.0, 5.0], [-0.959499955, 29.0, 30.0, 4.0], [0.0705772042, 0.0, 0.0, 0.0], [-0.248895705, 0.0, 0.0, 0.0], [0.318375975, 0.0, 0.0, 0.0], [0.00128313783, 0.0, 0.0, 0.0], [0.0764843151, 0.0, 0.0, 0.0], [-0.240977541, 0.0, 0.0, 0.0], [0.00905966479, 0.0, 0.0, 0.0], [0.480882138, 0.0, 0.0, 0.0], [0.192631572, 0.0, 0.0, 0.0], [-0.186188966, 0.0, 0.0, 0.0], [0.221119538, 0.0, 0.0, 0.0], [5.82347129e-05, 0.0, 0.0, 0.0], [0.00460825162, 0.0, 0.0, 0.0], [-0.396892101, 0.0, 0.0, 0.0], [-0.455285579, 0.0, 0.0, 0.0], [0.0394841172, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_199(xs):
    #Predicts Class 4
    function_dict = np.array([[0.116499998, 1.0, 2.0, 6.0], [0.102499999, 3.0, 4.0, 6.0], [0.9745, 5.0, 6.0, 0.0], [0.971500039, 7.0, 8.0, 0.0], [-0.990499973, 9.0, 10.0, 4.0], [-0.99150002, 11.0, 12.0, 1.0], [-0.993499994, 13.0, 14.0, 1.0], [0.952000022, 15.0, 16.0, 0.0], [0.980499983, 17.0, 18.0, 0.0], [-0.99849999, 19.0, 20.0, 1.0], [0.977499962, 21.0, 22.0, 0.0], [-0.976500034, 23.0, 24.0, 4.0], [-0.999500036, 25.0, 26.0, 3.0], [-0.99849999, 27.0, 28.0, 5.0], [-0.959499955, 29.0, 30.0, 4.0], [-0.0754810274, 0.0, 0.0, 0.0], [0.250386417, 0.0, 0.0, 0.0], [-0.317447454, 0.0, 0.0, 0.0], [0.000438690768, 0.0, 0.0, 0.0], [-0.0755332187, 0.0, 0.0, 0.0], [0.242925063, 0.0, 0.0, 0.0], [-0.00607226277, 0.0, 0.0, 0.0], [-0.480455518, 0.0, 0.0, 0.0], [-0.191427961, 0.0, 0.0, 0.0], [0.187306285, 0.0, 0.0, 0.0], [-0.310803175, 0.0, 0.0, 0.0], [-0.0833936557, 0.0, 0.0, 0.0], [-0.00315545336, 0.0, 0.0, 0.0], [0.397466272, 0.0, 0.0, 0.0], [0.456119478, 0.0, 0.0, 0.0], [-0.0379167572, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_200(xs):
    #Predicts Class 0
    function_dict = np.array([[0.168500006, 1.0, 2.0, 6.0], [-0.413500011, 3.0, 4.0, 4.0], [-0.118500002, 5.0, 6.0, 4.0], [0.0485596284, 0.0, 0.0, 0.0], [0.0728999972, 7.0, 8.0, 6.0], [0.327499986, 9.0, 10.0, 0.0], [-0.585500002, 11.0, 12.0, 2.0], [-0.0332554728, 0.0, 0.0, 0.0], [-0.21499303, 0.0, 0.0, 0.0], [-0.858500004, 13.0, 14.0, 3.0], [-0.858500004, 15.0, 16.0, 3.0], [-0.236000001, 17.0, 18.0, 1.0], [-0.0610499978, 19.0, 20.0, 1.0], [-0.0338160358, 0.0, 0.0, 0.0], [0.157449394, 0.0, 0.0, 0.0], [0.0321854949, 0.0, 0.0, 0.0], [-0.0916081145, 0.0, 0.0, 0.0], [-0.121818453, 0.0, 0.0, 0.0], [0.239509419, 0.0, 0.0, 0.0], [-0.254176289, 0.0, 0.0, 0.0], [-0.00826931838, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 4, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_201(xs):
    #Predicts Class 1
    function_dict = np.array([[0.0451999977, 1.0, 2.0, 6.0], [0.113243081, 0.0, 0.0, 0.0], [0.173500001, 3.0, 4.0, 6.0], [-0.176681116, 0.0, 0.0, 0.0], [-0.794499993, 5.0, 6.0, 5.0], [0.3565, 7.0, 8.0, 0.0], [-0.798500001, 9.0, 10.0, 2.0], [-0.186093241, 0.0, 0.0, 0.0], [0.10629946, 0.0, 0.0, 0.0], [-0.125870451, 0.0, 0.0, 0.0], [-0.00371369952, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_202(xs):
    #Predicts Class 2
    function_dict = np.array([[0.32249999, 1.0, 2.0, 6.0], [-0.455500007, 3.0, 4.0, 1.0], [-0.150373742, 0.0, 0.0, 0.0], [-0.896499991, 5.0, 6.0, 3.0], [-0.445500016, 7.0, 8.0, 1.0], [-0.233064964, 0.0, 0.0, 0.0], [0.0367149599, 0.0, 0.0, 0.0], [0.188550651, 0.0, 0.0, 0.0], [-0.94749999, 9.0, 10.0, 3.0], [0.0986328945, 0.0, 0.0, 0.0], [-0.000951946189, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 6, 7, 9, 10, 2])
    branch_indices = np.array([0, 1, 3, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_203(xs):
    #Predicts Class 3
    function_dict = np.array([[0.155499995, 1.0, 2.0, 6.0], [0.0838000029, 3.0, 4.0, 6.0], [-0.999500036, 5.0, 6.0, 5.0], [-0.993499994, 7.0, 8.0, 1.0], [0.0911500007, 9.0, 10.0, 6.0], [0.17050001, 11.0, 12.0, 6.0], [-0.973500013, 13.0, 14.0, 4.0], [0.0632499978, 15.0, 16.0, 6.0], [-0.985499978, 17.0, 18.0, 1.0], [-0.927999973, 19.0, 20.0, 4.0], [0.0957500041, 21.0, 22.0, 6.0], [-0.989500046, 23.0, 24.0, 4.0], [0.178000003, 25.0, 26.0, 6.0], [-0.997500002, 27.0, 28.0, 1.0], [-0.968500018, 29.0, 30.0, 4.0], [0.0110789258, 0.0, 0.0, 0.0], [-0.229780599, 0.0, 0.0, 0.0], [0.225823522, 0.0, 0.0, 0.0], [-0.0849348679, 0.0, 0.0, 0.0], [0.390918612, 0.0, 0.0, 0.0], [-0.196018964, 0.0, 0.0, 0.0], [-0.164393574, 0.0, 0.0, 0.0], [0.0559932999, 0.0, 0.0, 0.0], [-0.0371762365, 0.0, 0.0, 0.0], [-0.398510009, 0.0, 0.0, 0.0], [0.302487969, 0.0, 0.0, 0.0], [-0.0788212344, 0.0, 0.0, 0.0], [0.293786138, 0.0, 0.0, 0.0], [0.0598630272, 0.0, 0.0, 0.0], [-0.255970567, 0.0, 0.0, 0.0], [0.0381167904, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_204(xs):
    #Predicts Class 4
    function_dict = np.array([[0.155499995, 1.0, 2.0, 6.0], [0.0838000029, 3.0, 4.0, 6.0], [-0.999500036, 5.0, 6.0, 5.0], [-0.993499994, 7.0, 8.0, 1.0], [0.0921999961, 9.0, 10.0, 6.0], [0.17050001, 11.0, 12.0, 6.0], [0.17050001, 13.0, 14.0, 6.0], [0.0632499978, 15.0, 16.0, 6.0], [-0.985499978, 17.0, 18.0, 1.0], [-0.927999973, 19.0, 20.0, 4.0], [0.0957500041, 21.0, 22.0, 6.0], [-0.989500046, 23.0, 24.0, 4.0], [0.178000003, 25.0, 26.0, 6.0], [0.988999963, 27.0, 28.0, 0.0], [0.988499999, 29.0, 30.0, 0.0], [-0.00819684938, 0.0, 0.0, 0.0], [0.23060663, 0.0, 0.0, 0.0], [-0.224179685, 0.0, 0.0, 0.0], [0.0829454139, 0.0, 0.0, 0.0], [-0.39051646, 0.0, 0.0, 0.0], [0.19646728, 0.0, 0.0, 0.0], [0.165277332, 0.0, 0.0, 0.0], [-0.0541042872, 0.0, 0.0, 0.0], [0.0379210822, 0.0, 0.0, 0.0], [0.398770213, 0.0, 0.0, 0.0], [-0.301907688, 0.0, 0.0, 0.0], [0.080260396, 0.0, 0.0, 0.0], [0.0491059944, 0.0, 0.0, 0.0], [-0.377386123, 0.0, 0.0, 0.0], [-0.0374767855, 0.0, 0.0, 0.0], [0.268680543, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_205(xs):
    #Predicts Class 0
    function_dict = np.array([[0.2685, 1.0, 2.0, 6.0], [0.212500006, 3.0, 4.0, 0.0], [0.325500011, 5.0, 6.0, 6.0], [-0.597499967, 7.0, 8.0, 2.0], [0.262499988, 9.0, 10.0, 6.0], [0.523499966, 11.0, 12.0, 0.0], [0.345499992, 13.0, 14.0, 6.0], [-0.60800004, 15.0, 16.0, 5.0], [-0.0397410244, 0.0, 0.0, 0.0], [-0.597499967, 17.0, 18.0, 2.0], [-0.2245, 19.0, 20.0, 4.0], [-0.799000025, 21.0, 22.0, 5.0], [0.281499982, 23.0, 24.0, 6.0], [0.470499992, 25.0, 26.0, 0.0], [-0.0743133426, 0.0, 0.0, 0.0], [0.280082077, 0.0, 0.0, 0.0], [0.0690573603, 0.0, 0.0, 0.0], [-0.0445009395, 0.0, 0.0, 0.0], [0.0909282491, 0.0, 0.0, 0.0], [0.240522519, 0.0, 0.0, 0.0], [-0.0700376332, 0.0, 0.0, 0.0], [0.145591155, 0.0, 0.0, 0.0], [-0.186539799, 0.0, 0.0, 0.0], [0.197189033, 0.0, 0.0, 0.0], [-0.104209185, 0.0, 0.0, 0.0], [0.194190502, 0.0, 0.0, 0.0], [-0.0234628469, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 14])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 12, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_206(xs):
    #Predicts Class 1
    function_dict = np.array([[0.2685, 1.0, 2.0, 6.0], [0.03345, 3.0, 4.0, 4.0], [-0.0500999987, 5.0, 6.0, 4.0], [-0.528999984, 7.0, 8.0, 5.0], [0.430500001, 9.0, 10.0, 0.0], [0.325500011, 11.0, 12.0, 6.0], [0.304499984, 13.0, 14.0, 6.0], [-0.548500001, 15.0, 16.0, 5.0], [0.0399499983, 17.0, 18.0, 1.0], [-0.0234147981, 0.0, 0.0, 0.0], [0.0860500038, 19.0, 20.0, 4.0], [-0.407499999, 21.0, 22.0, 1.0], [-0.717499971, 23.0, 24.0, 2.0], [-0.224680662, 0.0, 0.0, 0.0], [0.0894398168, 0.0, 0.0, 0.0], [-0.0243433677, 0.0, 0.0, 0.0], [0.20997858, 0.0, 0.0, 0.0], [-0.292344362, 0.0, 0.0, 0.0], [0.0550701097, 0.0, 0.0, 0.0], [0.231082052, 0.0, 0.0, 0.0], [0.0439812131, 0.0, 0.0, 0.0], [-7.72999192e-05, 0.0, 0.0, 0.0], [0.173920169, 0.0, 0.0, 0.0], [-0.128037438, 0.0, 0.0, 0.0], [0.0895272344, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 21, 22, 23, 24, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 11, 12, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_207(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.865499973, 1.0, 2.0, 3.0], [-0.892500043, 3.0, 4.0, 3.0], [-0.841500044, 5.0, 6.0, 3.0], [-0.74150002, 7.0, 8.0, 2.0], [-0.54550004, 9.0, 10.0, 2.0], [-0.657500029, 11.0, 12.0, 5.0], [-0.434499979, 13.0, 14.0, 2.0], [-0.230499998, 15.0, 16.0, 4.0], [-0.0190999992, 17.0, 18.0, 4.0], [-0.247225776, 0.0, 0.0, 0.0], [-0.070538111, 0.0, 0.0, 0.0], [-0.0982289165, 0.0, 0.0, 0.0], [0.277193278, 0.0, 0.0, 0.0], [0.247000009, 19.0, 20.0, 6.0], [0.168031439, 0.0, 0.0, 0.0], [-0.236349538, 0.0, 0.0, 0.0], [0.0394201204, 0.0, 0.0, 0.0], [0.0793309659, 0.0, 0.0, 0.0], [-0.11526835, 0.0, 0.0, 0.0], [0.0098419534, 0.0, 0.0, 0.0], [-0.163491428, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 11, 12, 19, 20, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_208(xs):
    #Predicts Class 3
    function_dict = np.array([[0.98150003, 1.0, 2.0, 0.0], [0.975499988, 3.0, 4.0, 0.0], [0.242500007, 5.0, 6.0, 6.0], [0.148499995, 7.0, 8.0, 6.0], [-0.954999983, 9.0, 10.0, 4.0], [0.111500002, 11.0, 12.0, 6.0], [-0.995499969, 13.0, 14.0, 1.0], [0.92900002, 15.0, 16.0, 0.0], [-0.999500036, 17.0, 18.0, 3.0], [-0.970499992, 19.0, 20.0, 4.0], [-0.944499969, 21.0, 22.0, 4.0], [0.986500025, 23.0, 24.0, 0.0], [0.123500004, 25.0, 26.0, 6.0], [-0.987499952, 27.0, 28.0, 4.0], [-0.0673730969, 0.0, 0.0, 0.0], [-0.0738074332, 0.0, 0.0, 0.0], [0.0782561228, 0.0, 0.0, 0.0], [0.0528480038, 0.0, 0.0, 0.0], [-0.104905568, 0.0, 0.0, 0.0], [-0.275667787, 0.0, 0.0, 0.0], [0.222902462, 0.0, 0.0, 0.0], [-0.5444417, 0.0, 0.0, 0.0], [-0.141689718, 0.0, 0.0, 0.0], [0.207065254, 0.0, 0.0, 0.0], [0.0202821083, 0.0, 0.0, 0.0], [-0.282559246, 0.0, 0.0, 0.0], [0.00980007555, 0.0, 0.0, 0.0], [-0.101325937, 0.0, 0.0, 0.0], [0.324053228, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_209(xs):
    #Predicts Class 4
    function_dict = np.array([[0.98150003, 1.0, 2.0, 0.0], [0.975499988, 3.0, 4.0, 0.0], [0.242500007, 5.0, 6.0, 6.0], [0.148499995, 7.0, 8.0, 6.0], [-0.954999983, 9.0, 10.0, 4.0], [0.111500002, 11.0, 12.0, 6.0], [-0.995499969, 13.0, 14.0, 1.0], [0.92900002, 15.0, 16.0, 0.0], [-0.834499955, 17.0, 18.0, 4.0], [-0.970499992, 19.0, 20.0, 4.0], [-0.944499969, 21.0, 22.0, 4.0], [0.986500025, 23.0, 24.0, 0.0], [0.123500004, 25.0, 26.0, 6.0], [-0.987499952, 27.0, 28.0, 4.0], [0.0699359477, 0.0, 0.0, 0.0], [0.0729652941, 0.0, 0.0, 0.0], [-0.0763870627, 0.0, 0.0, 0.0], [0.0854180902, 0.0, 0.0, 0.0], [-0.0909589007, 0.0, 0.0, 0.0], [0.276940495, 0.0, 0.0, 0.0], [-0.222111791, 0.0, 0.0, 0.0], [0.545075774, 0.0, 0.0, 0.0], [0.142486483, 0.0, 0.0, 0.0], [-0.206199035, 0.0, 0.0, 0.0], [-0.018512141, 0.0, 0.0, 0.0], [0.284099966, 0.0, 0.0, 0.0], [-0.00844807457, 0.0, 0.0, 0.0], [0.103145547, 0.0, 0.0, 0.0], [-0.32280919, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_210(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.949499965, 1.0, 2.0, 3.0], [0.490500003, 3.0, 4.0, 0.0], [0.135500014, 5.0, 6.0, 0.0], [-0.319999993, 7.0, 8.0, 1.0], [-0.166285649, 0.0, 0.0, 0.0], [-0.913499951, 9.0, 10.0, 3.0], [-0.919499993, 11.0, 12.0, 3.0], [-0.959499955, 13.0, 14.0, 3.0], [-0.0863590464, 0.0, 0.0, 0.0], [-0.0539792478, 0.0, 0.0, 0.0], [-0.537500024, 15.0, 16.0, 5.0], [-0.709499955, 17.0, 18.0, 2.0], [-0.915500045, 19.0, 20.0, 3.0], [0.153492883, 0.0, 0.0, 0.0], [0.00803079084, 0.0, 0.0, 0.0], [0.187520251, 0.0, 0.0, 0.0], [-0.0350029618, 0.0, 0.0, 0.0], [0.151132673, 0.0, 0.0, 0.0], [-0.159956485, 0.0, 0.0, 0.0], [-0.185053706, 0.0, 0.0, 0.0], [-0.004726429, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 9, 15, 16, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_211(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.871500015, 1.0, 2.0, 3.0], [-0.880499959, 3.0, 4.0, 3.0], [0.590499997, 5.0, 6.0, 0.0], [-0.794499993, 7.0, 8.0, 2.0], [0.251384109, 0.0, 0.0, 0.0], [0.00729500037, 9.0, 10.0, 0.0], [0.161678031, 0.0, 0.0, 0.0], [-0.951499999, 11.0, 12.0, 3.0], [-0.404500008, 13.0, 14.0, 4.0], [-0.214959979, 0.0, 0.0, 0.0], [-0.511999965, 15.0, 16.0, 5.0], [0.0212467331, 0.0, 0.0, 0.0], [-0.186316937, 0.0, 0.0, 0.0], [0.207774729, 0.0, 0.0, 0.0], [0.00383769232, 0.0, 0.0, 0.0], [-0.0559311211, 0.0, 0.0, 0.0], [0.0799868777, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 9, 15, 16, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_212(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.559499979, 1.0, 2.0, 5.0], [0.257499993, 3.0, 4.0, 6.0], [-0.710500002, 5.0, 6.0, 3.0], [-0.0213500001, 7.0, 8.0, 4.0], [-0.235245481, 0.0, 0.0, 0.0], [0.0596500002, 9.0, 10.0, 0.0], [-0.123500004, 11.0, 12.0, 1.0], [0.220499992, 13.0, 14.0, 6.0], [-0.246711299, 0.0, 0.0, 0.0], [-0.103717983, 0.0, 0.0, 0.0], [0.534500003, 15.0, 16.0, 0.0], [-0.0327903256, 0.0, 0.0, 0.0], [-0.147579297, 0.0, 0.0, 0.0], [-0.0648285821, 0.0, 0.0, 0.0], [0.055845879, 0.0, 0.0, 0.0], [0.139859736, 0.0, 0.0, 0.0], [-0.0618773475, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 9, 15, 16, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 10, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_213(xs):
    #Predicts Class 3
    function_dict = np.array([[0.481000006, 1.0, 2.0, 6.0], [0.166500002, 3.0, 4.0, 6.0], [0.250514358, 0.0, 0.0, 0.0], [-0.987499952, 5.0, 6.0, 4.0], [0.168500006, 7.0, 8.0, 6.0], [0.99150002, 9.0, 10.0, 0.0], [0.992499948, 11.0, 12.0, 0.0], [-0.342039138, 0.0, 0.0, 0.0], [-0.994500041, 13.0, 14.0, 4.0], [0.219287723, 0.0, 0.0, 0.0], [-0.0389503427, 0.0, 0.0, 0.0], [-0.0320386328, 0.0, 0.0, 0.0], [0.112470366, 0.0, 0.0, 0.0], [-0.236288235, 0.0, 0.0, 0.0], [-0.0155045772, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 7, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_214(xs):
    #Predicts Class 4
    function_dict = np.array([[0.419499993, 1.0, 2.0, 6.0], [0.300500005, 3.0, 4.0, 6.0], [-0.249311194, 0.0, 0.0, 0.0], [-0.999500036, 5.0, 6.0, 1.0], [0.204244733, 0.0, 0.0, 0.0], [0.174170494, 0.0, 0.0, 0.0], [0.987499952, 7.0, 8.0, 0.0], [0.0229691602, 0.0, 0.0, 0.0], [-0.019678181, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 7, 8, 4, 2])
    branch_indices = np.array([0, 1, 3, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_215(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.167499989, 1.0, 2.0, 1.0], [-0.19749999, 3.0, 4.0, 1.0], [-0.711500049, 5.0, 6.0, 3.0], [-0.0847499967, 7.0, 8.0, 4.0], [0.171031043, 0.0, 0.0, 0.0], [0.155499995, 9.0, 10.0, 0.0], [-0.630500019, 11.0, 12.0, 3.0], [-0.646499991, 13.0, 14.0, 5.0], [-0.159027174, 0.0, 0.0, 0.0], [0.0368031375, 0.0, 0.0, 0.0], [0.236499995, 15.0, 16.0, 6.0], [0.133983463, 0.0, 0.0, 0.0], [0.0101141259, 0.0, 0.0, 0.0], [-0.00839786325, 0.0, 0.0, 0.0], [0.135130376, 0.0, 0.0, 0.0], [-0.0849894881, 0.0, 0.0, 0.0], [-0.311375678, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 9, 15, 16, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 10, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_216(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.658499956, 1.0, 2.0, 2.0], [-0.298500001, 3.0, 4.0, 1.0], [-0.0238500014, 5.0, 6.0, 4.0], [-0.0815500021, 7.0, 8.0, 4.0], [-0.716499984, 9.0, 10.0, 5.0], [0.226500005, 11.0, 12.0, 6.0], [-0.870499969, 13.0, 14.0, 3.0], [-0.140500009, 15.0, 16.0, 4.0], [0.185732305, 0.0, 0.0, 0.0], [-0.727499962, 17.0, 18.0, 2.0], [0.490500003, 19.0, 20.0, 0.0], [-0.554499984, 21.0, 22.0, 2.0], [-0.70449996, 23.0, 24.0, 5.0], [0.472499996, 25.0, 26.0, 0.0], [0.0172000006, 27.0, 28.0, 4.0], [0.0128581692, 0.0, 0.0, 0.0], [-0.239026114, 0.0, 0.0, 0.0], [-0.0549820587, 0.0, 0.0, 0.0], [0.179016382, 0.0, 0.0, 0.0], [-0.293135375, 0.0, 0.0, 0.0], [-0.0107390517, 0.0, 0.0, 0.0], [0.0395744592, 0.0, 0.0, 0.0], [-0.16269578, 0.0, 0.0, 0.0], [-0.0906567052, 0.0, 0.0, 0.0], [0.170770034, 0.0, 0.0, 0.0], [0.156078205, 0.0, 0.0, 0.0], [-0.113504119, 0.0, 0.0, 0.0], [-0.268414646, 0.0, 0.0, 0.0], [-0.0381661654, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_217(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.581499994, 1.0, 2.0, 2.0], [-0.227499992, 3.0, 4.0, 4.0], [-0.17750001, 5.0, 6.0, 1.0], [-0.715499997, 7.0, 8.0, 5.0], [-0.635499954, 9.0, 10.0, 2.0], [-0.00743000023, 11.0, 12.0, 4.0], [-0.523000002, 13.0, 14.0, 2.0], [-0.783499956, 15.0, 16.0, 5.0], [0.229000002, 17.0, 18.0, 6.0], [-0.162499994, 19.0, 20.0, 4.0], [-0.531499982, 21.0, 22.0, 5.0], [0.463999987, 23.0, 24.0, 0.0], [-0.436999977, 25.0, 26.0, 5.0], [-0.87650001, 27.0, 28.0, 3.0], [-0.456499994, 29.0, 30.0, 2.0], [0.0750530288, 0.0, 0.0, 0.0], [-0.11134059, 0.0, 0.0, 0.0], [0.198466241, 0.0, 0.0, 0.0], [0.0203472804, 0.0, 0.0, 0.0], [-0.170489267, 0.0, 0.0, 0.0], [0.0652295277, 0.0, 0.0, 0.0], [-0.27454704, 0.0, 0.0, 0.0], [-0.028216809, 0.0, 0.0, 0.0], [0.0293753985, 0.0, 0.0, 0.0], [0.295513511, 0.0, 0.0, 0.0], [-0.135609105, 0.0, 0.0, 0.0], [0.158173963, 0.0, 0.0, 0.0], [-0.253154755, 0.0, 0.0, 0.0], [0.0255508032, 0.0, 0.0, 0.0], [0.157744795, 0.0, 0.0, 0.0], [-0.0329397097, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_218(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [0.177000001, 3.0, 4.0, 6.0], [0.968500018, 5.0, 6.0, 0.0], [0.180403814, 0.0, 0.0, 0.0], [0.0399714634, 0.0, 0.0, 0.0], [-0.992499948, 7.0, 8.0, 1.0], [-0.999500036, 9.0, 10.0, 3.0], [-0.958999991, 11.0, 12.0, 4.0], [-0.997500002, 13.0, 14.0, 3.0], [0.139499992, 15.0, 16.0, 6.0], [0.988499999, 17.0, 18.0, 0.0], [-0.223858386, 0.0, 0.0, 0.0], [0.0696244165, 0.0, 0.0, 0.0], [0.183164731, 0.0, 0.0, 0.0], [-0.0623064414, 0.0, 0.0, 0.0], [0.0358549915, 0.0, 0.0, 0.0], [-0.0439152047, 0.0, 0.0, 0.0], [-0.160333306, 0.0, 0.0, 0.0], [0.0858310387, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 13, 14, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 2, 5, 7, 8, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_219(xs):
    #Predicts Class 4
    function_dict = np.array([[0.899500012, 1.0, 2.0, 0.0], [0.0911500007, 3.0, 4.0, 6.0], [-0.921499968, 5.0, 6.0, 1.0], [0.0193069968, 0.0, 0.0, 0.0], [0.173500001, 7.0, 8.0, 6.0], [-0.971500039, 9.0, 10.0, 5.0], [0.16730383, 0.0, 0.0, 0.0], [-0.273944855, 0.0, 0.0, 0.0], [-0.000583710906, 0.0, 0.0, 0.0], [0.912999988, 11.0, 12.0, 0.0], [0.922500014, 13.0, 14.0, 0.0], [0.189414158, 0.0, 0.0, 0.0], [0.00322379498, 0.0, 0.0, 0.0], [-0.256771624, 0.0, 0.0, 0.0], [-0.0569382682, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 11, 12, 13, 14, 6])
    branch_indices = np.array([0, 1, 4, 2, 5, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_220(xs):
    #Predicts Class 0
    function_dict = np.array([[0.29549998, 1.0, 2.0, 6.0], [0.345499992, 3.0, 4.0, 0.0], [-0.382499993, 5.0, 6.0, 4.0], [0.284500003, 7.0, 8.0, 6.0], [-0.201499999, 9.0, 10.0, 4.0], [0.0957738757, 0.0, 0.0, 0.0], [-0.294499993, 11.0, 12.0, 1.0], [0.2755, 13.0, 14.0, 6.0], [0.194987804, 0.0, 0.0, 0.0], [-0.211499989, 15.0, 16.0, 4.0], [-0.630499959, 17.0, 18.0, 5.0], [0.331499994, 19.0, 20.0, 6.0], [-0.691500008, 21.0, 22.0, 2.0], [0.0708255693, 0.0, 0.0, 0.0], [-0.147568837, 0.0, 0.0, 0.0], [-0.00809976924, 0.0, 0.0, 0.0], [0.228120327, 0.0, 0.0, 0.0], [-0.236291274, 0.0, 0.0, 0.0], [0.0725243911, 0.0, 0.0, 0.0], [-0.232442558, 0.0, 0.0, 0.0], [-0.0689142197, 0.0, 0.0, 0.0], [0.124614939, 0.0, 0.0, 0.0], [-0.119523786, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 15, 16, 17, 18, 5, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_221(xs):
    #Predicts Class 1
    function_dict = np.array([[0.291500002, 1.0, 2.0, 6.0], [-0.001865, 3.0, 4.0, 1.0], [-0.393999994, 5.0, 6.0, 4.0], [-0.29549998, 7.0, 8.0, 4.0], [0.263500005, 9.0, 10.0, 6.0], [-0.0959608555, 0.0, 0.0, 0.0], [0.0637499988, 11.0, 12.0, 4.0], [0.550500035, 13.0, 14.0, 0.0], [-0.836500049, 15.0, 16.0, 3.0], [-0.232239559, 0.0, 0.0, 0.0], [0.0349551886, 0.0, 0.0, 0.0], [-0.623000026, 17.0, 18.0, 2.0], [-0.0479584076, 0.0, 0.0, 0.0], [0.00990641396, 0.0, 0.0, 0.0], [-0.126279116, 0.0, 0.0, 0.0], [0.0682509691, 0.0, 0.0, 0.0], [-0.0795762986, 0.0, 0.0, 0.0], [0.0655902326, 0.0, 0.0, 0.0], [0.270820707, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 17, 18, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_222(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.159500003, 1.0, 2.0, 1.0], [-0.17750001, 3.0, 4.0, 1.0], [0.257499993, 5.0, 6.0, 6.0], [-0.96449995, 7.0, 8.0, 3.0], [-0.233881816, 0.0, 0.0, 0.0], [0.220499992, 9.0, 10.0, 6.0], [-0.0033499999, 11.0, 12.0, 1.0], [-0.137945592, 0.0, 0.0, 0.0], [-0.1065, 13.0, 14.0, 4.0], [0.471499979, 15.0, 16.0, 0.0], [-0.512500048, 17.0, 18.0, 2.0], [-0.0644499958, 19.0, 20.0, 1.0], [-0.209777147, 0.0, 0.0, 0.0], [-0.0193149541, 0.0, 0.0, 0.0], [0.0724513084, 0.0, 0.0, 0.0], [0.0677459314, 0.0, 0.0, 0.0], [-0.0967248827, 0.0, 0.0, 0.0], [0.04348078, 0.0, 0.0, 0.0], [0.229426607, 0.0, 0.0, 0.0], [-0.0185089875, 0.0, 0.0, 0.0], [0.153796375, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 4, 15, 16, 17, 18, 19, 20, 12])
    branch_indices = np.array([0, 1, 3, 8, 2, 5, 9, 10, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_223(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.03675, 1.0, 2.0, 6.0], [0.167309642, 0.0, 0.0, 0.0], [-0.035149999, 3.0, 4.0, 6.0], [-0.162456453, 0.0, 0.0, 0.0], [0.0210999995, 5.0, 6.0, 6.0], [-0.999500036, 7.0, 8.0, 3.0], [0.0458000004, 9.0, 10.0, 6.0], [0.257524729, 0.0, 0.0, 0.0], [-0.0270317495, 0.0, 0.0, 0.0], [-0.0975357816, 0.0, 0.0, 0.0], [0.00709343655, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_224(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.77700001, 1.0, 2.0, 4.0], [-0.982499957, 3.0, 4.0, 5.0], [-0.940500021, 5.0, 6.0, 1.0], [-0.871500015, 7.0, 8.0, 4.0], [0.164183825, 0.0, 0.0, 0.0], [-0.210831732, 0.0, 0.0, 0.0], [-0.993499994, 9.0, 10.0, 3.0], [-0.990499973, 11.0, 12.0, 5.0], [-0.165919885, 0.0, 0.0, 0.0], [0.0853002593, 0.0, 0.0, 0.0], [-0.140871808, 0.0, 0.0, 0.0], [0.000450353342, 0.0, 0.0, 0.0], [0.211002201, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 4, 5, 9, 10])
    branch_indices = np.array([0, 1, 3, 7, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_225(xs):
    #Predicts Class 0
    function_dict = np.array([[0.0939500034, 1.0, 2.0, 0.0], [-0.0826999992, 3.0, 4.0, 4.0], [0.245499998, 5.0, 6.0, 6.0], [-0.0381999984, 7.0, 8.0, 0.0], [-0.00616736896, 0.0, 0.0, 0.0], [0.239499986, 9.0, 10.0, 6.0], [0.250499994, 11.0, 12.0, 6.0], [0.0155317904, 0.0, 0.0, 0.0], [0.188343436, 0.0, 0.0, 0.0], [0.21450001, 13.0, 14.0, 6.0], [-0.715000033, 15.0, 16.0, 5.0], [-0.761999965, 17.0, 18.0, 2.0], [0.283500016, 19.0, 20.0, 0.0], [0.0350909159, 0.0, 0.0, 0.0], [-0.0837716311, 0.0, 0.0, 0.0], [0.247351035, 0.0, 0.0, 0.0], [-0.103901669, 0.0, 0.0, 0.0], [-0.06762328, 0.0, 0.0, 0.0], [-0.247755915, 0.0, 0.0, 0.0], [-0.125075951, 0.0, 0.0, 0.0], [0.0307974424, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 4, 13, 14, 15, 16, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_226(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.957499981, 1.0, 2.0, 3.0], [-0.278500021, 3.0, 4.0, 1.0], [-0.95449996, 5.0, 6.0, 3.0], [0.266499996, 7.0, 8.0, 6.0], [0.446500003, 9.0, 10.0, 0.0], [0.159460545, 0.0, 0.0, 0.0], [0.245499998, 11.0, 12.0, 6.0], [-0.212884724, 0.0, 0.0, 0.0], [0.0276866294, 0.0, 0.0, 0.0], [-0.121679038, 0.0, 0.0, 0.0], [0.205309957, 0.0, 0.0, 0.0], [-0.415499985, 13.0, 14.0, 1.0], [0.0945999995, 15.0, 16.0, 0.0], [-0.112435125, 0.0, 0.0, 0.0], [0.0031781455, 0.0, 0.0, 0.0], [-0.133754656, 0.0, 0.0, 0.0], [0.0540577844, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 5, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 3, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_227(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.371500015, 1.0, 2.0, 2.0], [-0.960500002, 3.0, 4.0, 3.0], [0.112945303, 0.0, 0.0, 0.0], [0.233500004, 5.0, 6.0, 6.0], [-0.559499979, 7.0, 8.0, 5.0], [-0.0683856755, 0.0, 0.0, 0.0], [0.203058779, 0.0, 0.0, 0.0], [0.228500009, 9.0, 10.0, 6.0], [-0.50849998, 11.0, 12.0, 5.0], [0.0237750467, 0.0, 0.0, 0.0], [-0.122303702, 0.0, 0.0, 0.0], [0.18306388, 0.0, 0.0, 0.0], [-0.0450553298, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 6, 9, 10, 11, 12, 2])
    branch_indices = np.array([0, 1, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_228(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 5.0], [-0.999500036, 3.0, 4.0, 2.0], [-0.993499994, 5.0, 6.0, 5.0], [0.105499998, 7.0, 8.0, 6.0], [-0.234668672, 0.0, 0.0, 0.0], [0.21989654, 0.0, 0.0, 0.0], [-0.99849999, 9.0, 10.0, 3.0], [-0.936499953, 11.0, 12.0, 4.0], [0.1215, 13.0, 14.0, 6.0], [0.968500018, 15.0, 16.0, 0.0], [-0.995499969, 17.0, 18.0, 3.0], [-0.00652626483, 0.0, 0.0, 0.0], [-0.19997339, 0.0, 0.0, 0.0], [0.155573189, 0.0, 0.0, 0.0], [-0.0098882271, 0.0, 0.0, 0.0], [-0.0348769762, 0.0, 0.0, 0.0], [-0.200100303, 0.0, 0.0, 0.0], [0.158602774, 0.0, 0.0, 0.0], [-0.044987198, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_229(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 5.0], [-0.999500036, 3.0, 4.0, 2.0], [-0.993499994, 5.0, 6.0, 5.0], [0.105499998, 7.0, 8.0, 6.0], [0.235464036, 0.0, 0.0, 0.0], [-0.217113122, 0.0, 0.0, 0.0], [-0.99849999, 9.0, 10.0, 3.0], [-0.936499953, 11.0, 12.0, 4.0], [0.1215, 13.0, 14.0, 6.0], [0.981000006, 15.0, 16.0, 0.0], [0.107500002, 17.0, 18.0, 6.0], [0.00788794272, 0.0, 0.0, 0.0], [0.201014608, 0.0, 0.0, 0.0], [-0.154730588, 0.0, 0.0, 0.0], [0.011193186, 0.0, 0.0, 0.0], [0.0627633184, 0.0, 0.0, 0.0], [0.209142059, 0.0, 0.0, 0.0], [-0.178634867, 0.0, 0.0, 0.0], [0.00598665141, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_230(xs):
    #Predicts Class 0
    function_dict = np.array([[0.345499992, 1.0, 2.0, 0.0], [-0.619500041, 3.0, 4.0, 2.0], [-0.53550005, 5.0, 6.0, 1.0], [-0.7755, 7.0, 8.0, 3.0], [-0.080400005, 9.0, 10.0, 1.0], [-0.43900001, 11.0, 12.0, 4.0], [-0.516499996, 13.0, 14.0, 1.0], [0.2685, 15.0, 16.0, 6.0], [0.21678637, 0.0, 0.0, 0.0], [-0.182424322, 0.0, 0.0, 0.0], [0.255500019, 17.0, 18.0, 6.0], [0.000745238853, 0.0, 0.0, 0.0], [-0.186092049, 0.0, 0.0, 0.0], [0.148833781, 0.0, 0.0, 0.0], [0.263500005, 19.0, 20.0, 6.0], [0.139917269, 0.0, 0.0, 0.0], [-0.0716489851, 0.0, 0.0, 0.0], [0.110369109, 0.0, 0.0, 0.0], [-0.0516423248, 0.0, 0.0, 0.0], [-0.0663001388, 0.0, 0.0, 0.0], [0.053058736, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 17, 18, 11, 12, 13, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 4, 10, 2, 5, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_231(xs):
    #Predicts Class 1
    function_dict = np.array([[0.327499986, 1.0, 2.0, 0.0], [0.311500013, 3.0, 4.0, 0.0], [-0.881500006, 5.0, 6.0, 3.0], [-0.857499957, 7.0, 8.0, 3.0], [-0.231398433, 0.0, 0.0, 0.0], [-0.918500006, 9.0, 10.0, 3.0], [-0.666499972, 11.0, 12.0, 5.0], [0.270500004, 13.0, 14.0, 6.0], [0.323000014, 15.0, 16.0, 6.0], [-0.792999983, 17.0, 18.0, 2.0], [0.403500021, 19.0, 20.0, 0.0], [0.234499991, 21.0, 22.0, 6.0], [-0.0124500003, 23.0, 24.0, 4.0], [-0.0185696557, 0.0, 0.0, 0.0], [0.155525327, 0.0, 0.0, 0.0], [-0.109639354, 0.0, 0.0, 0.0], [0.094336547, 0.0, 0.0, 0.0], [-0.088002421, 0.0, 0.0, 0.0], [0.0451606326, 0.0, 0.0, 0.0], [0.106279716, 0.0, 0.0, 0.0], [-0.138305277, 0.0, 0.0, 0.0], [-0.00198434875, 0.0, 0.0, 0.0], [0.170241162, 0.0, 0.0, 0.0], [-0.14000915, 0.0, 0.0, 0.0], [0.144969895, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 19, 20, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_232(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.386500001, 1.0, 2.0, 1.0], [-0.931499958, 3.0, 4.0, 3.0], [-0.73300004, 5.0, 6.0, 2.0], [-0.210570335, 0.0, 0.0, 0.0], [-0.635499954, 7.0, 8.0, 5.0], [-0.74150002, 9.0, 10.0, 2.0], [-0.940500021, 11.0, 12.0, 3.0], [-0.799499989, 13.0, 14.0, 5.0], [0.11691805, 0.0, 0.0, 0.0], [0.0442165583, 0.0, 0.0, 0.0], [0.195987508, 0.0, 0.0, 0.0], [0.233500004, 15.0, 16.0, 6.0], [0.196500003, 17.0, 18.0, 6.0], [0.0479569212, 0.0, 0.0, 0.0], [-0.101160891, 0.0, 0.0, 0.0], [-0.0325666144, 0.0, 0.0, 0.0], [0.2299501, 0.0, 0.0, 0.0], [0.119443677, 0.0, 0.0, 0.0], [-0.0607735701, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 13, 14, 8, 9, 10, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 4, 7, 2, 5, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_233(xs):
    #Predicts Class 3
    function_dict = np.array([[0.0335000008, 1.0, 2.0, 6.0], [0.02245, 3.0, 4.0, 6.0], [0.0367000028, 5.0, 6.0, 6.0], [-0.994500041, 7.0, 8.0, 1.0], [-0.995499969, 9.0, 10.0, 1.0], [-0.191102728, 0.0, 0.0, 0.0], [-0.995499969, 11.0, 12.0, 1.0], [-0.979499996, 13.0, 14.0, 4.0], [-0.976500034, 15.0, 16.0, 1.0], [0.311651975, 0.0, 0.0, 0.0], [0.00945534091, 0.0, 0.0, 0.0], [-0.999500036, 17.0, 18.0, 3.0], [-0.994500041, 19.0, 20.0, 1.0], [0.0351924598, 0.0, 0.0, 0.0], [-0.230088174, 0.0, 0.0, 0.0], [0.204671055, 0.0, 0.0, 0.0], [0.0303395465, 0.0, 0.0, 0.0], [-0.00803915225, 0.0, 0.0, 0.0], [-0.197629482, 0.0, 0.0, 0.0], [0.168605417, 0.0, 0.0, 0.0], [-0.00362302037, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_234(xs):
    #Predicts Class 4
    function_dict = np.array([[0.0335000008, 1.0, 2.0, 6.0], [0.0221499987, 3.0, 4.0, 6.0], [0.0367000028, 5.0, 6.0, 6.0], [-0.994500041, 7.0, 8.0, 1.0], [-0.995499969, 9.0, 10.0, 1.0], [0.192019776, 0.0, 0.0, 0.0], [-0.995499969, 11.0, 12.0, 1.0], [-0.979499996, 13.0, 14.0, 4.0], [-0.149930775, 0.0, 0.0, 0.0], [-0.311130345, 0.0, 0.0, 0.0], [-0.011737572, 0.0, 0.0, 0.0], [-0.999500036, 15.0, 16.0, 3.0], [-0.994500041, 17.0, 18.0, 1.0], [-0.0311956666, 0.0, 0.0, 0.0], [0.231697276, 0.0, 0.0, 0.0], [0.00899506081, 0.0, 0.0, 0.0], [0.198711798, 0.0, 0.0, 0.0], [-0.167350382, 0.0, 0.0, 0.0], [0.00220423541, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_235(xs):
    #Predicts Class 0
    function_dict = np.array([[0.571500003, 1.0, 2.0, 0.0], [0.162499994, 3.0, 4.0, 6.0], [-0.522500038, 5.0, 6.0, 1.0], [-0.107574463, 0.0, 0.0, 0.0], [-0.324499995, 7.0, 8.0, 1.0], [-0.173250347, 0.0, 0.0, 0.0], [-0.413500011, 9.0, 10.0, 1.0], [0.30250001, 11.0, 12.0, 6.0], [-0.894500017, 13.0, 14.0, 3.0], [0.257499993, 15.0, 16.0, 6.0], [-0.164429367, 0.0, 0.0, 0.0], [0.0794982687, 0.0, 0.0, 0.0], [-0.0855948329, 0.0, 0.0, 0.0], [-0.164628908, 0.0, 0.0, 0.0], [0.0329680555, 0.0, 0.0, 0.0], [-0.0550375134, 0.0, 0.0, 0.0], [0.163923383, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 11, 12, 13, 14, 5, 15, 16, 10])
    branch_indices = np.array([0, 1, 4, 7, 8, 2, 6, 9])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_236(xs):
    #Predicts Class 1
    function_dict = np.array([[0.604499996, 1.0, 2.0, 0.0], [0.549499989, 3.0, 4.0, 0.0], [-0.413500011, 5.0, 6.0, 1.0], [0.490500003, 7.0, 8.0, 0.0], [0.270999998, 9.0, 10.0, 6.0], [-0.49849999, 11.0, 12.0, 1.0], [0.207500011, 13.0, 14.0, 6.0], [0.484499991, 15.0, 16.0, 0.0], [-0.0639000013, 17.0, 18.0, 4.0], [-0.733500004, 19.0, 20.0, 2.0], [0.0812138841, 0.0, 0.0, 0.0], [0.109823331, 0.0, 0.0, 0.0], [-0.134952158, 0.0, 0.0, 0.0], [-0.0260216091, 0.0, 0.0, 0.0], [0.243361458, 0.0, 0.0, 0.0], [-0.00832275301, 0.0, 0.0, 0.0], [-0.220505759, 0.0, 0.0, 0.0], [0.125464886, 0.0, 0.0, 0.0], [-0.0686133504, 0.0, 0.0, 0.0], [-0.214679718, 0.0, 0.0, 0.0], [-0.0401426367, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_237(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.526499987, 1.0, 2.0, 5.0], [-0.0237499997, 3.0, 4.0, 4.0], [-0.771499991, 5.0, 6.0, 3.0], [-0.547500014, 7.0, 8.0, 2.0], [0.239999995, 9.0, 10.0, 6.0], [0.458000004, 11.0, 12.0, 0.0], [-0.550000012, 13.0, 14.0, 2.0], [-0.567499995, 15.0, 16.0, 5.0], [-0.595000029, 17.0, 18.0, 5.0], [-0.206449896, 0.0, 0.0, 0.0], [0.00976059772, 0.0, 0.0, 0.0], [0.263500005, 19.0, 20.0, 6.0], [-0.162499994, 21.0, 22.0, 1.0], [0.0183844138, 0.0, 0.0, 0.0], [-0.110990256, 0.0, 0.0, 0.0], [0.00205271505, 0.0, 0.0, 0.0], [-0.240673035, 0.0, 0.0, 0.0], [-0.0277020354, 0.0, 0.0, 0.0], [0.191139907, 0.0, 0.0, 0.0], [0.260529667, 0.0, 0.0, 0.0], [0.0328906551, 0.0, 0.0, 0.0], [-0.0766718835, 0.0, 0.0, 0.0], [0.0659890473, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 21, 22, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 12, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_238(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.0357000008, 1.0, 2.0, 6.0], [0.12984857, 0.0, 0.0, 0.0], [0.33950001, 3.0, 4.0, 6.0], [0.297500014, 5.0, 6.0, 6.0], [0.130901217, 0.0, 0.0, 0.0], [0.294499993, 7.0, 8.0, 6.0], [-0.168802276, 0.0, 0.0, 0.0], [-0.00362572982, 0.0, 0.0, 0.0], [0.200251207, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 7, 8, 6, 4])
    branch_indices = np.array([0, 2, 3, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_239(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.933500051, 1.0, 2.0, 4.0], [-0.940500021, 3.0, 4.0, 4.0], [-0.925500035, 5.0, 6.0, 4.0], [-0.945500016, 7.0, 8.0, 4.0], [0.972000003, 9.0, 10.0, 0.0], [-0.999500036, 11.0, 12.0, 3.0], [0.0847000033, 13.0, 14.0, 6.0], [-0.956499994, 15.0, 16.0, 4.0], [0.965499997, 17.0, 18.0, 0.0], [0.285929531, 0.0, 0.0, 0.0], [-0.0125511317, 0.0, 0.0, 0.0], [-0.294254065, 0.0, 0.0, 0.0], [0.0175053068, 0.0, 0.0, 0.0], [-0.993999958, 19.0, 20.0, 3.0], [-0.986500025, 21.0, 22.0, 1.0], [-0.00155484083, 0.0, 0.0, 0.0], [0.0941972584, 0.0, 0.0, 0.0], [-0.288895786, 0.0, 0.0, 0.0], [-0.00721918512, 0.0, 0.0, 0.0], [-0.187486976, 0.0, 0.0, 0.0], [0.105120577, 0.0, 0.0, 0.0], [0.167988971, 0.0, 0.0, 0.0], [-0.0258279946, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 11, 12, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_240(xs):
    #Predicts Class 0
    function_dict = np.array([[0.21450001, 1.0, 2.0, 6.0], [-0.706499994, 3.0, 4.0, 2.0], [0.2315, 5.0, 6.0, 6.0], [-0.468500018, 7.0, 8.0, 1.0], [-0.631500006, 9.0, 10.0, 5.0], [-0.688499987, 11.0, 12.0, 5.0], [0.557500005, 13.0, 14.0, 0.0], [-0.411500007, 15.0, 16.0, 4.0], [0.235183597, 0.0, 0.0, 0.0], [0.407000005, 17.0, 18.0, 0.0], [-0.167499989, 19.0, 20.0, 1.0], [-0.236024126, 0.0, 0.0, 0.0], [-0.0272074826, 0.0, 0.0, 0.0], [-0.324499995, 21.0, 22.0, 4.0], [0.641499996, 23.0, 24.0, 0.0], [0.0482265949, 0.0, 0.0, 0.0], [-0.126371905, 0.0, 0.0, 0.0], [0.0112621756, 0.0, 0.0, 0.0], [-0.212385282, 0.0, 0.0, 0.0], [0.121276319, 0.0, 0.0, 0.0], [-0.0273865033, 0.0, 0.0, 0.0], [0.0897921696, 0.0, 0.0, 0.0], [-0.0162999704, 0.0, 0.0, 0.0], [-0.139689267, 0.0, 0.0, 0.0], [-0.0278014671, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 11, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_241(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.573500037, 1.0, 2.0, 3.0], [-0.672999978, 3.0, 4.0, 3.0], [0.0988799259, 0.0, 0.0, 0.0], [0.000260000001, 5.0, 6.0, 1.0], [-0.662, 7.0, 8.0, 5.0], [-0.179500014, 9.0, 10.0, 4.0], [0.263500005, 11.0, 12.0, 6.0], [-0.0375665016, 0.0, 0.0, 0.0], [-0.13946943, 0.0, 0.0, 0.0], [-0.0165866297, 0.0, 0.0, 0.0], [0.0571522936, 0.0, 0.0, 0.0], [-0.175935417, 0.0, 0.0, 0.0], [0.039785739, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 7, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_242(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.729499996, 1.0, 2.0, 5.0], [0.168500006, 3.0, 4.0, 6.0], [-0.73300004, 5.0, 6.0, 2.0], [0.0599634759, 0.0, 0.0, 0.0], [0.5625, 7.0, 8.0, 0.0], [-0.684000015, 9.0, 10.0, 5.0], [-0.338499993, 11.0, 12.0, 1.0], [-0.258028597, 0.0, 0.0, 0.0], [0.0259110648, 0.0, 0.0, 0.0], [0.189138845, 0.0, 0.0, 0.0], [-0.0371014066, 0.0, 0.0, 0.0], [-0.105499998, 13.0, 14.0, 4.0], [-0.934499979, 15.0, 16.0, 3.0], [-0.20727855, 0.0, 0.0, 0.0], [0.0459324233, 0.0, 0.0, 0.0], [0.107049905, 0.0, 0.0, 0.0], [-0.0127685964, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 4, 2, 5, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_243(xs):
    #Predicts Class 3
    function_dict = np.array([[0.912999988, 1.0, 2.0, 0.0], [0.899500012, 3.0, 4.0, 0.0], [-0.953500032, 5.0, 6.0, 4.0], [-0.995499969, 7.0, 8.0, 3.0], [-0.204138175, 0.0, 0.0, 0.0], [-0.956499994, 9.0, 10.0, 4.0], [0.124499999, 11.0, 12.0, 6.0], [0.0914872214, 0.0, 0.0, 0.0], [-0.0587429442, 0.0, 0.0, 0.0], [0.980499983, 13.0, 14.0, 0.0], [0.112000003, 15.0, 16.0, 6.0], [-0.940500021, 17.0, 18.0, 4.0], [-0.936499953, 19.0, 20.0, 4.0], [0.0804509446, 0.0, 0.0, 0.0], [-0.0116205951, 0.0, 0.0, 0.0], [-0.396227926, 0.0, 0.0, 0.0], [0.0923989862, 0.0, 0.0, 0.0], [0.272456706, 0.0, 0.0, 0.0], [-0.00530639198, 0.0, 0.0, 0.0], [-0.205052525, 0.0, 0.0, 0.0], [0.0660328791, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 4, 13, 14, 15, 16, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_244(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.631500006, 1.0, 2.0, 4.0], [0.912999988, 3.0, 4.0, 0.0], [-0.121928684, 0.0, 0.0, 0.0], [0.899500012, 5.0, 6.0, 0.0], [-0.953500032, 7.0, 8.0, 4.0], [-0.00344914687, 0.0, 0.0, 0.0], [0.205675647, 0.0, 0.0, 0.0], [-0.956499994, 9.0, 10.0, 4.0], [0.124499999, 11.0, 12.0, 6.0], [-0.00131567672, 0.0, 0.0, 0.0], [0.194093555, 0.0, 0.0, 0.0], [-0.106415808, 0.0, 0.0, 0.0], [0.0332542844, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 6, 9, 10, 11, 12, 2])
    branch_indices = np.array([0, 1, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_245(xs):
    #Predicts Class 0
    function_dict = np.array([[0.647500038, 1.0, 2.0, 0.0], [-0.826499999, 3.0, 4.0, 2.0], [-0.115077347, 0.0, 0.0, 0.0], [0.131677955, 0.0, 0.0, 0.0], [-0.448000014, 5.0, 6.0, 1.0], [-0.740499973, 7.0, 8.0, 2.0], [-0.763499975, 9.0, 10.0, 5.0], [0.0122157503, 0.0, 0.0, 0.0], [-0.203578845, 0.0, 0.0, 0.0], [-0.0733832642, 0.0, 0.0, 0.0], [0.0393659472, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 2])
    branch_indices = np.array([0, 1, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_246(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.7245, 1.0, 2.0, 5.0], [-0.29549998, 3.0, 4.0, 4.0], [-0.727499962, 5.0, 6.0, 2.0], [-0.717000008, 7.0, 8.0, 2.0], [0.262000024, 9.0, 10.0, 6.0], [-0.342500001, 11.0, 12.0, 1.0], [-0.453500003, 13.0, 14.0, 1.0], [-0.509500027, 15.0, 16.0, 1.0], [-0.365999997, 17.0, 18.0, 4.0], [0.243259162, 0.0, 0.0, 0.0], [-0.0206611343, 0.0, 0.0, 0.0], [0.291500002, 19.0, 20.0, 6.0], [0.0476390012, 0.0, 0.0, 0.0], [0.171862975, 0.0, 0.0, 0.0], [0.228500009, 21.0, 22.0, 6.0], [-0.0880317762, 0.0, 0.0, 0.0], [0.076332435, 0.0, 0.0, 0.0], [0.0428381078, 0.0, 0.0, 0.0], [-0.2339672, 0.0, 0.0, 0.0], [-0.210312814, 0.0, 0.0, 0.0], [0.000462871511, 0.0, 0.0, 0.0], [-0.0759470165, 0.0, 0.0, 0.0], [0.0236714371, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 12, 13, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_247(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.455500007, 1.0, 2.0, 1.0], [-0.544499993, 3.0, 4.0, 1.0], [-0.393999994, 5.0, 6.0, 5.0], [0.002861819, 0.0, 0.0, 0.0], [-0.147787184, 0.0, 0.0, 0.0], [-0.796499968, 7.0, 8.0, 2.0], [0.133034244, 0.0, 0.0, 0.0], [0.139152452, 0.0, 0.0, 0.0], [-0.19749999, 9.0, 10.0, 4.0], [-0.0729524344, 0.0, 0.0, 0.0], [0.022579724, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 7, 9, 10, 6])
    branch_indices = np.array([0, 1, 2, 5, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_248(xs):
    #Predicts Class 3
    function_dict = np.array([[0.199499995, 1.0, 2.0, 6.0], [0.127499998, 3.0, 4.0, 6.0], [0.222499996, 5.0, 6.0, 6.0], [0.120499998, 7.0, 8.0, 6.0], [0.132499993, 9.0, 10.0, 6.0], [-0.228213966, 0.0, 0.0, 0.0], [0.961500049, 11.0, 12.0, 0.0], [0.112499997, 13.0, 14.0, 6.0], [-0.977499962, 15.0, 16.0, 4.0], [0.286451578, 0.0, 0.0, 0.0], [-0.98150003, 17.0, 18.0, 4.0], [-0.194056511, 0.0, 0.0, 0.0], [-0.9745, 19.0, 20.0, 4.0], [-0.0168427899, 0.0, 0.0, 0.0], [0.129285932, 0.0, 0.0, 0.0], [-0.370910585, 0.0, 0.0, 0.0], [0.00704400754, 0.0, 0.0, 0.0], [0.0751800388, 0.0, 0.0, 0.0], [-0.0370009877, 0.0, 0.0, 0.0], [-0.0657192841, 0.0, 0.0, 0.0], [0.166802198, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 17, 18, 5, 11, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_249(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [-0.103515796, 0.0, 0.0, 0.0], [-0.994500041, 3.0, 4.0, 4.0], [0.99150002, 5.0, 6.0, 0.0], [0.300500005, 7.0, 8.0, 6.0], [-0.0388095193, 0.0, 0.0, 0.0], [0.216887623, 0.0, 0.0, 0.0], [0.112499997, 9.0, 10.0, 6.0], [0.139950037, 0.0, 0.0, 0.0], [0.0182530824, 0.0, 0.0, 0.0], [-0.0226100739, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 9, 10, 8])
    branch_indices = np.array([0, 2, 3, 4, 7])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_250(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.784500003, 1.0, 2.0, 3.0], [-0.24849999, 3.0, 4.0, 1.0], [0.326499999, 5.0, 6.0, 0.0], [-0.380500019, 7.0, 8.0, 1.0], [0.1655, 9.0, 10.0, 0.0], [-0.612499952, 11.0, 12.0, 2.0], [-0.635499954, 13.0, 14.0, 5.0], [-0.417500019, 15.0, 16.0, 1.0], [-0.695500016, 17.0, 18.0, 5.0], [0.0973928124, 0.0, 0.0, 0.0], [0.206, 19.0, 20.0, 6.0], [0.273000002, 21.0, 22.0, 6.0], [0.242500007, 23.0, 24.0, 6.0], [-0.191287577, 0.0, 0.0, 0.0], [0.0137302941, 0.0, 0.0, 0.0], [0.0216218401, 0.0, 0.0, 0.0], [-0.0987128988, 0.0, 0.0, 0.0], [0.172655746, 0.0, 0.0, 0.0], [-0.0865900293, 0.0, 0.0, 0.0], [0.0333577245, 0.0, 0.0, 0.0], [-0.20510298, 0.0, 0.0, 0.0], [-0.0293310732, 0.0, 0.0, 0.0], [0.169687971, 0.0, 0.0, 0.0], [0.0681567416, 0.0, 0.0, 0.0], [-0.165296465, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 21, 22, 23, 24, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 11, 12, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_251(xs):
    #Predicts Class 1
    function_dict = np.array([[0.0451999977, 1.0, 2.0, 6.0], [0.11280001, 0.0, 0.0, 0.0], [-0.621500015, 3.0, 4.0, 5.0], [0.213499993, 5.0, 6.0, 6.0], [-0.57949996, 7.0, 8.0, 5.0], [0.638499975, 9.0, 10.0, 0.0], [0.455500007, 11.0, 12.0, 0.0], [-0.815500021, 13.0, 14.0, 3.0], [0.2315, 15.0, 16.0, 6.0], [-0.195295781, 0.0, 0.0, 0.0], [0.0555352792, 0.0, 0.0, 0.0], [-0.0489918366, 0.0, 0.0, 0.0], [0.0442771316, 0.0, 0.0, 0.0], [0.169789299, 0.0, 0.0, 0.0], [-0.0201953929, 0.0, 0.0, 0.0], [0.0691705197, 0.0, 0.0, 0.0], [-0.068291761, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_252(xs):
    #Predicts Class 2
    function_dict = np.array([[0.0491999984, 1.0, 2.0, 0.0], [-0.10564325, 0.0, 0.0, 0.0], [0.0579000004, 3.0, 4.0, 4.0], [0.249500006, 5.0, 6.0, 6.0], [0.431999981, 7.0, 8.0, 0.0], [0.247500002, 9.0, 10.0, 0.0], [-0.946500003, 11.0, 12.0, 3.0], [0.179722548, 0.0, 0.0, 0.0], [-0.0195448417, 0.0, 0.0, 0.0], [0.113388874, 0.0, 0.0, 0.0], [-0.00289817411, 0.0, 0.0, 0.0], [0.0657680556, 0.0, 0.0, 0.0], [-0.113399662, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 7, 8])
    branch_indices = np.array([0, 2, 3, 5, 6, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_253(xs):
    #Predicts Class 3
    function_dict = np.array([[0.33950001, 1.0, 2.0, 6.0], [0.199499995, 3.0, 4.0, 6.0], [0.138273314, 0.0, 0.0, 0.0], [-0.921000004, 5.0, 6.0, 1.0], [-0.987499952, 7.0, 8.0, 4.0], [-0.861000001, 9.0, 10.0, 4.0], [-0.099086687, 0.0, 0.0, 0.0], [-0.26217702, 0.0, 0.0, 0.0], [-0.985499978, 11.0, 12.0, 4.0], [-0.00112639123, 0.0, 0.0, 0.0], [0.182799414, 0.0, 0.0, 0.0], [0.182189837, 0.0, 0.0, 0.0], [-0.0811248347, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 6, 7, 11, 12, 2])
    branch_indices = np.array([0, 1, 3, 5, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_254(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.788499951, 1.0, 2.0, 4.0], [-0.996500015, 3.0, 4.0, 3.0], [-0.951499999, 5.0, 6.0, 5.0], [0.0638500005, 7.0, 8.0, 6.0], [-0.971500039, 9.0, 10.0, 1.0], [-0.187999949, 0.0, 0.0, 0.0], [-0.631500006, 11.0, 12.0, 4.0], [-0.98150003, 13.0, 14.0, 4.0], [0.0714000016, 15.0, 16.0, 6.0], [0.182695389, 0.0, 0.0, 0.0], [0.0237525329, 0.0, 0.0, 0.0], [0.104909591, 0.0, 0.0, 0.0], [-0.113638192, 0.0, 0.0, 0.0], [-0.136576951, 0.0, 0.0, 0.0], [0.0282543246, 0.0, 0.0, 0.0], [0.162317559, 0.0, 0.0, 0.0], [0.00134028797, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_255(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.415499985, 1.0, 2.0, 4.0], [0.64349997, 3.0, 4.0, 0.0], [-0.404500008, 5.0, 6.0, 4.0], [-0.412499994, 7.0, 8.0, 1.0], [-0.081707105, 0.0, 0.0, 0.0], [-0.173033163, 0.0, 0.0, 0.0], [-0.377499998, 9.0, 10.0, 4.0], [0.172506392, 0.0, 0.0, 0.0], [-0.028925145, 0.0, 0.0, 0.0], [-0.755499959, 11.0, 12.0, 2.0], [-0.761500001, 13.0, 14.0, 5.0], [0.139394656, 0.0, 0.0, 0.0], [0.0187763888, 0.0, 0.0, 0.0], [-0.1062176, 0.0, 0.0, 0.0], [0.00678962888, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 4, 5, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_256(xs):
    #Predicts Class 1
    function_dict = np.array([[0.543500006, 1.0, 2.0, 0.0], [0.533499956, 3.0, 4.0, 0.0], [0.584499955, 5.0, 6.0, 0.0], [-0.415499985, 7.0, 8.0, 4.0], [0.169817865, 0.0, 0.0, 0.0], [0.244500011, 9.0, 10.0, 6.0], [0.181499988, 11.0, 12.0, 6.0], [-0.132606387, 0.0, 0.0, 0.0], [-0.7245, 13.0, 14.0, 5.0], [-0.212331623, 0.0, 0.0, 0.0], [-0.300499976, 15.0, 16.0, 4.0], [-0.110202372, 0.0, 0.0, 0.0], [0.237500012, 17.0, 18.0, 6.0], [0.0846840963, 0.0, 0.0, 0.0], [-0.0178705081, 0.0, 0.0, 0.0], [-0.0855782032, 0.0, 0.0, 0.0], [0.134430453, 0.0, 0.0, 0.0], [0.145610675, 0.0, 0.0, 0.0], [-0.0206953473, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 4, 9, 15, 16, 11, 17, 18])
    branch_indices = np.array([0, 1, 3, 8, 2, 5, 10, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_257(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.455500007, 1.0, 2.0, 1.0], [-0.0883029103, 0.0, 0.0, 0.0], [0.543500006, 3.0, 4.0, 0.0], [0.514500022, 5.0, 6.0, 0.0], [0.585500002, 7.0, 8.0, 0.0], [-0.91050005, 9.0, 10.0, 3.0], [-0.886500001, 11.0, 12.0, 3.0], [0.243000001, 13.0, 14.0, 6.0], [-0.909999967, 15.0, 16.0, 3.0], [0.0668157712, 0.0, 0.0, 0.0], [-0.0261014495, 0.0, 0.0, 0.0], [-0.150051922, 0.0, 0.0, 0.0], [-0.00581327779, 0.0, 0.0, 0.0], [0.199255019, 0.0, 0.0, 0.0], [-0.00403223792, 0.0, 0.0, 0.0], [-0.130315691, 0.0, 0.0, 0.0], [0.0948199704, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_258(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.980499983, 1.0, 2.0, 4.0], [0.0398999974, 3.0, 4.0, 6.0], [-0.976500034, 5.0, 6.0, 4.0], [-0.035149999, 7.0, 8.0, 6.0], [-0.982499957, 9.0, 10.0, 4.0], [-0.999500036, 11.0, 12.0, 5.0], [-0.999500036, 13.0, 14.0, 5.0], [-0.127662882, 0.0, 0.0, 0.0], [0.304608732, 0.0, 0.0, 0.0], [0.100500003, 15.0, 16.0, 6.0], [0.150999993, 17.0, 18.0, 6.0], [0.155999988, 19.0, 20.0, 6.0], [-0.164598554, 0.0, 0.0, 0.0], [0.983500004, 21.0, 22.0, 0.0], [0.100500003, 23.0, 24.0, 6.0], [-0.0997828245, 0.0, 0.0, 0.0], [0.025620278, 0.0, 0.0, 0.0], [-0.324344099, 0.0, 0.0, 0.0], [0.130899712, 0.0, 0.0, 0.0], [0.33733058, 0.0, 0.0, 0.0], [-0.0520798862, 0.0, 0.0, 0.0], [-0.269296408, 0.0, 0.0, 0.0], [-0.0662433654, 0.0, 0.0, 0.0], [0.0590377375, 0.0, 0.0, 0.0], [-0.0302515961, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 15, 16, 17, 18, 19, 20, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_259(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.980499983, 1.0, 2.0, 4.0], [0.0398999974, 3.0, 4.0, 6.0], [-0.976500034, 5.0, 6.0, 4.0], [-0.035149999, 7.0, 8.0, 6.0], [-0.982499957, 9.0, 10.0, 4.0], [-0.999500036, 11.0, 12.0, 5.0], [-0.999500036, 13.0, 14.0, 5.0], [0.132328644, 0.0, 0.0, 0.0], [-0.30384165, 0.0, 0.0, 0.0], [0.100500003, 15.0, 16.0, 6.0], [0.150999993, 17.0, 18.0, 6.0], [0.155999988, 19.0, 20.0, 6.0], [0.165270537, 0.0, 0.0, 0.0], [0.983500004, 21.0, 22.0, 0.0], [0.100500003, 23.0, 24.0, 6.0], [0.100471072, 0.0, 0.0, 0.0], [-0.0246765856, 0.0, 0.0, 0.0], [0.324994981, 0.0, 0.0, 0.0], [-0.130080536, 0.0, 0.0, 0.0], [-0.336941719, 0.0, 0.0, 0.0], [0.0529881008, 0.0, 0.0, 0.0], [0.269716948, 0.0, 0.0, 0.0], [0.0669223145, 0.0, 0.0, 0.0], [-0.0585463531, 0.0, 0.0, 0.0], [0.030058613, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 15, 16, 17, 18, 19, 20, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_260(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.537500024, 1.0, 2.0, 1.0], [0.221500009, 3.0, 4.0, 6.0], [-0.249500006, 5.0, 6.0, 4.0], [-0.140696198, 0.0, 0.0, 0.0], [-0.581499994, 7.0, 8.0, 1.0], [-0.629999995, 9.0, 10.0, 2.0], [-0.831499994, 11.0, 12.0, 3.0], [0.073998943, 0.0, 0.0, 0.0], [-0.0690618753, 0.0, 0.0, 0.0], [-0.694499969, 13.0, 14.0, 2.0], [-0.113301851, 0.0, 0.0, 0.0], [0.217500001, 15.0, 16.0, 6.0], [-0.788499951, 17.0, 18.0, 3.0], [0.0256535523, 0.0, 0.0, 0.0], [0.20706819, 0.0, 0.0, 0.0], [0.0474580079, 0.0, 0.0, 0.0], [-0.176388294, 0.0, 0.0, 0.0], [0.132433474, 0.0, 0.0, 0.0], [-0.0374175683, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 13, 14, 10, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 4, 2, 5, 9, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_261(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.658499956, 1.0, 2.0, 2.0], [-0.694499969, 3.0, 4.0, 2.0], [-0.0238500014, 5.0, 6.0, 4.0], [-0.702499986, 7.0, 8.0, 5.0], [-0.854499996, 9.0, 10.0, 3.0], [0.227499992, 11.0, 12.0, 6.0], [0.2315, 13.0, 14.0, 6.0], [-0.261500001, 15.0, 16.0, 4.0], [-0.683500051, 17.0, 18.0, 5.0], [-0.201086074, 0.0, 0.0, 0.0], [0.0291982852, 0.0, 0.0, 0.0], [-0.138500005, 19.0, 20.0, 1.0], [-0.70449996, 21.0, 22.0, 5.0], [-0.159500003, 23.0, 24.0, 1.0], [-0.741999984, 25.0, 26.0, 3.0], [-0.00666747196, 0.0, 0.0, 0.0], [0.167680964, 0.0, 0.0, 0.0], [-0.167931825, 0.0, 0.0, 0.0], [-0.0165293124, 0.0, 0.0, 0.0], [-0.118386343, 0.0, 0.0, 0.0], [0.0512375571, 0.0, 0.0, 0.0], [-0.086846225, 0.0, 0.0, 0.0], [0.142280236, 0.0, 0.0, 0.0], [0.153106809, 0.0, 0.0, 0.0], [-0.0720401332, 0.0, 0.0, 0.0], [-0.133082047, 0.0, 0.0, 0.0], [0.0275919568, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_262(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.805500031, 1.0, 2.0, 2.0], [-0.11075788, 0.0, 0.0, 0.0], [-0.733500004, 3.0, 4.0, 2.0], [0.2465, 5.0, 6.0, 6.0], [-0.471000016, 7.0, 8.0, 2.0], [0.220499992, 9.0, 10.0, 6.0], [-0.0546048246, 0.0, 0.0, 0.0], [0.229499996, 11.0, 12.0, 6.0], [0.392499983, 13.0, 14.0, 0.0], [-0.0152301285, 0.0, 0.0, 0.0], [0.197350472, 0.0, 0.0, 0.0], [0.0264685992, 0.0, 0.0, 0.0], [-0.0778686181, 0.0, 0.0, 0.0], [-0.0332299657, 0.0, 0.0, 0.0], [0.131627008, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 6, 11, 12, 13, 14])
    branch_indices = np.array([0, 2, 3, 5, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_263(xs):
    #Predicts Class 3
    function_dict = np.array([[0.0458000004, 1.0, 2.0, 6.0], [-0.993499994, 3.0, 4.0, 1.0], [0.057099998, 5.0, 6.0, 6.0], [-0.995499969, 7.0, 8.0, 1.0], [-0.91049999, 9.0, 10.0, 4.0], [0.278958529, 0.0, 0.0, 0.0], [0.0586500019, 11.0, 12.0, 6.0], [0.0419500023, 13.0, 14.0, 6.0], [-0.262451559, 0.0, 0.0, 0.0], [0.237411767, 0.0, 0.0, 0.0], [-0.1303747, 0.0, 0.0, 0.0], [-0.215237901, 0.0, 0.0, 0.0], [0.0638500005, 15.0, 16.0, 6.0], [0.0601567067, 0.0, 0.0, 0.0], [-0.169645146, 0.0, 0.0, 0.0], [0.26721403, 0.0, 0.0, 0.0], [-0.00120860257, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 5, 11, 15, 16])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_264(xs):
    #Predicts Class 4
    function_dict = np.array([[0.0458000004, 1.0, 2.0, 6.0], [-0.993499994, 3.0, 4.0, 1.0], [0.057099998, 5.0, 6.0, 6.0], [-0.995499969, 7.0, 8.0, 1.0], [-0.91049999, 9.0, 10.0, 4.0], [-0.285480261, 0.0, 0.0, 0.0], [0.0586500019, 11.0, 12.0, 6.0], [0.0419500023, 13.0, 14.0, 6.0], [0.263705581, 0.0, 0.0, 0.0], [-0.235967413, 0.0, 0.0, 0.0], [0.133374497, 0.0, 0.0, 0.0], [0.215429753, 0.0, 0.0, 0.0], [0.0638500005, 15.0, 16.0, 6.0], [-0.0577236675, 0.0, 0.0, 0.0], [0.170462698, 0.0, 0.0, 0.0], [-0.267612338, 0.0, 0.0, 0.0], [0.001679298, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 5, 11, 15, 16])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_265(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.537500024, 1.0, 2.0, 1.0], [-0.43900001, 3.0, 4.0, 4.0], [-0.471499979, 5.0, 6.0, 1.0], [0.0281418636, 0.0, 0.0, 0.0], [0.383000016, 7.0, 8.0, 0.0], [0.250499994, 9.0, 10.0, 6.0], [-0.448500007, 11.0, 12.0, 1.0], [-0.018282, 0.0, 0.0, 0.0], [-0.145974204, 0.0, 0.0, 0.0], [0.207717568, 0.0, 0.0, 0.0], [-0.899500012, 13.0, 14.0, 3.0], [-0.128178895, 0.0, 0.0, 0.0], [0.250499994, 15.0, 16.0, 6.0], [0.0486481078, 0.0, 0.0, 0.0], [-0.125349119, 0.0, 0.0, 0.0], [-0.0345060639, 0.0, 0.0, 0.0], [0.0465060659, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 13, 14, 11, 15, 16])
    branch_indices = np.array([0, 1, 4, 2, 5, 10, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_266(xs):
    #Predicts Class 1
    function_dict = np.array([[0.0451999977, 1.0, 2.0, 6.0], [0.109589942, 0.0, 0.0, 0.0], [0.290499985, 3.0, 4.0, 6.0], [-0.767500043, 5.0, 6.0, 3.0], [0.328500003, 7.0, 8.0, 6.0], [-0.784500003, 9.0, 10.0, 3.0], [0.264499992, 11.0, 12.0, 6.0], [0.358500004, 13.0, 14.0, 0.0], [-0.702499986, 15.0, 16.0, 2.0], [-0.0144107156, 0.0, 0.0, 0.0], [0.130711257, 0.0, 0.0, 0.0], [0.00141821301, 0.0, 0.0, 0.0], [-0.212963879, 0.0, 0.0, 0.0], [0.0239319168, 0.0, 0.0, 0.0], [0.222560525, 0.0, 0.0, 0.0], [-0.103897244, 0.0, 0.0, 0.0], [0.0641256049, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_267(xs):
    #Predicts Class 2
    function_dict = np.array([[0.301499993, 1.0, 2.0, 6.0], [0.280499995, 3.0, 4.0, 6.0], [-0.101288632, 0.0, 0.0, 0.0], [-0.371500015, 5.0, 6.0, 2.0], [0.141432852, 0.0, 0.0, 0.0], [0.220499992, 7.0, 8.0, 6.0], [0.1060808, 0.0, 0.0, 0.0], [-0.0485634841, 0.0, 0.0, 0.0], [0.015356143, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 6, 4, 2])
    branch_indices = np.array([0, 1, 3, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_268(xs):
    #Predicts Class 3
    function_dict = np.array([[0.33950001, 1.0, 2.0, 6.0], [0.932500005, 3.0, 4.0, 0.0], [0.106525354, 0.0, 0.0, 0.0], [-0.896499991, 5.0, 6.0, 4.0], [-0.933500051, 7.0, 8.0, 4.0], [0.104499996, 9.0, 10.0, 6.0], [-0.710999966, 11.0, 12.0, 4.0], [-0.936499953, 13.0, 14.0, 4.0], [-0.990499973, 15.0, 16.0, 5.0], [-0.230963796, 0.0, 0.0, 0.0], [-0.0050893412, 0.0, 0.0, 0.0], [0.120006025, 0.0, 0.0, 0.0], [-0.148957059, 0.0, 0.0, 0.0], [-0.000169192528, 0.0, 0.0, 0.0], [-0.19611527, 0.0, 0.0, 0.0], [0.141158983, 0.0, 0.0, 0.0], [-0.0251692776, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_269(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.971500039, 1.0, 2.0, 1.0], [-0.999500036, 3.0, 4.0, 2.0], [-0.99849999, 5.0, 6.0, 2.0], [-0.996500015, 7.0, 8.0, 3.0], [0.184658512, 0.0, 0.0, 0.0], [-0.17532821, 0.0, 0.0, 0.0], [-0.751999974, 9.0, 10.0, 4.0], [-0.933500051, 11.0, 12.0, 4.0], [0.151590586, 0.0, 0.0, 0.0], [0.102886342, 0.0, 0.0, 0.0], [-0.993499994, 13.0, 14.0, 3.0], [0.00243682135, 0.0, 0.0, 0.0], [-0.094640255, 0.0, 0.0, 0.0], [0.0367715508, 0.0, 0.0, 0.0], [-0.143685907, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 4, 5, 9, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 2, 6, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_270(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.587499976, 1.0, 2.0, 5.0], [0.327499986, 3.0, 4.0, 0.0], [-0.715000033, 5.0, 6.0, 3.0], [0.2685, 7.0, 8.0, 6.0], [-0.787, 9.0, 10.0, 3.0], [-0.103905573, 0.0, 0.0, 0.0], [-0.00148596102, 0.0, 0.0, 0.0], [-0.456499994, 11.0, 12.0, 1.0], [0.284500003, 13.0, 14.0, 6.0], [-0.808500051, 15.0, 16.0, 3.0], [0.434499979, 17.0, 18.0, 0.0], [0.0029406664, 0.0, 0.0, 0.0], [0.160155877, 0.0, 0.0, 0.0], [-0.102244616, 0.0, 0.0, 0.0], [0.0541558601, 0.0, 0.0, 0.0], [-0.0172897577, 0.0, 0.0, 0.0], [0.126561657, 0.0, 0.0, 0.0], [-0.163166299, 0.0, 0.0, 0.0], [-0.021488579, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 15, 16, 17, 18, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_271(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.418500006, 1.0, 2.0, 1.0], [-0.815500021, 3.0, 4.0, 3.0], [-0.405499995, 5.0, 6.0, 1.0], [0.281499982, 7.0, 8.0, 6.0], [-0.470499992, 9.0, 10.0, 1.0], [0.2465, 11.0, 12.0, 6.0], [-0.771499991, 13.0, 14.0, 2.0], [-0.95449996, 15.0, 16.0, 3.0], [-0.773000002, 17.0, 18.0, 5.0], [0.144034997, 0.0, 0.0, 0.0], [-0.0371220596, 0.0, 0.0, 0.0], [0.207245439, 0.0, 0.0, 0.0], [-0.0201373212, 0.0, 0.0, 0.0], [0.49150002, 19.0, 20.0, 0.0], [-0.738499999, 21.0, 22.0, 2.0], [0.0249309633, 0.0, 0.0, 0.0], [-0.145959154, 0.0, 0.0, 0.0], [0.136250168, 0.0, 0.0, 0.0], [-0.0373591632, 0.0, 0.0, 0.0], [-0.202346832, 0.0, 0.0, 0.0], [-0.00641008047, 0.0, 0.0, 0.0], [0.150975257, 0.0, 0.0, 0.0], [-0.000204310563, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 11, 12, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_272(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.262499988, 1.0, 2.0, 4.0], [0.168500006, 3.0, 4.0, 6.0], [-0.227499992, 5.0, 6.0, 4.0], [0.071191445, 0.0, 0.0, 0.0], [0.561500013, 7.0, 8.0, 0.0], [0.235500008, 9.0, 10.0, 6.0], [-0.788499951, 11.0, 12.0, 3.0], [-0.16801627, 0.0, 0.0, 0.0], [-0.0201178174, 0.0, 0.0, 0.0], [0.142380893, 0.0, 0.0, 0.0], [0.00946422666, 0.0, 0.0, 0.0], [-0.526000023, 13.0, 14.0, 5.0], [-0.513000011, 15.0, 16.0, 5.0], [-0.0680202246, 0.0, 0.0, 0.0], [0.0621404611, 0.0, 0.0, 0.0], [0.121389359, 0.0, 0.0, 0.0], [-0.0457972959, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 4, 2, 5, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_273(xs):
    #Predicts Class 3
    function_dict = np.array([[0.990499973, 1.0, 2.0, 0.0], [0.0986000001, 3.0, 4.0, 6.0], [0.0978499949, 5.0, 6.0, 6.0], [0.095449999, 7.0, 8.0, 6.0], [0.100500003, 9.0, 10.0, 6.0], [0.0433499999, 11.0, 12.0, 6.0], [-0.972499967, 13.0, 14.0, 4.0], [-0.999500036, 15.0, 16.0, 3.0], [-0.956499994, 17.0, 18.0, 4.0], [0.343173623, 0.0, 0.0, 0.0], [0.103500001, 19.0, 20.0, 6.0], [-0.98150003, 21.0, 22.0, 4.0], [-0.99849999, 23.0, 24.0, 1.0], [-0.983500004, 25.0, 26.0, 4.0], [0.150999993, 27.0, 28.0, 6.0], [0.0651464015, 0.0, 0.0, 0.0], [-0.119221501, 0.0, 0.0, 0.0], [-0.382452935, 0.0, 0.0, 0.0], [-0.0731611922, 0.0, 0.0, 0.0], [-0.302755624, 0.0, 0.0, 0.0], [0.0109455995, 0.0, 0.0, 0.0], [-0.0116345342, 0.0, 0.0, 0.0], [-0.139025137, 0.0, 0.0, 0.0], [0.0129019506, 0.0, 0.0, 0.0], [0.294265926, 0.0, 0.0, 0.0], [-0.062706545, 0.0, 0.0, 0.0], [0.191776201, 0.0, 0.0, 0.0], [-0.383030862, 0.0, 0.0, 0.0], [-0.0505354442, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_274(xs):
    #Predicts Class 4
    function_dict = np.array([[0.990499973, 1.0, 2.0, 0.0], [0.0986000001, 3.0, 4.0, 6.0], [0.0978499949, 5.0, 6.0, 6.0], [0.095449999, 7.0, 8.0, 6.0], [0.100500003, 9.0, 10.0, 6.0], [0.0433499999, 11.0, 12.0, 6.0], [-0.972499967, 13.0, 14.0, 4.0], [-0.999500036, 15.0, 16.0, 3.0], [-0.956499994, 17.0, 18.0, 4.0], [-0.342883199, 0.0, 0.0, 0.0], [0.103500001, 19.0, 20.0, 6.0], [-0.98150003, 21.0, 22.0, 4.0], [-0.99849999, 23.0, 24.0, 1.0], [-0.983500004, 25.0, 26.0, 4.0], [0.150999993, 27.0, 28.0, 6.0], [-0.0641201511, 0.0, 0.0, 0.0], [0.120533809, 0.0, 0.0, 0.0], [0.382652223, 0.0, 0.0, 0.0], [0.0736768171, 0.0, 0.0, 0.0], [0.302993596, 0.0, 0.0, 0.0], [-0.0107710706, 0.0, 0.0, 0.0], [0.0149810053, 0.0, 0.0, 0.0], [0.140088409, 0.0, 0.0, 0.0], [-0.0125536621, 0.0, 0.0, 0.0], [-0.293944091, 0.0, 0.0, 0.0], [0.0636566654, 0.0, 0.0, 0.0], [-0.191002801, 0.0, 0.0, 0.0], [0.383166909, 0.0, 0.0, 0.0], [0.051403638, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_275(xs):
    #Predicts Class 0
    function_dict = np.array([[0.647500038, 1.0, 2.0, 0.0], [-0.811499953, 3.0, 4.0, 2.0], [-0.0819176063, 0.0, 0.0, 0.0], [0.229499996, 5.0, 6.0, 6.0], [-0.791499972, 7.0, 8.0, 2.0], [-0.0101908147, 0.0, 0.0, 0.0], [0.290499985, 9.0, 10.0, 6.0], [-0.799499989, 11.0, 12.0, 2.0], [0.245499998, 13.0, 14.0, 6.0], [0.19561857, 0.0, 0.0, 0.0], [-0.0146882795, 0.0, 0.0, 0.0], [0.0137489187, 0.0, 0.0, 0.0], [-0.175508454, 0.0, 0.0, 0.0], [0.0402424745, 0.0, 0.0, 0.0], [-0.0302581489, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 9, 10, 11, 12, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_276(xs):
    #Predicts Class 1
    function_dict = np.array([[0.00729500037, 1.0, 2.0, 0.0], [-0.0812097415, 0.0, 0.0, 0.0], [-0.880499959, 3.0, 4.0, 3.0], [-0.282499999, 5.0, 6.0, 1.0], [-0.871500015, 7.0, 8.0, 3.0], [-0.380500019, 9.0, 10.0, 1.0], [-0.901499987, 11.0, 12.0, 3.0], [0.17517671, 0.0, 0.0, 0.0], [0.301499993, 13.0, 14.0, 6.0], [-0.00140205969, 0.0, 0.0, 0.0], [-0.11706797, 0.0, 0.0, 0.0], [0.0737324283, 0.0, 0.0, 0.0], [-0.0923415422, 0.0, 0.0, 0.0], [-0.00902180281, 0.0, 0.0, 0.0], [0.125017852, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 7, 13, 14])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_277(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.368499994, 1.0, 2.0, 4.0], [-0.0792920515, 0.0, 0.0, 0.0], [-0.184500009, 3.0, 4.0, 1.0], [-0.226500005, 5.0, 6.0, 1.0], [-0.547500014, 7.0, 8.0, 2.0], [-0.655499995, 9.0, 10.0, 2.0], [-0.865499973, 11.0, 12.0, 3.0], [0.370499998, 13.0, 14.0, 0.0], [0.472499996, 15.0, 16.0, 0.0], [0.0501980558, 0.0, 0.0, 0.0], [-0.0775662661, 0.0, 0.0, 0.0], [-0.00462807482, 0.0, 0.0, 0.0], [0.199143052, 0.0, 0.0, 0.0], [0.00141580333, 0.0, 0.0, 0.0], [-0.174864992, 0.0, 0.0, 0.0], [-0.0279207211, 0.0, 0.0, 0.0], [0.128103405, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_278(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.968500018, 1.0, 2.0, 4.0], [-0.989500046, 3.0, 4.0, 4.0], [-0.966500044, 5.0, 6.0, 4.0], [0.990499973, 7.0, 8.0, 0.0], [-0.99849999, 9.0, 10.0, 1.0], [0.213760868, 0.0, 0.0, 0.0], [0.0823500007, 11.0, 12.0, 6.0], [0.1655, 13.0, 14.0, 6.0], [0.168500006, 15.0, 16.0, 6.0], [-0.985499978, 17.0, 18.0, 4.0], [0.985499978, 19.0, 20.0, 0.0], [0.0665000007, 21.0, 22.0, 6.0], [0.180500001, 23.0, 24.0, 6.0], [0.0839170516, 0.0, 0.0, 0.0], [-0.275258243, 0.0, 0.0, 0.0], [0.0171795543, 0.0, 0.0, 0.0], [0.189300686, 0.0, 0.0, 0.0], [-0.138375923, 0.0, 0.0, 0.0], [0.195916355, 0.0, 0.0, 0.0], [0.0207550656, 0.0, 0.0, 0.0], [-0.0859303996, 0.0, 0.0, 0.0], [-0.0053047454, 0.0, 0.0, 0.0], [0.236694574, 0.0, 0.0, 0.0], [-0.0522165187, 0.0, 0.0, 0.0], [0.0588073023, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_279(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.968500018, 1.0, 2.0, 4.0], [-0.989500046, 3.0, 4.0, 4.0], [-0.966500044, 5.0, 6.0, 4.0], [0.990499973, 7.0, 8.0, 0.0], [-0.99849999, 9.0, 10.0, 1.0], [-0.213299811, 0.0, 0.0, 0.0], [0.0830000043, 11.0, 12.0, 6.0], [0.1655, 13.0, 14.0, 6.0], [0.168500006, 15.0, 16.0, 6.0], [-0.985499978, 17.0, 18.0, 4.0], [0.985499978, 19.0, 20.0, 0.0], [0.0665000007, 21.0, 22.0, 6.0], [0.180500001, 23.0, 24.0, 6.0], [-0.0833012611, 0.0, 0.0, 0.0], [0.275607884, 0.0, 0.0, 0.0], [-0.016161127, 0.0, 0.0, 0.0], [-0.188071176, 0.0, 0.0, 0.0], [0.138910785, 0.0, 0.0, 0.0], [-0.19543834, 0.0, 0.0, 0.0], [-0.0198333077, 0.0, 0.0, 0.0], [0.0868964791, 0.0, 0.0, 0.0], [0.00703419605, 0.0, 0.0, 0.0], [-0.236588299, 0.0, 0.0, 0.0], [0.0530818701, 0.0, 0.0, 0.0], [-0.0613208227, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_280(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.342500001, 1.0, 2.0, 1.0], [-0.358500004, 3.0, 4.0, 1.0], [-0.305500001, 5.0, 6.0, 1.0], [-0.754500031, 7.0, 8.0, 5.0], [0.134024918, 0.0, 0.0, 0.0], [-0.261500001, 9.0, 10.0, 4.0], [-0.894500017, 11.0, 12.0, 3.0], [-0.767500043, 13.0, 14.0, 5.0], [-0.747500002, 15.0, 16.0, 2.0], [-0.0335515402, 0.0, 0.0, 0.0], [-0.192518979, 0.0, 0.0, 0.0], [-0.113858081, 0.0, 0.0, 0.0], [-0.676499963, 17.0, 18.0, 2.0], [0.0122196572, 0.0, 0.0, 0.0], [-0.179154724, 0.0, 0.0, 0.0], [0.137415677, 0.0, 0.0, 0.0], [-0.0645967647, 0.0, 0.0, 0.0], [0.152105018, 0.0, 0.0, 0.0], [-0.00234734779, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 9, 10, 11, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_281(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.841500044, 1.0, 2.0, 2.0], [-0.084674038, 0.0, 0.0, 0.0], [0.0451999977, 3.0, 4.0, 6.0], [0.126636326, 0.0, 0.0, 0.0], [0.195499986, 5.0, 6.0, 6.0], [-0.924499989, 7.0, 8.0, 3.0], [0.471499979, 9.0, 10.0, 0.0], [0.0339045078, 0.0, 0.0, 0.0], [-0.208572999, 0.0, 0.0, 0.0], [-0.01563989, 0.0, 0.0, 0.0], [0.0418847501, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_282(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.338499993, 1.0, 2.0, 1.0], [-0.591500044, 3.0, 4.0, 5.0], [-0.0626500025, 5.0, 6.0, 4.0], [-0.792500019, 7.0, 8.0, 2.0], [0.0825054199, 0.0, 0.0, 0.0], [-0.122500002, 9.0, 10.0, 4.0], [0.25849998, 11.0, 12.0, 6.0], [0.031019263, 0.0, 0.0, 0.0], [-0.418500006, 13.0, 14.0, 1.0], [-0.311500013, 15.0, 16.0, 1.0], [-0.192000002, 17.0, 18.0, 1.0], [0.37349999, 19.0, 20.0, 0.0], [0.253000021, 21.0, 22.0, 0.0], [-0.0244045164, 0.0, 0.0, 0.0], [-0.167815447, 0.0, 0.0, 0.0], [0.125097975, 0.0, 0.0, 0.0], [-0.0267035607, 0.0, 0.0, 0.0], [0.200612471, 0.0, 0.0, 0.0], [0.0214285236, 0.0, 0.0, 0.0], [0.0616216622, 0.0, 0.0, 0.0], [-0.12503919, 0.0, 0.0, 0.0], [-0.0506532416, 0.0, 0.0, 0.0], [0.131089911, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 4, 15, 16, 17, 18, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 8, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_283(xs):
    #Predicts Class 3
    function_dict = np.array([[0.139499992, 1.0, 2.0, 6.0], [0.0869500041, 3.0, 4.0, 6.0], [0.1505, 5.0, 6.0, 6.0], [0.0638500005, 7.0, 8.0, 6.0], [0.0940499976, 9.0, 10.0, 6.0], [-0.970000029, 11.0, 12.0, 4.0], [0.151499987, 13.0, 14.0, 6.0], [-0.999500036, 15.0, 16.0, 3.0], [-0.973500013, 17.0, 18.0, 4.0], [-0.990999997, 19.0, 20.0, 1.0], [0.0957500041, 21.0, 22.0, 6.0], [-0.306829423, 0.0, 0.0, 0.0], [0.112944059, 0.0, 0.0, 0.0], [0.18515861, 0.0, 0.0, 0.0], [0.987499952, 23.0, 24.0, 0.0], [0.0948186666, 0.0, 0.0, 0.0], [-0.0267498177, 0.0, 0.0, 0.0], [-0.187380895, 0.0, 0.0, 0.0], [0.0281600133, 0.0, 0.0, 0.0], [0.334505767, 0.0, 0.0, 0.0], [-0.0077606393, 0.0, 0.0, 0.0], [-0.138161883, 0.0, 0.0, 0.0], [0.060257256, 0.0, 0.0, 0.0], [-0.0756186172, 0.0, 0.0, 0.0], [0.0204157569, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 11, 12, 13, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_284(xs):
    #Predicts Class 4
    function_dict = np.array([[0.139499992, 1.0, 2.0, 6.0], [0.0869500041, 3.0, 4.0, 6.0], [0.1505, 5.0, 6.0, 6.0], [0.0638500005, 7.0, 8.0, 6.0], [0.0940499976, 9.0, 10.0, 6.0], [-0.970000029, 11.0, 12.0, 4.0], [0.151499987, 13.0, 14.0, 6.0], [-0.999500036, 15.0, 16.0, 3.0], [-0.973500013, 17.0, 18.0, 4.0], [-0.990999997, 19.0, 20.0, 1.0], [0.0957500041, 21.0, 22.0, 6.0], [0.307039648, 0.0, 0.0, 0.0], [-0.113849074, 0.0, 0.0, 0.0], [-0.185013622, 0.0, 0.0, 0.0], [0.987499952, 23.0, 24.0, 0.0], [-0.092772074, 0.0, 0.0, 0.0], [0.0283315424, 0.0, 0.0, 0.0], [0.187726542, 0.0, 0.0, 0.0], [-0.0278706197, 0.0, 0.0, 0.0], [-0.334354103, 0.0, 0.0, 0.0], [0.0081999097, 0.0, 0.0, 0.0], [0.138547048, 0.0, 0.0, 0.0], [-0.0594509952, 0.0, 0.0, 0.0], [0.0745633096, 0.0, 0.0, 0.0], [-0.0194247998, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 11, 12, 13, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_285(xs):
    #Predicts Class 0
    function_dict = np.array([[0.0939500034, 1.0, 2.0, 0.0], [-0.324000001, 3.0, 4.0, 1.0], [-0.325500011, 5.0, 6.0, 4.0], [0.116478927, 0.0, 0.0, 0.0], [-0.0143106384, 0.0, 0.0, 0.0], [0.402500004, 7.0, 8.0, 0.0], [-0.761500001, 9.0, 10.0, 5.0], [-0.782500029, 11.0, 12.0, 5.0], [-0.782500029, 13.0, 14.0, 5.0], [-0.146246299, 0.0, 0.0, 0.0], [-0.519000053, 15.0, 16.0, 1.0], [0.183691368, 0.0, 0.0, 0.0], [0.0230703596, 0.0, 0.0, 0.0], [-0.0667777732, 0.0, 0.0, 0.0], [0.0882640406, 0.0, 0.0, 0.0], [-0.129818156, 0.0, 0.0, 0.0], [0.00698284432, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 13, 14, 9, 15, 16])
    branch_indices = np.array([0, 1, 2, 5, 7, 8, 6, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_286(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.601500034, 1.0, 2.0, 3.0], [-0.696500003, 3.0, 4.0, 3.0], [0.0798435509, 0.0, 0.0, 0.0], [-0.00151500001, 5.0, 6.0, 1.0], [-0.125613675, 0.0, 0.0, 0.0], [-0.17050001, 7.0, 8.0, 1.0], [0.0626000017, 9.0, 10.0, 1.0], [-0.0100665139, 0.0, 0.0, 0.0], [0.0877830386, 0.0, 0.0, 0.0], [-0.163192138, 0.0, 0.0, 0.0], [0.0222934633, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 4, 2])
    branch_indices = np.array([0, 1, 3, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_287(xs):
    #Predicts Class 2
    function_dict = np.array([[0.304499984, 1.0, 2.0, 6.0], [-0.00662000012, 3.0, 4.0, 4.0], [-0.0815226659, 0.0, 0.0, 0.0], [0.297500014, 5.0, 6.0, 0.0], [0.430500001, 7.0, 8.0, 0.0], [-0.0771500021, 9.0, 10.0, 1.0], [-0.237000003, 11.0, 12.0, 1.0], [0.2315, 13.0, 14.0, 6.0], [-0.87650001, 15.0, 16.0, 3.0], [0.0166368149, 0.0, 0.0, 0.0], [-0.207839608, 0.0, 0.0, 0.0], [-0.0348370597, 0.0, 0.0, 0.0], [0.0933331028, 0.0, 0.0, 0.0], [0.0311255641, 0.0, 0.0, 0.0], [0.169149637, 0.0, 0.0, 0.0], [0.0615688935, 0.0, 0.0, 0.0], [-0.0706842169, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_288(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.992499948, 1.0, 2.0, 4.0], [0.104499996, 3.0, 4.0, 6.0], [-0.984500051, 5.0, 6.0, 4.0], [0.101500005, 7.0, 8.0, 6.0], [0.993499994, 9.0, 10.0, 0.0], [0.0819000006, 11.0, 12.0, 6.0], [-0.996500015, 13.0, 14.0, 1.0], [0.990499973, 15.0, 16.0, 0.0], [-0.319165587, 0.0, 0.0, 0.0], [0.99150002, 17.0, 18.0, 0.0], [-0.994500041, 19.0, 20.0, 4.0], [0.0702500045, 21.0, 22.0, 6.0], [0.100500003, 23.0, 24.0, 6.0], [0.988499999, 25.0, 26.0, 0.0], [0.157499999, 27.0, 28.0, 6.0], [-0.290581703, 0.0, 0.0, 0.0], [0.113669232, 0.0, 0.0, 0.0], [-0.0225685406, 0.0, 0.0, 0.0], [-0.162004307, 0.0, 0.0, 0.0], [-0.0601331927, 0.0, 0.0, 0.0], [0.246634096, 0.0, 0.0, 0.0], [-0.00533928163, 0.0, 0.0, 0.0], [0.435630888, 0.0, 0.0, 0.0], [-0.200074121, 0.0, 0.0, 0.0], [0.0681992322, 0.0, 0.0, 0.0], [0.0104094213, 0.0, 0.0, 0.0], [-0.133990303, 0.0, 0.0, 0.0], [-0.00888969284, 0.0, 0.0, 0.0], [0.0614579096, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_289(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.992499948, 1.0, 2.0, 4.0], [0.104499996, 3.0, 4.0, 6.0], [-0.984500051, 5.0, 6.0, 4.0], [0.101500005, 7.0, 8.0, 6.0], [0.993499994, 9.0, 10.0, 0.0], [0.0819000006, 11.0, 12.0, 6.0], [-0.996500015, 13.0, 14.0, 1.0], [0.990499973, 15.0, 16.0, 0.0], [0.319357514, 0.0, 0.0, 0.0], [0.99150002, 17.0, 18.0, 0.0], [-0.994500041, 19.0, 20.0, 4.0], [0.0702500045, 21.0, 22.0, 6.0], [0.100500003, 23.0, 24.0, 6.0], [0.988499999, 25.0, 26.0, 0.0], [0.157499999, 27.0, 28.0, 6.0], [0.291107267, 0.0, 0.0, 0.0], [-0.112708986, 0.0, 0.0, 0.0], [0.0231360663, 0.0, 0.0, 0.0], [0.162597075, 0.0, 0.0, 0.0], [0.0613559037, 0.0, 0.0, 0.0], [-0.245956704, 0.0, 0.0, 0.0], [0.00760642253, 0.0, 0.0, 0.0], [-0.435521096, 0.0, 0.0, 0.0], [0.200350568, 0.0, 0.0, 0.0], [-0.0674522817, 0.0, 0.0, 0.0], [-0.00955481082, 0.0, 0.0, 0.0], [0.134640127, 0.0, 0.0, 0.0], [0.0100673838, 0.0, 0.0, 0.0], [-0.0631639585, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_290(xs):
    #Predicts Class 0
    function_dict = np.array([[0.21450001, 1.0, 2.0, 6.0], [-0.706499994, 3.0, 4.0, 2.0], [0.2315, 5.0, 6.0, 6.0], [-0.468500018, 7.0, 8.0, 1.0], [-0.631500006, 9.0, 10.0, 5.0], [-0.135100648, 0.0, 0.0, 0.0], [0.455500007, 11.0, 12.0, 0.0], [-0.0204801969, 0.0, 0.0, 0.0], [0.18579796, 0.0, 0.0, 0.0], [-0.146739364, 0.0, 0.0, 0.0], [0.0495600216, 0.0, 0.0, 0.0], [0.243499994, 13.0, 14.0, 6.0], [-0.232500002, 15.0, 16.0, 4.0], [0.130475506, 0.0, 0.0, 0.0], [-0.00734163914, 0.0, 0.0, 0.0], [0.00985154789, 0.0, 0.0, 0.0], [-0.201707691, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 5, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 3, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_291(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.957499981, 1.0, 2.0, 3.0], [-0.311999977, 3.0, 4.0, 4.0], [-0.95449996, 5.0, 6.0, 3.0], [0.0160557777, 0.0, 0.0, 0.0], [-0.223000005, 7.0, 8.0, 4.0], [0.103608042, 0.0, 0.0, 0.0], [0.245499998, 9.0, 10.0, 6.0], [-0.169853821, 0.0, 0.0, 0.0], [0.0264541935, 0.0, 0.0, 0.0], [0.436500013, 11.0, 12.0, 0.0], [0.0945999995, 13.0, 14.0, 0.0], [0.0309333466, 0.0, 0.0, 0.0], [-0.0639613569, 0.0, 0.0, 0.0], [-0.0735806376, 0.0, 0.0, 0.0], [0.0420149975, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 5, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 4, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_292(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.455500007, 1.0, 2.0, 1.0], [-0.079363212, 0.0, 0.0, 0.0], [-0.897500038, 3.0, 4.0, 3.0], [-0.601500034, 5.0, 6.0, 5.0], [-0.156500012, 7.0, 8.0, 4.0], [-0.74150002, 9.0, 10.0, 2.0], [-0.527500033, 11.0, 12.0, 2.0], [-0.250999987, 13.0, 14.0, 4.0], [-0.002935, 15.0, 16.0, 1.0], [-0.0189987011, 0.0, 0.0, 0.0], [0.118239902, 0.0, 0.0, 0.0], [-0.14672859, 0.0, 0.0, 0.0], [0.0926702321, 0.0, 0.0, 0.0], [0.0062873438, 0.0, 0.0, 0.0], [-0.172028989, 0.0, 0.0, 0.0], [0.0610000156, 0.0, 0.0, 0.0], [-0.0974780023, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_293(xs):
    #Predicts Class 3
    function_dict = np.array([[0.120499998, 1.0, 2.0, 6.0], [0.0832500011, 3.0, 4.0, 6.0], [0.123500004, 5.0, 6.0, 6.0], [-0.921499968, 7.0, 8.0, 4.0], [0.097649999, 9.0, 10.0, 6.0], [-0.307437211, 0.0, 0.0, 0.0], [0.961500049, 11.0, 12.0, 0.0], [0.0811500028, 13.0, 14.0, 6.0], [0.952000022, 15.0, 16.0, 0.0], [-0.947999954, 17.0, 18.0, 4.0], [0.0991000012, 19.0, 20.0, 6.0], [-0.76849997, 21.0, 22.0, 4.0], [0.1435, 23.0, 24.0, 6.0], [-0.0224145353, 0.0, 0.0, 0.0], [-0.278444082, 0.0, 0.0, 0.0], [0.0354207382, 0.0, 0.0, 0.0], [0.195695132, 0.0, 0.0, 0.0], [0.212908804, 0.0, 0.0, 0.0], [-0.116588056, 0.0, 0.0, 0.0], [-0.196061313, 0.0, 0.0, 0.0], [0.05345935, 0.0, 0.0, 0.0], [-0.179281026, 0.0, 0.0, 0.0], [0.0650633574, 0.0, 0.0, 0.0], [0.120472364, 0.0, 0.0, 0.0], [-0.0270899124, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_294(xs):
    #Predicts Class 4
    function_dict = np.array([[0.122500002, 1.0, 2.0, 6.0], [0.0832500011, 3.0, 4.0, 6.0], [0.123500004, 5.0, 6.0, 6.0], [-0.921499968, 7.0, 8.0, 4.0], [0.097649999, 9.0, 10.0, 6.0], [0.30762881, 0.0, 0.0, 0.0], [0.995499969, 11.0, 12.0, 0.0], [0.0811500028, 13.0, 14.0, 6.0], [0.952000022, 15.0, 16.0, 0.0], [-0.947999954, 17.0, 18.0, 4.0], [0.0991000012, 19.0, 20.0, 6.0], [0.994500041, 21.0, 22.0, 0.0], [0.165186405, 0.0, 0.0, 0.0], [0.0238308124, 0.0, 0.0, 0.0], [0.278638065, 0.0, 0.0, 0.0], [-0.0372303054, 0.0, 0.0, 0.0], [-0.1951783, 0.0, 0.0, 0.0], [-0.212593988, 0.0, 0.0, 0.0], [0.117219329, 0.0, 0.0, 0.0], [0.196327418, 0.0, 0.0, 0.0], [-0.0526303388, 0.0, 0.0, 0.0], [0.0266828593, 0.0, 0.0, 0.0], [-0.23534219, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_295(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.343500018, 1.0, 2.0, 1.0], [0.293500006, 3.0, 4.0, 6.0], [0.517500043, 5.0, 6.0, 0.0], [0.262499988, 7.0, 8.0, 6.0], [0.325500011, 9.0, 10.0, 6.0], [0.435499996, 11.0, 12.0, 0.0], [-0.164310738, 0.0, 0.0, 0.0], [0.40200001, 13.0, 14.0, 0.0], [-0.360499978, 15.0, 16.0, 4.0], [-0.116960548, 0.0, 0.0, 0.0], [0.0186484531, 0.0, 0.0, 0.0], [-0.696500003, 17.0, 18.0, 3.0], [0.460500002, 19.0, 20.0, 0.0], [0.0730276704, 0.0, 0.0, 0.0], [-0.0482074879, 0.0, 0.0, 0.0], [-0.0224322956, 0.0, 0.0, 0.0], [0.175693646, 0.0, 0.0, 0.0], [-0.0696371049, 0.0, 0.0, 0.0], [0.054683052, 0.0, 0.0, 0.0], [0.155771479, 0.0, 0.0, 0.0], [-0.020675119, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 17, 18, 19, 20, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_296(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.418500006, 1.0, 2.0, 1.0], [-0.428499997, 3.0, 4.0, 1.0], [0.602499962, 5.0, 6.0, 0.0], [-0.718500018, 7.0, 8.0, 2.0], [-0.146933958, 0.0, 0.0, 0.0], [0.549499989, 9.0, 10.0, 0.0], [0.113353014, 0.0, 0.0, 0.0], [-0.828500032, 11.0, 12.0, 5.0], [0.13687706, 0.0, 0.0, 0.0], [-0.380500019, 13.0, 14.0, 1.0], [-0.731000006, 15.0, 16.0, 2.0], [0.0375898369, 0.0, 0.0, 0.0], [-0.0860774294, 0.0, 0.0, 0.0], [0.133739069, 0.0, 0.0, 0.0], [0.00300140656, 0.0, 0.0, 0.0], [-0.168510363, 0.0, 0.0, 0.0], [0.0106009971, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 4, 13, 14, 15, 16, 6])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_297(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.426999986, 1.0, 2.0, 5.0], [0.257499993, 3.0, 4.0, 6.0], [0.310499996, 5.0, 6.0, 0.0], [-0.467500001, 7.0, 8.0, 2.0], [-0.536499977, 9.0, 10.0, 5.0], [0.125994936, 0.0, 0.0, 0.0], [-0.00813397206, 0.0, 0.0, 0.0], [-0.510500014, 11.0, 12.0, 2.0], [0.11983373, 0.0, 0.0, 0.0], [-0.0107361898, 0.0, 0.0, 0.0], [-0.137677521, 0.0, 0.0, 0.0], [-0.00571778649, 0.0, 0.0, 0.0], [-0.125838891, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 9, 10, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 4, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_298(xs):
    #Predicts Class 3
    function_dict = np.array([[0.99150002, 1.0, 2.0, 0.0], [-0.99849999, 3.0, 4.0, 1.0], [-0.989500046, 5.0, 6.0, 1.0], [0.989500046, 7.0, 8.0, 0.0], [0.300500005, 9.0, 10.0, 6.0], [0.075849995, 11.0, 12.0, 6.0], [0.225166097, 0.0, 0.0, 0.0], [0.130999997, 13.0, 14.0, 6.0], [0.107999995, 15.0, 16.0, 6.0], [0.989500046, 17.0, 18.0, 0.0], [-0.137952745, 0.0, 0.0, 0.0], [-0.996500015, 19.0, 20.0, 1.0], [0.0997000039, 21.0, 22.0, 6.0], [0.0655849352, 0.0, 0.0, 0.0], [-0.182727665, 0.0, 0.0, 0.0], [0.0626171157, 0.0, 0.0, 0.0], [0.358241439, 0.0, 0.0, 0.0], [0.0174337085, 0.0, 0.0, 0.0], [-0.0478091724, 0.0, 0.0, 0.0], [0.160319626, 0.0, 0.0, 0.0], [-0.0914182812, 0.0, 0.0, 0.0], [-0.235139713, 0.0, 0.0, 0.0], [-0.040028777, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 10, 19, 20, 21, 22, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_299(xs):
    #Predicts Class 4
    function_dict = np.array([[0.99150002, 1.0, 2.0, 0.0], [-0.99849999, 3.0, 4.0, 1.0], [-0.989500046, 5.0, 6.0, 1.0], [0.989500046, 7.0, 8.0, 0.0], [0.301499993, 9.0, 10.0, 6.0], [0.075849995, 11.0, 12.0, 6.0], [-0.224547923, 0.0, 0.0, 0.0], [0.130999997, 13.0, 14.0, 6.0], [0.107999995, 15.0, 16.0, 6.0], [0.989500046, 17.0, 18.0, 0.0], [0.150505334, 0.0, 0.0, 0.0], [-0.996500015, 19.0, 20.0, 1.0], [0.0997000039, 21.0, 22.0, 6.0], [-0.0652515218, 0.0, 0.0, 0.0], [0.182969034, 0.0, 0.0, 0.0], [-0.0623168424, 0.0, 0.0, 0.0], [-0.357729316, 0.0, 0.0, 0.0], [-0.0178774409, 0.0, 0.0, 0.0], [0.0485364683, 0.0, 0.0, 0.0], [-0.159140363, 0.0, 0.0, 0.0], [0.09308929, 0.0, 0.0, 0.0], [0.235472843, 0.0, 0.0, 0.0], [0.041023396, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 10, 19, 20, 21, 22, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_300(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.443499982, 1.0, 2.0, 4.0], [-0.932500005, 3.0, 4.0, 3.0], [0.1655, 5.0, 6.0, 6.0], [-0.00718273921, 0.0, 0.0, 0.0], [0.119002484, 0.0, 0.0, 0.0], [-0.115452722, 0.0, 0.0, 0.0], [0.215499997, 7.0, 8.0, 6.0], [-0.901499987, 9.0, 10.0, 3.0], [0.2315, 11.0, 12.0, 6.0], [-0.0134048229, 0.0, 0.0, 0.0], [0.107954003, 0.0, 0.0, 0.0], [-0.112618752, 0.0, 0.0, 0.0], [-0.00290255435, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 2, 6, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_301(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.443499982, 1.0, 2.0, 4.0], [0.21450001, 3.0, 4.0, 6.0], [0.1285, 5.0, 6.0, 6.0], [-0.14175573, 0.0, 0.0, 0.0], [0.00597762968, 0.0, 0.0, 0.0], [0.128031641, 0.0, 0.0, 0.0], [-0.7245, 7.0, 8.0, 5.0], [-0.300500005, 9.0, 10.0, 4.0], [-0.706499994, 11.0, 12.0, 2.0], [0.00274783676, 0.0, 0.0, 0.0], [0.134877875, 0.0, 0.0, 0.0], [-0.100979365, 0.0, 0.0, 0.0], [0.0077030519, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 2, 6, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_302(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.678499997, 1.0, 2.0, 5.0], [0.152500004, 3.0, 4.0, 6.0], [-0.653499961, 5.0, 6.0, 5.0], [0.0560561232, 0.0, 0.0, 0.0], [-0.733500004, 7.0, 8.0, 2.0], [0.1341867, 0.0, 0.0, 0.0], [-0.13350001, 9.0, 10.0, 4.0], [-0.744500041, 11.0, 12.0, 5.0], [-0.237000003, 13.0, 14.0, 1.0], [-0.932500005, 15.0, 16.0, 3.0], [0.37349999, 17.0, 18.0, 0.0], [-0.0857101157, 0.0, 0.0, 0.0], [0.105139993, 0.0, 0.0, 0.0], [-0.176478624, 0.0, 0.0, 0.0], [-0.0220099203, 0.0, 0.0, 0.0], [0.0216340646, 0.0, 0.0, 0.0], [-0.170681134, 0.0, 0.0, 0.0], [0.0741706043, 0.0, 0.0, 0.0], [-0.0213380009, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 11, 12, 13, 14, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 4, 7, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_303(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.972499967, 1.0, 2.0, 4.0], [0.983500004, 3.0, 4.0, 0.0], [0.983500004, 5.0, 6.0, 0.0], [0.980499983, 7.0, 8.0, 0.0], [-0.977499962, 9.0, 10.0, 4.0], [0.0581500009, 11.0, 12.0, 6.0], [0.0954999998, 13.0, 14.0, 6.0], [0.968500018, 15.0, 16.0, 0.0], [-0.328517526, 0.0, 0.0, 0.0], [0.155499995, 17.0, 18.0, 6.0], [-0.999500036, 19.0, 20.0, 3.0], [-0.997500002, 21.0, 22.0, 3.0], [0.0759499967, 23.0, 24.0, 6.0], [0.0436000004, 25.0, 26.0, 6.0], [-0.963500023, 27.0, 28.0, 4.0], [-0.173915505, 0.0, 0.0, 0.0], [0.110253423, 0.0, 0.0, 0.0], [0.0546604469, 0.0, 0.0, 0.0], [-0.0366431475, 0.0, 0.0, 0.0], [0.2090514, 0.0, 0.0, 0.0], [-0.172892034, 0.0, 0.0, 0.0], [0.254399002, 0.0, 0.0, 0.0], [-0.025254393, 0.0, 0.0, 0.0], [-0.268297404, 0.0, 0.0, 0.0], [0.0148972189, 0.0, 0.0, 0.0], [-0.118515268, 0.0, 0.0, 0.0], [0.270246476, 0.0, 0.0, 0.0], [-0.280810833, 0.0, 0.0, 0.0], [-0.0143713308, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_304(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.972499967, 1.0, 2.0, 4.0], [0.983500004, 3.0, 4.0, 0.0], [0.983500004, 5.0, 6.0, 0.0], [0.980499983, 7.0, 8.0, 0.0], [-0.977499962, 9.0, 10.0, 4.0], [0.0581500009, 11.0, 12.0, 6.0], [0.0954999998, 13.0, 14.0, 6.0], [0.968500018, 15.0, 16.0, 0.0], [0.328773856, 0.0, 0.0, 0.0], [0.155499995, 17.0, 18.0, 6.0], [-0.999500036, 19.0, 20.0, 3.0], [-0.997500002, 21.0, 22.0, 3.0], [0.0759499967, 23.0, 24.0, 6.0], [0.0436000004, 25.0, 26.0, 6.0], [-0.963500023, 27.0, 28.0, 4.0], [0.174399719, 0.0, 0.0, 0.0], [-0.109281279, 0.0, 0.0, 0.0], [-0.0537980907, 0.0, 0.0, 0.0], [0.0375089087, 0.0, 0.0, 0.0], [-0.208535597, 0.0, 0.0, 0.0], [0.173528194, 0.0, 0.0, 0.0], [-0.25343138, 0.0, 0.0, 0.0], [0.0249988846, 0.0, 0.0, 0.0], [0.268042177, 0.0, 0.0, 0.0], [-0.0159267597, 0.0, 0.0, 0.0], [0.11960943, 0.0, 0.0, 0.0], [-0.270047665, 0.0, 0.0, 0.0], [0.281288892, 0.0, 0.0, 0.0], [0.0151799442, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_305(xs):
    #Predicts Class 0
    function_dict = np.array([[0.619500041, 1.0, 2.0, 0.0], [-0.811499953, 3.0, 4.0, 2.0], [-0.449999988, 5.0, 6.0, 4.0], [-0.879500031, 7.0, 8.0, 3.0], [-0.780499995, 9.0, 10.0, 2.0], [0.00405093841, 0.0, 0.0, 0.0], [-0.1030019, 0.0, 0.0, 0.0], [0.119828776, 0.0, 0.0, 0.0], [-0.00452264305, 0.0, 0.0, 0.0], [-0.37349999, 11.0, 12.0, 4.0], [-0.895500004, 13.0, 14.0, 3.0], [0.0200271048, 0.0, 0.0, 0.0], [-0.10586118, 0.0, 0.0, 0.0], [-0.0309355836, 0.0, 0.0, 0.0], [0.033723101, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 11, 12, 13, 14, 5, 6])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_306(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.940500021, 1.0, 2.0, 3.0], [0.265500009, 3.0, 4.0, 6.0], [-0.932500005, 5.0, 6.0, 3.0], [0.2315, 7.0, 8.0, 6.0], [0.0763329193, 0.0, 0.0, 0.0], [0.105641626, 0.0, 0.0, 0.0], [-0.425500005, 9.0, 10.0, 2.0], [-0.094250001, 11.0, 12.0, 4.0], [-0.361999989, 13.0, 14.0, 4.0], [-0.819499969, 15.0, 16.0, 3.0], [-0.874000013, 17.0, 18.0, 3.0], [-0.083150655, 0.0, 0.0, 0.0], [0.112565972, 0.0, 0.0, 0.0], [0.0214908216, 0.0, 0.0, 0.0], [-0.175267458, 0.0, 0.0, 0.0], [-0.0319649912, 0.0, 0.0, 0.0], [0.0352813005, 0.0, 0.0, 0.0], [0.144355342, 0.0, 0.0, 0.0], [-0.0336819403, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_307(xs):
    #Predicts Class 2
    function_dict = np.array([[0.28549999, 1.0, 2.0, 6.0], [-0.523499966, 3.0, 4.0, 2.0], [-0.0848445669, 0.0, 0.0, 0.0], [-0.114500001, 5.0, 6.0, 1.0], [0.389499992, 7.0, 8.0, 0.0], [0.414499998, 9.0, 10.0, 0.0], [-0.107392855, 0.0, 0.0, 0.0], [-0.50999999, 11.0, 12.0, 5.0], [-0.889999986, 13.0, 14.0, 3.0], [0.0481080115, 0.0, 0.0, 0.0], [-0.0250401851, 0.0, 0.0, 0.0], [-0.0924294591, 0.0, 0.0, 0.0], [0.043648418, 0.0, 0.0, 0.0], [0.191127196, 0.0, 0.0, 0.0], [0.0224286485, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 6, 11, 12, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 5, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_308(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [0.114913642, 0.0, 0.0, 0.0], [-0.992499948, 3.0, 4.0, 4.0], [0.109499998, 5.0, 6.0, 6.0], [0.987499952, 7.0, 8.0, 0.0], [0.101500005, 9.0, 10.0, 6.0], [0.993499994, 11.0, 12.0, 0.0], [0.985499978, 13.0, 14.0, 0.0], [0.0438999981, 15.0, 16.0, 6.0], [-0.0800430924, 0.0, 0.0, 0.0], [-0.210333318, 0.0, 0.0, 0.0], [-0.0810751095, 0.0, 0.0, 0.0], [0.072631374, 0.0, 0.0, 0.0], [-0.00286620483, 0.0, 0.0, 0.0], [-0.108534962, 0.0, 0.0, 0.0], [-0.0940608159, 0.0, 0.0, 0.0], [0.0428184532, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_309(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [-0.113943666, 0.0, 0.0, 0.0], [-0.992499948, 3.0, 4.0, 4.0], [0.109499998, 5.0, 6.0, 6.0], [0.987499952, 7.0, 8.0, 0.0], [0.101500005, 9.0, 10.0, 6.0], [0.993499994, 11.0, 12.0, 0.0], [-0.986500025, 13.0, 14.0, 1.0], [0.0438999981, 15.0, 16.0, 6.0], [0.0811109841, 0.0, 0.0, 0.0], [0.210818619, 0.0, 0.0, 0.0], [0.0815411583, 0.0, 0.0, 0.0], [-0.0716581419, 0.0, 0.0, 0.0], [0.0469803065, 0.0, 0.0, 0.0], [-0.048714675, 0.0, 0.0, 0.0], [0.0960134566, 0.0, 0.0, 0.0], [-0.0421188809, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_310(xs):
    #Predicts Class 0
    function_dict = np.array([[0.345499992, 1.0, 2.0, 0.0], [-0.619500041, 3.0, 4.0, 2.0], [0.378499985, 5.0, 6.0, 0.0], [0.266499996, 7.0, 8.0, 6.0], [-0.0692000017, 9.0, 10.0, 1.0], [-0.112198412, 0.0, 0.0, 0.0], [-0.658499956, 11.0, 12.0, 5.0], [-0.456499994, 13.0, 14.0, 1.0], [0.28549999, 15.0, 16.0, 6.0], [-0.109328575, 0.0, 0.0, 0.0], [0.027866045, 0.0, 0.0, 0.0], [-0.85650003, 17.0, 18.0, 3.0], [-0.131999999, 19.0, 20.0, 4.0], [0.0217742175, 0.0, 0.0, 0.0], [0.175338164, 0.0, 0.0, 0.0], [-0.105161101, 0.0, 0.0, 0.0], [0.0954704285, 0.0, 0.0, 0.0], [0.0145171536, 0.0, 0.0, 0.0], [-0.109370984, 0.0, 0.0, 0.0], [0.139335752, 0.0, 0.0, 0.0], [0.0100210374, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_311(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.57949996, 1.0, 2.0, 5.0], [-0.621500015, 3.0, 4.0, 5.0], [0.0465000011, 5.0, 6.0, 0.0], [-0.644500017, 7.0, 8.0, 5.0], [-0.914999962, 9.0, 10.0, 3.0], [0.0831784904, 0.0, 0.0, 0.0], [-0.24000001, 11.0, 12.0, 1.0], [-0.17050001, 13.0, 14.0, 4.0], [-0.113074265, 0.0, 0.0, 0.0], [-0.0208695717, 0.0, 0.0, 0.0], [-0.815500021, 15.0, 16.0, 3.0], [0.057, 17.0, 18.0, 4.0], [-0.0402000025, 19.0, 20.0, 1.0], [-0.00207829103, 0.0, 0.0, 0.0], [0.106310107, 0.0, 0.0, 0.0], [0.202554137, 0.0, 0.0, 0.0], [-0.0101011721, 0.0, 0.0, 0.0], [0.0414359383, 0.0, 0.0, 0.0], [-0.00579628814, 0.0, 0.0, 0.0], [-0.139106438, 0.0, 0.0, 0.0], [0.0143760331, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 15, 16, 5, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 4, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_312(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.57949996, 1.0, 2.0, 5.0], [0.228500009, 3.0, 4.0, 6.0], [0.130999997, 5.0, 6.0, 0.0], [0.220499992, 7.0, 8.0, 6.0], [-0.71449995, 9.0, 10.0, 2.0], [-0.0639175922, 0.0, 0.0, 0.0], [-0.741999984, 11.0, 12.0, 3.0], [-0.692000031, 13.0, 14.0, 2.0], [0.15734084, 0.0, 0.0, 0.0], [0.561500013, 15.0, 16.0, 0.0], [-0.932500005, 17.0, 18.0, 3.0], [0.228500009, 19.0, 20.0, 6.0], [-0.047213167, 0.0, 0.0, 0.0], [-0.120196193, 0.0, 0.0, 0.0], [0.0312555507, 0.0, 0.0, 0.0], [-0.0343821868, 0.0, 0.0, 0.0], [0.103323959, 0.0, 0.0, 0.0], [-0.0279524699, 0.0, 0.0, 0.0], [-0.215625525, 0.0, 0.0, 0.0], [0.0136818616, 0.0, 0.0, 0.0], [0.136125788, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 15, 16, 17, 18, 5, 19, 20, 12])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_313(xs):
    #Predicts Class 3
    function_dict = np.array([[0.1065, 1.0, 2.0, 6.0], [-0.871500015, 3.0, 4.0, 4.0], [0.990499973, 5.0, 6.0, 0.0], [0.990499973, 7.0, 8.0, 0.0], [0.0634000003, 9.0, 10.0, 6.0], [-0.999500036, 11.0, 12.0, 3.0], [0.118500002, 13.0, 14.0, 6.0], [0.0709000006, 15.0, 16.0, 6.0], [0.0769000053, 17.0, 18.0, 6.0], [0.0220408347, 0.0, 0.0, 0.0], [0.248733729, 0.0, 0.0, 0.0], [0.118500002, 19.0, 20.0, 6.0], [0.130499989, 21.0, 22.0, 6.0], [-0.99150002, 23.0, 24.0, 4.0], [-0.983500004, 25.0, 26.0, 4.0], [0.0639504492, 0.0, 0.0, 0.0], [-0.101075821, 0.0, 0.0, 0.0], [-0.0538644604, 0.0, 0.0, 0.0], [0.144137844, 0.0, 0.0, 0.0], [0.285510242, 0.0, 0.0, 0.0], [0.0441973731, 0.0, 0.0, 0.0], [-0.208585516, 0.0, 0.0, 0.0], [-0.0380376764, 0.0, 0.0, 0.0], [0.0667717606, 0.0, 0.0, 0.0], [-0.425448507, 0.0, 0.0, 0.0], [-0.114738561, 0.0, 0.0, 0.0], [0.127330065, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_314(xs):
    #Predicts Class 4
    function_dict = np.array([[0.1065, 1.0, 2.0, 6.0], [-0.871500015, 3.0, 4.0, 4.0], [0.990499973, 5.0, 6.0, 0.0], [0.990499973, 7.0, 8.0, 0.0], [0.0411000028, 9.0, 10.0, 6.0], [-0.999500036, 11.0, 12.0, 3.0], [0.118500002, 13.0, 14.0, 6.0], [0.0709000006, 15.0, 16.0, 6.0], [0.0769000053, 17.0, 18.0, 6.0], [-0.0225886218, 0.0, 0.0, 0.0], [-0.249559909, 0.0, 0.0, 0.0], [0.132499993, 19.0, 20.0, 6.0], [0.129500002, 21.0, 22.0, 6.0], [-0.99150002, 23.0, 24.0, 4.0], [-0.983500004, 25.0, 26.0, 4.0], [-0.062721245, 0.0, 0.0, 0.0], [0.101628572, 0.0, 0.0, 0.0], [0.0556154959, 0.0, 0.0, 0.0], [-0.143757001, 0.0, 0.0, 0.0], [-0.220580384, 0.0, 0.0, 0.0], [-0.0351001769, 0.0, 0.0, 0.0], [0.209324211, 0.0, 0.0, 0.0], [0.0337608643, 0.0, 0.0, 0.0], [-0.0662574843, 0.0, 0.0, 0.0], [0.426157266, 0.0, 0.0, 0.0], [0.115749978, 0.0, 0.0, 0.0], [-0.126431212, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_315(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.5255, 1.0, 2.0, 5.0], [0.327499986, 3.0, 4.0, 0.0], [-0.070113413, 0.0, 0.0, 0.0], [-0.173999995, 5.0, 6.0, 4.0], [-0.85650003, 7.0, 8.0, 3.0], [-0.230500013, 9.0, 10.0, 4.0], [0.206499994, 11.0, 12.0, 0.0], [-0.578000009, 13.0, 14.0, 1.0], [-0.778499961, 15.0, 16.0, 2.0], [0.0605375171, 0.0, 0.0, 0.0], [-0.102814153, 0.0, 0.0, 0.0], [0.158737928, 0.0, 0.0, 0.0], [0.0370589048, 0.0, 0.0, 0.0], [-0.105630822, 0.0, 0.0, 0.0], [0.0338297263, 0.0, 0.0, 0.0], [0.0288071483, 0.0, 0.0, 0.0], [-0.0976938605, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_316(xs):
    #Predicts Class 1
    function_dict = np.array([[0.291500002, 1.0, 2.0, 6.0], [-0.767500043, 3.0, 4.0, 3.0], [0.328500003, 5.0, 6.0, 6.0], [-0.792500019, 7.0, 8.0, 2.0], [0.264499992, 9.0, 10.0, 6.0], [-0.662500024, 11.0, 12.0, 5.0], [0.342500001, 13.0, 14.0, 6.0], [-0.585500002, 15.0, 16.0, 1.0], [-0.001865, 17.0, 18.0, 1.0], [0.247500002, 19.0, 20.0, 6.0], [-0.157233953, 0.0, 0.0, 0.0], [0.00848291162, 0.0, 0.0, 0.0], [0.149368718, 0.0, 0.0, 0.0], [-0.0723116472, 0.0, 0.0, 0.0], [0.0522222035, 0.0, 0.0, 0.0], [0.0467753895, 0.0, 0.0, 0.0], [-0.099602364, 0.0, 0.0, 0.0], [0.0353857502, 0.0, 0.0, 0.0], [-0.0932900086, 0.0, 0.0, 0.0], [-0.0681207702, 0.0, 0.0, 0.0], [0.0931539387, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_317(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.796499968, 1.0, 2.0, 3.0], [-0.00151500001, 3.0, 4.0, 1.0], [0.247500002, 5.0, 6.0, 6.0], [-0.17750001, 7.0, 8.0, 1.0], [0.0797890946, 0.0, 0.0, 0.0], [0.308499992, 9.0, 10.0, 0.0], [-0.0473868847, 0.0, 0.0, 0.0], [-0.237500012, 11.0, 12.0, 1.0], [-0.940500021, 13.0, 14.0, 3.0], [-0.0199037604, 0.0, 0.0, 0.0], [-0.666999996, 15.0, 16.0, 5.0], [-0.0346077085, 0.0, 0.0, 0.0], [0.0653046891, 0.0, 0.0, 0.0], [0.00867684092, 0.0, 0.0, 0.0], [-0.125140741, 0.0, 0.0, 0.0], [0.000477661815, 0.0, 0.0, 0.0], [0.203573242, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 9, 15, 16, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_318(xs):
    #Predicts Class 3
    function_dict = np.array([[0.988499999, 1.0, 2.0, 0.0], [0.186500013, 3.0, 4.0, 6.0], [-0.996500015, 5.0, 6.0, 1.0], [0.184500009, 7.0, 8.0, 6.0], [-0.986500025, 9.0, 10.0, 4.0], [0.193500012, 11.0, 12.0, 6.0], [-0.983500004, 13.0, 14.0, 4.0], [0.0838000029, 15.0, 16.0, 6.0], [0.266222984, 0.0, 0.0, 0.0], [0.160435736, 0.0, 0.0, 0.0], [-0.978500009, 17.0, 18.0, 4.0], [0.178000003, 19.0, 20.0, 6.0], [-0.986500025, 21.0, 22.0, 4.0], [0.992499948, 23.0, 24.0, 0.0], [-0.972499967, 25.0, 26.0, 4.0], [-0.0418707766, 0.0, 0.0, 0.0], [0.0527959429, 0.0, 0.0, 0.0], [-0.290183157, 0.0, 0.0, 0.0], [-0.0229664054, 0.0, 0.0, 0.0], [-0.0367885716, 0.0, 0.0, 0.0], [-0.24351725, 0.0, 0.0, 0.0], [-0.0566806868, 0.0, 0.0, 0.0], [0.209985316, 0.0, 0.0, 0.0], [0.264825165, 0.0, 0.0, 0.0], [-0.0014013066, 0.0, 0.0, 0.0], [-0.118698724, 0.0, 0.0, 0.0], [0.108572073, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 4, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_319(xs):
    #Predicts Class 4
    function_dict = np.array([[0.9745, 1.0, 2.0, 0.0], [0.193500012, 3.0, 4.0, 6.0], [-0.976500034, 5.0, 6.0, 4.0], [0.184500009, 7.0, 8.0, 6.0], [0.281499982, 9.0, 10.0, 6.0], [0.075849995, 11.0, 12.0, 6.0], [-0.999500036, 13.0, 14.0, 5.0], [0.166500002, 15.0, 16.0, 6.0], [-0.294027388, 0.0, 0.0, 0.0], [-0.95449996, 17.0, 18.0, 4.0], [-0.119137757, 0.0, 0.0, 0.0], [0.0697499961, 19.0, 20.0, 6.0], [0.0838000029, 21.0, 22.0, 6.0], [0.217674285, 0.0, 0.0, 0.0], [-0.993499994, 23.0, 24.0, 1.0], [-0.0484707579, 0.0, 0.0, 0.0], [0.129246935, 0.0, 0.0, 0.0], [0.250866383, 0.0, 0.0, 0.0], [0.044128757, 0.0, 0.0, 0.0], [-0.00792023353, 0.0, 0.0, 0.0], [-0.28120029, 0.0, 0.0, 0.0], [0.192727834, 0.0, 0.0, 0.0], [-0.0105126416, 0.0, 0.0, 0.0], [-0.0314807668, 0.0, 0.0, 0.0], [0.115463272, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 10, 19, 20, 21, 22, 13, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_320(xs):
    #Predicts Class 0
    function_dict = np.array([[0.473500013, 1.0, 2.0, 0.0], [-0.433499992, 3.0, 4.0, 1.0], [-0.232500002, 5.0, 6.0, 4.0], [0.282000005, 7.0, 8.0, 0.0], [-0.405499995, 9.0, 10.0, 1.0], [-0.760499954, 11.0, 12.0, 5.0], [-0.14569591, 0.0, 0.0, 0.0], [-0.0377861746, 0.0, 0.0, 0.0], [-0.763499975, 13.0, 14.0, 2.0], [-0.323500007, 15.0, 16.0, 4.0], [-0.314500004, 17.0, 18.0, 4.0], [-0.850499988, 19.0, 20.0, 5.0], [-0.747500002, 21.0, 22.0, 2.0], [0.17471838, 0.0, 0.0, 0.0], [0.0437430814, 0.0, 0.0, 0.0], [-0.193362236, 0.0, 0.0, 0.0], [-0.0144275455, 0.0, 0.0, 0.0], [0.118375845, 0.0, 0.0, 0.0], [-0.00795103982, 0.0, 0.0, 0.0], [0.0402756669, 0.0, 0.0, 0.0], [-0.0924008563, 0.0, 0.0, 0.0], [0.18707189, 0.0, 0.0, 0.0], [-0.0294091422, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 6])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_321(xs):
    #Predicts Class 1
    function_dict = np.array([[0.471499979, 1.0, 2.0, 0.0], [0.257499993, 3.0, 4.0, 6.0], [0.484499991, 5.0, 6.0, 0.0], [-0.784500003, 7.0, 8.0, 5.0], [-0.894500017, 9.0, 10.0, 3.0], [0.164970011, 0.0, 0.0, 0.0], [0.490500003, 11.0, 12.0, 0.0], [0.0651948079, 0.0, 0.0, 0.0], [-0.0547500029, 13.0, 14.0, 4.0], [-0.755499959, 15.0, 16.0, 2.0], [0.274500012, 17.0, 18.0, 6.0], [-0.144934133, 0.0, 0.0, 0.0], [0.504500031, 19.0, 20.0, 0.0], [-0.104949497, 0.0, 0.0, 0.0], [0.0252796244, 0.0, 0.0, 0.0], [0.0215712041, 0.0, 0.0, 0.0], [0.159883723, 0.0, 0.0, 0.0], [0.051304955, 0.0, 0.0, 0.0], [-0.0697403774, 0.0, 0.0, 0.0], [0.158817872, 0.0, 0.0, 0.0], [-0.00754483417, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 15, 16, 17, 18, 5, 11, 19, 20])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_322(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.426999986, 1.0, 2.0, 5.0], [0.249500006, 3.0, 4.0, 6.0], [-0.169499993, 5.0, 6.0, 1.0], [-0.134000003, 7.0, 8.0, 4.0], [-0.536499977, 9.0, 10.0, 5.0], [0.111711428, 0.0, 0.0, 0.0], [-0.00530396542, 0.0, 0.0, 0.0], [-0.672500014, 11.0, 12.0, 2.0], [-0.0196500011, 13.0, 14.0, 4.0], [-0.148000002, 15.0, 16.0, 1.0], [-0.134631529, 0.0, 0.0, 0.0], [0.0298696421, 0.0, 0.0, 0.0], [-0.0903955027, 0.0, 0.0, 0.0], [0.0931569487, 0.0, 0.0, 0.0], [-0.0239615012, 0.0, 0.0, 0.0], [-0.110322215, 0.0, 0.0, 0.0], [0.0993341208, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 15, 16, 10, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_323(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [0.113639601, 0.0, 0.0, 0.0], [0.140500009, 3.0, 4.0, 6.0], [0.127499998, 5.0, 6.0, 6.0], [0.994500041, 7.0, 8.0, 0.0], [0.120499998, 9.0, 10.0, 6.0], [0.986500025, 11.0, 12.0, 0.0], [0.988499999, 13.0, 14.0, 0.0], [-0.997500002, 15.0, 16.0, 1.0], [0.014742611, 0.0, 0.0, 0.0], [-0.107198492, 0.0, 0.0, 0.0], [-0.0606079996, 0.0, 0.0, 0.0], [0.286445588, 0.0, 0.0, 0.0], [0.00876657013, 0.0, 0.0, 0.0], [-0.093911238, 0.0, 0.0, 0.0], [0.225524217, 0.0, 0.0, 0.0], [-0.22668536, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_324(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [-0.112664826, 0.0, 0.0, 0.0], [0.140500009, 3.0, 4.0, 6.0], [0.127499998, 5.0, 6.0, 6.0], [0.994500041, 7.0, 8.0, 0.0], [0.122500002, 9.0, 10.0, 6.0], [0.986500025, 11.0, 12.0, 0.0], [0.988499999, 13.0, 14.0, 0.0], [-0.997500002, 15.0, 16.0, 1.0], [-0.0139517952, 0.0, 0.0, 0.0], [0.107698709, 0.0, 0.0, 0.0], [0.0611142479, 0.0, 0.0, 0.0], [-0.286171138, 0.0, 0.0, 0.0], [-0.0102782352, 0.0, 0.0, 0.0], [0.0945892483, 0.0, 0.0, 0.0], [-0.2246124, 0.0, 0.0, 0.0], [0.227362156, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_325(xs):
    #Predicts Class 0
    function_dict = np.array([[0.280499995, 1.0, 2.0, 6.0], [-0.325500011, 3.0, 4.0, 4.0], [-0.918500006, 5.0, 6.0, 3.0], [-0.404500008, 7.0, 8.0, 4.0], [-0.712499976, 9.0, 10.0, 2.0], [-0.137989745, 0.0, 0.0, 0.0], [-0.666499972, 11.0, 12.0, 5.0], [0.212500006, 13.0, 14.0, 6.0], [-0.92750001, 15.0, 16.0, 3.0], [-0.378000021, 17.0, 18.0, 1.0], [-0.712499976, 19.0, 20.0, 5.0], [0.358500004, 21.0, 22.0, 0.0], [-0.078166835, 0.0, 0.0, 0.0], [0.0432598442, 0.0, 0.0, 0.0], [-0.0771925226, 0.0, 0.0, 0.0], [0.179972515, 0.0, 0.0, 0.0], [0.0329176448, 0.0, 0.0, 0.0], [0.00806331541, 0.0, 0.0, 0.0], [-0.174354911, 0.0, 0.0, 0.0], [0.1122379, 0.0, 0.0, 0.0], [-0.0122224903, 0.0, 0.0, 0.0], [0.130450875, 0.0, 0.0, 0.0], [-0.0582080334, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_326(xs):
    #Predicts Class 1
    function_dict = np.array([[0.301499993, 1.0, 2.0, 6.0], [-0.560500026, 3.0, 4.0, 5.0], [0.328500003, 5.0, 6.0, 6.0], [-0.965499997, 7.0, 8.0, 3.0], [-0.00303500006, 9.0, 10.0, 1.0], [0.0987555906, 0.0, 0.0, 0.0], [0.342500001, 11.0, 12.0, 6.0], [-0.09375377, 0.0, 0.0, 0.0], [-0.276499987, 13.0, 14.0, 1.0], [0.256500006, 15.0, 16.0, 6.0], [0.0569353364, 0.0, 0.0, 0.0], [-0.0501174629, 0.0, 0.0, 0.0], [0.0518448427, 0.0, 0.0, 0.0], [-0.00339569361, 0.0, 0.0, 0.0], [0.0689831302, 0.0, 0.0, 0.0], [0.00384792592, 0.0, 0.0, 0.0], [-0.205881938, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 15, 16, 10, 5, 11, 12])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_327(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.559499979, 1.0, 2.0, 5.0], [-0.960500002, 3.0, 4.0, 3.0], [-0.710500002, 5.0, 6.0, 3.0], [0.0874492154, 0.0, 0.0, 0.0], [-0.708500028, 7.0, 8.0, 3.0], [-0.1435, 9.0, 10.0, 1.0], [-0.0595168397, 0.0, 0.0, 0.0], [-0.783499956, 11.0, 12.0, 5.0], [0.0719595626, 0.0, 0.0, 0.0], [0.232500002, 13.0, 14.0, 6.0], [0.256999999, 15.0, 16.0, 6.0], [0.0370672308, 0.0, 0.0, 0.0], [-0.0885450542, 0.0, 0.0, 0.0], [-0.0751078874, 0.0, 0.0, 0.0], [0.0919541791, 0.0, 0.0, 0.0], [0.162831113, 0.0, 0.0, 0.0], [0.0299676284, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 11, 12, 8, 13, 14, 15, 16, 6])
    branch_indices = np.array([0, 1, 4, 7, 2, 5, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_328(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.997500002, 1.0, 2.0, 1.0], [0.074300006, 3.0, 4.0, 6.0], [-0.976500034, 5.0, 6.0, 4.0], [0.0419500023, 7.0, 8.0, 6.0], [0.0923499987, 9.0, 10.0, 6.0], [0.245499998, 11.0, 12.0, 6.0], [-0.9745, 13.0, 14.0, 4.0], [0.151205719, 0.0, 0.0, 0.0], [0.064199999, 15.0, 16.0, 6.0], [0.15624322, 0.0, 0.0, 0.0], [0.101500005, 17.0, 18.0, 6.0], [0.242500007, 19.0, 20.0, 6.0], [-0.0987743661, 0.0, 0.0, 0.0], [-0.995499969, 21.0, 22.0, 1.0], [-0.966500044, 23.0, 24.0, 4.0], [-0.0825228691, 0.0, 0.0, 0.0], [-0.348827422, 0.0, 0.0, 0.0], [-0.116446227, 0.0, 0.0, 0.0], [0.0114511782, 0.0, 0.0, 0.0], [0.042133376, 0.0, 0.0, 0.0], [0.228840426, 0.0, 0.0, 0.0], [-0.244972154, 0.0, 0.0, 0.0], [-0.0129188532, 0.0, 0.0, 0.0], [0.0850505233, 0.0, 0.0, 0.0], [-0.0114855934, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 9, 17, 18, 19, 20, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 8, 4, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_329(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.997500002, 1.0, 2.0, 1.0], [0.074300006, 3.0, 4.0, 6.0], [0.994500041, 5.0, 6.0, 0.0], [0.0419500023, 7.0, 8.0, 6.0], [0.0923499987, 9.0, 10.0, 6.0], [0.992499948, 11.0, 12.0, 0.0], [0.119000003, 13.0, 14.0, 6.0], [-0.149669856, 0.0, 0.0, 0.0], [0.064199999, 15.0, 16.0, 6.0], [-0.15600878, 0.0, 0.0, 0.0], [0.101500005, 17.0, 18.0, 6.0], [-0.990499973, 19.0, 20.0, 4.0], [0.0822999999, 21.0, 22.0, 6.0], [-0.0818585753, 0.0, 0.0, 0.0], [0.220070228, 0.0, 0.0, 0.0], [0.0832545981, 0.0, 0.0, 0.0], [0.348976552, 0.0, 0.0, 0.0], [0.116739623, 0.0, 0.0, 0.0], [-0.010710923, 0.0, 0.0, 0.0], [0.133672997, 0.0, 0.0, 0.0], [-0.0128878029, 0.0, 0.0, 0.0], [-0.0161632001, 0.0, 0.0, 0.0], [-0.207046434, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 9, 17, 18, 19, 20, 21, 22, 13, 14])
    branch_indices = np.array([0, 1, 3, 8, 4, 10, 2, 5, 11, 12, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_330(xs):
    #Predicts Class 0
    function_dict = np.array([[0.135500014, 1.0, 2.0, 0.0], [-0.629000008, 3.0, 4.0, 5.0], [-0.113499999, 5.0, 6.0, 1.0], [0.0926950201, 0.0, 0.0, 0.0], [-0.0122038973, 0.0, 0.0, 0.0], [-0.631500006, 7.0, 8.0, 5.0], [-0.089732334, 0.0, 0.0, 0.0], [-0.17050001, 9.0, 10.0, 4.0], [-0.588500023, 11.0, 12.0, 5.0], [-0.00336736673, 0.0, 0.0, 0.0], [-0.110496417, 0.0, 0.0, 0.0], [0.137544617, 0.0, 0.0, 0.0], [-0.0237205401, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 9, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 2, 5, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_331(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.211499989, 1.0, 2.0, 4.0], [-0.249500006, 3.0, 4.0, 4.0], [-0.621500015, 5.0, 6.0, 5.0], [-0.263500005, 7.0, 8.0, 4.0], [-0.934499979, 9.0, 10.0, 3.0], [0.458000004, 11.0, 12.0, 0.0], [-0.596500039, 13.0, 14.0, 5.0], [-0.294499993, 15.0, 16.0, 1.0], [-0.0892331302, 0.0, 0.0, 0.0], [-0.0214012917, 0.0, 0.0, 0.0], [0.140466481, 0.0, 0.0, 0.0], [-0.17050001, 17.0, 18.0, 4.0], [0.227499992, 19.0, 20.0, 6.0], [0.0835289583, 0.0, 0.0, 0.0], [-0.0726500005, 21.0, 22.0, 4.0], [-0.0123788444, 0.0, 0.0, 0.0], [0.142779127, 0.0, 0.0, 0.0], [-0.179203033, 0.0, 0.0, 0.0], [-0.0407587439, 0.0, 0.0, 0.0], [-0.0689929426, 0.0, 0.0, 0.0], [0.075873524, 0.0, 0.0, 0.0], [-0.119798645, 0.0, 0.0, 0.0], [0.0129864709, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 10, 17, 18, 19, 20, 13, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_332(xs):
    #Predicts Class 2
    function_dict = np.array([[0.249500006, 1.0, 2.0, 6.0], [-0.2755, 3.0, 4.0, 4.0], [0.0592499971, 5.0, 6.0, 4.0], [-0.351500005, 7.0, 8.0, 4.0], [0.0709000006, 9.0, 10.0, 4.0], [-0.654500008, 11.0, 12.0, 5.0], [0.0583676584, 0.0, 0.0, 0.0], [0.0120524364, 0.0, 0.0, 0.0], [-0.108701058, 0.0, 0.0, 0.0], [-0.538499951, 13.0, 14.0, 5.0], [-0.0530479848, 0.0, 0.0, 0.0], [0.0149145024, 0.0, 0.0, 0.0], [-0.115769021, 0.0, 0.0, 0.0], [0.0216825809, 0.0, 0.0, 0.0], [0.138955593, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 13, 14, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 3, 4, 9, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_333(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.0357000008, 1.0, 2.0, 6.0], [0.0915455446, 0.0, 0.0, 0.0], [-0.00389999989, 3.0, 4.0, 6.0], [-0.127182633, 0.0, 0.0, 0.0], [-0.989500046, 5.0, 6.0, 1.0], [0.96449995, 7.0, 8.0, 0.0], [-0.949499965, 9.0, 10.0, 4.0], [0.127508953, 0.0, 0.0, 0.0], [-0.00287987129, 0.0, 0.0, 0.0], [-0.154876798, 0.0, 0.0, 0.0], [0.0077900826, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_334(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.0357000008, 1.0, 2.0, 6.0], [-0.0890310407, 0.0, 0.0, 0.0], [0.0123500004, 3.0, 4.0, 6.0], [0.123560473, 0.0, 0.0, 0.0], [0.0335000008, 5.0, 6.0, 6.0], [-0.121184453, 0.0, 0.0, 0.0], [0.0367000028, 7.0, 8.0, 6.0], [0.13077344, 0.0, 0.0, 0.0], [0.00212088437, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 5, 7, 8])
    branch_indices = np.array([0, 2, 4, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_335(xs):
    #Predicts Class 0
    function_dict = np.array([[0.619500041, 1.0, 2.0, 0.0], [0.555500031, 3.0, 4.0, 0.0], [-0.49150002, 5.0, 6.0, 1.0], [-0.712499976, 7.0, 8.0, 2.0], [-0.918500006, 9.0, 10.0, 3.0], [-0.0917265937, 0.0, 0.0, 0.0], [-0.00612893701, 0.0, 0.0, 0.0], [-0.433499992, 11.0, 12.0, 1.0], [-0.925500035, 13.0, 14.0, 3.0], [-0.00808958337, 0.0, 0.0, 0.0], [0.127837583, 0.0, 0.0, 0.0], [0.0346327238, 0.0, 0.0, 0.0], [-0.0850717425, 0.0, 0.0, 0.0], [-0.0834514722, 0.0, 0.0, 0.0], [0.0506845415, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 9, 10, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_336(xs):
    #Predicts Class 1
    function_dict = np.array([[0.290499985, 1.0, 2.0, 6.0], [-0.534000039, 3.0, 4.0, 2.0], [-0.419499993, 5.0, 6.0, 1.0], [-0.272500008, 7.0, 8.0, 1.0], [-0.119499996, 9.0, 10.0, 4.0], [-0.0201134104, 0.0, 0.0, 0.0], [-0.280499995, 11.0, 12.0, 1.0], [-0.315999985, 13.0, 14.0, 1.0], [0.227499992, 15.0, 16.0, 6.0], [-0.150707096, 0.0, 0.0, 0.0], [-0.850499988, 17.0, 18.0, 3.0], [0.122828759, 0.0, 0.0, 0.0], [0.000560500193, 0.0, 0.0, 0.0], [0.00323495897, 0.0, 0.0, 0.0], [-0.0944118425, 0.0, 0.0, 0.0], [-0.0427157581, 0.0, 0.0, 0.0], [0.112613261, 0.0, 0.0, 0.0], [-0.0620605014, 0.0, 0.0, 0.0], [0.038148962, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 17, 18, 5, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_337(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.526499987, 1.0, 2.0, 2.0], [0.265500009, 3.0, 4.0, 6.0], [-0.875999987, 5.0, 6.0, 3.0], [-0.930500031, 7.0, 8.0, 3.0], [-0.0994150117, 0.0, 0.0, 0.0], [-0.546000004, 9.0, 10.0, 5.0], [0.237500012, 11.0, 12.0, 6.0], [0.237500012, 13.0, 14.0, 6.0], [0.234499991, 15.0, 16.0, 6.0], [-0.0193016138, 0.0, 0.0, 0.0], [0.170167148, 0.0, 0.0, 0.0], [-0.08718808, 0.0, 0.0, 0.0], [0.0443883203, 0.0, 0.0, 0.0], [-0.128047749, 0.0, 0.0, 0.0], [0.0529649742, 0.0, 0.0, 0.0], [0.0546430908, 0.0, 0.0, 0.0], [-0.0368058197, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_338(xs):
    #Predicts Class 3
    function_dict = np.array([[0.966500044, 1.0, 2.0, 0.0], [0.96449995, 3.0, 4.0, 0.0], [0.968500018, 5.0, 6.0, 0.0], [-0.99849999, 7.0, 8.0, 3.0], [-0.994500041, 9.0, 10.0, 1.0], [-0.962499976, 11.0, 12.0, 4.0], [0.139499992, 13.0, 14.0, 6.0], [0.958500028, 15.0, 16.0, 0.0], [0.124499999, 17.0, 18.0, 6.0], [-0.230995044, 0.0, 0.0, 0.0], [-0.0317022949, 0.0, 0.0, 0.0], [-0.0317175724, 0.0, 0.0, 0.0], [0.257403165, 0.0, 0.0, 0.0], [0.123500004, 19.0, 20.0, 6.0], [0.164499998, 21.0, 22.0, 6.0], [-0.0249592979, 0.0, 0.0, 0.0], [0.260148555, 0.0, 0.0, 0.0], [0.00703082979, 0.0, 0.0, 0.0], [-0.151747823, 0.0, 0.0, 0.0], [0.00966346916, 0.0, 0.0, 0.0], [0.13023755, 0.0, 0.0, 0.0], [-0.141379967, 0.0, 0.0, 0.0], [0.0113821207, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 11, 12, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_339(xs):
    #Predicts Class 4
    function_dict = np.array([[0.966500044, 1.0, 2.0, 0.0], [0.96449995, 3.0, 4.0, 0.0], [0.968500018, 5.0, 6.0, 0.0], [-0.99849999, 7.0, 8.0, 3.0], [-0.994500041, 9.0, 10.0, 1.0], [-0.962499976, 11.0, 12.0, 4.0], [0.139499992, 13.0, 14.0, 6.0], [0.958500028, 15.0, 16.0, 0.0], [-0.77700001, 17.0, 18.0, 4.0], [0.231325105, 0.0, 0.0, 0.0], [0.0321270823, 0.0, 0.0, 0.0], [0.032034371, 0.0, 0.0, 0.0], [-0.257153332, 0.0, 0.0, 0.0], [0.123500004, 19.0, 20.0, 6.0], [0.164499998, 21.0, 22.0, 6.0], [0.0291193128, 0.0, 0.0, 0.0], [-0.259593666, 0.0, 0.0, 0.0], [0.134571612, 0.0, 0.0, 0.0], [-0.0370561816, 0.0, 0.0, 0.0], [-0.00878612883, 0.0, 0.0, 0.0], [-0.129623652, 0.0, 0.0, 0.0], [0.141837731, 0.0, 0.0, 0.0], [-0.010420599, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 10, 11, 12, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_340(xs):
    #Predicts Class 0
    function_dict = np.array([[0.619500041, 1.0, 2.0, 0.0], [-0.415499985, 3.0, 4.0, 4.0], [-0.492500007, 5.0, 6.0, 1.0], [-0.440500021, 7.0, 8.0, 1.0], [-0.405499995, 9.0, 10.0, 1.0], [-0.0711702257, 0.0, 0.0, 0.0], [-0.0061525791, 0.0, 0.0, 0.0], [0.107602946, 0.0, 0.0, 0.0], [0.00824526045, 0.0, 0.0, 0.0], [-0.74150002, 11.0, 12.0, 5.0], [-0.738499999, 13.0, 14.0, 5.0], [-0.114728257, 0.0, 0.0, 0.0], [0.0484337509, 0.0, 0.0, 0.0], [0.0827126354, 0.0, 0.0, 0.0], [-0.00547106611, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 11, 12, 13, 14, 5, 6])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_341(xs):
    #Predicts Class 1
    function_dict = np.array([[0.00729500037, 1.0, 2.0, 0.0], [-0.0681604519, 0.0, 0.0, 0.0], [0.107500002, 3.0, 4.0, 0.0], [0.0790459886, 0.0, 0.0, 0.0], [0.252499998, 5.0, 6.0, 0.0], [0.263500005, 7.0, 8.0, 6.0], [-0.881500006, 9.0, 10.0, 3.0], [-0.169449925, 0.0, 0.0, 0.0], [0.0151777919, 0.0, 0.0, 0.0], [-0.0183702204, 0.0, 0.0, 0.0], [0.0389900133, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_342(xs):
    #Predicts Class 2
    function_dict = np.array([[0.220499992, 1.0, 2.0, 6.0], [-0.692000031, 3.0, 4.0, 2.0], [0.227499992, 5.0, 6.0, 6.0], [-0.446500003, 7.0, 8.0, 1.0], [-0.624500036, 9.0, 10.0, 5.0], [0.095595479, 0.0, 0.0, 0.0], [-0.581499994, 11.0, 12.0, 2.0], [0.0152275329, 0.0, 0.0, 0.0], [-0.143753827, 0.0, 0.0, 0.0], [0.102599174, 0.0, 0.0, 0.0], [-0.546000004, 13.0, 14.0, 5.0], [0.530499995, 15.0, 16.0, 0.0], [0.245499998, 17.0, 18.0, 6.0], [-0.110177062, 0.0, 0.0, 0.0], [-0.000952884147, 0.0, 0.0, 0.0], [-0.0895221382, 0.0, 0.0, 0.0], [0.0425127186, 0.0, 0.0, 0.0], [0.115660325, 0.0, 0.0, 0.0], [-0.000410455948, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 13, 14, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 4, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_343(xs):
    #Predicts Class 3
    function_dict = np.array([[0.199499995, 1.0, 2.0, 6.0], [-0.985499978, 3.0, 4.0, 1.0], [0.289499998, 5.0, 6.0, 6.0], [-0.999500036, 7.0, 8.0, 5.0], [-0.997500002, 9.0, 10.0, 3.0], [0.987499952, 11.0, 12.0, 0.0], [-0.9745, 13.0, 14.0, 4.0], [-0.995499969, 15.0, 16.0, 1.0], [0.186500013, 17.0, 18.0, 6.0], [0.0723499954, 19.0, 20.0, 6.0], [-0.970499992, 21.0, 22.0, 5.0], [-0.995499969, 23.0, 24.0, 1.0], [-0.241377413, 0.0, 0.0, 0.0], [0.99150002, 25.0, 26.0, 0.0], [0.300500005, 27.0, 28.0, 6.0], [0.00937640201, 0.0, 0.0, 0.0], [0.125535607, 0.0, 0.0, 0.0], [-0.0186786614, 0.0, 0.0, 0.0], [-0.299226671, 0.0, 0.0, 0.0], [-0.0313466005, 0.0, 0.0, 0.0], [0.199227765, 0.0, 0.0, 0.0], [-0.107747406, 0.0, 0.0, 0.0], [0.0739639103, 0.0, 0.0, 0.0], [0.101094149, 0.0, 0.0, 0.0], [-0.176763758, 0.0, 0.0, 0.0], [-0.162525088, 0.0, 0.0, 0.0], [0.095722869, 0.0, 0.0, 0.0], [0.224930823, 0.0, 0.0, 0.0], [-0.0654458925, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 12, 25, 26, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_344(xs):
    #Predicts Class 4
    function_dict = np.array([[0.199499995, 1.0, 2.0, 6.0], [-0.985499978, 3.0, 4.0, 1.0], [0.229499996, 5.0, 6.0, 6.0], [-0.999500036, 7.0, 8.0, 5.0], [-0.997500002, 9.0, 10.0, 3.0], [0.187859491, 0.0, 0.0, 0.0], [-0.985499978, 11.0, 12.0, 4.0], [-0.995499969, 13.0, 14.0, 1.0], [0.186500013, 15.0, 16.0, 6.0], [0.0723499954, 17.0, 18.0, 6.0], [-0.970499992, 19.0, 20.0, 5.0], [-0.987499952, 21.0, 22.0, 4.0], [-0.977499962, 23.0, 24.0, 4.0], [-0.00871285703, 0.0, 0.0, 0.0], [-0.124874867, 0.0, 0.0, 0.0], [0.0194555502, 0.0, 0.0, 0.0], [0.299496442, 0.0, 0.0, 0.0], [0.0329068154, 0.0, 0.0, 0.0], [-0.197479486, 0.0, 0.0, 0.0], [0.108589917, 0.0, 0.0, 0.0], [-0.0907061622, 0.0, 0.0, 0.0], [0.0672435984, 0.0, 0.0, 0.0], [-0.172303885, 0.0, 0.0, 0.0], [0.180555433, 0.0, 0.0, 0.0], [-0.00870818272, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_345(xs):
    #Predicts Class 0
    function_dict = np.array([[0.135500014, 1.0, 2.0, 0.0], [-0.629000008, 3.0, 4.0, 5.0], [-0.113499999, 5.0, 6.0, 1.0], [0.0794274956, 0.0, 0.0, 0.0], [-0.0173633359, 0.0, 0.0, 0.0], [-0.184500009, 7.0, 8.0, 1.0], [-0.0800764337, 0.0, 0.0, 0.0], [-0.819499969, 9.0, 10.0, 3.0], [0.0857431963, 0.0, 0.0, 0.0], [0.013213397, 0.0, 0.0, 0.0], [-0.0720995292, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 9, 10, 8, 6])
    branch_indices = np.array([0, 1, 2, 5, 7])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_346(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.86650002, 1.0, 2.0, 3.0], [-0.880499959, 3.0, 4.0, 3.0], [-0.742499948, 5.0, 6.0, 5.0], [-0.796499968, 7.0, 8.0, 2.0], [0.12483494, 0.0, 0.0, 0.0], [-0.82249999, 9.0, 10.0, 3.0], [-0.601500034, 11.0, 12.0, 3.0], [0.55250001, 13.0, 14.0, 0.0], [0.549499989, 15.0, 16.0, 0.0], [-0.0338536501, 0.0, 0.0, 0.0], [0.0959208012, 0.0, 0.0, 0.0], [-0.280499995, 17.0, 18.0, 1.0], [0.0498155653, 0.0, 0.0, 0.0], [-0.146859974, 0.0, 0.0, 0.0], [-0.000709655171, 0.0, 0.0, 0.0], [0.0441461839, 0.0, 0.0, 0.0], [-0.0653336942, 0.0, 0.0, 0.0], [0.0023427119, 0.0, 0.0, 0.0], [-0.10850317, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 9, 10, 17, 18, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_347(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.868499994, 1.0, 2.0, 3.0], [-0.892500043, 3.0, 4.0, 3.0], [-0.156500012, 5.0, 6.0, 4.0], [0.387499988, 7.0, 8.0, 0.0], [-0.107847422, 0.0, 0.0, 0.0], [-0.736500025, 9.0, 10.0, 2.0], [-0.184, 11.0, 12.0, 1.0], [-0.592999995, 13.0, 14.0, 2.0], [-0.918500006, 15.0, 16.0, 3.0], [0.0472878926, 0.0, 0.0, 0.0], [-0.0871681571, 0.0, 0.0, 0.0], [-0.0075749997, 17.0, 18.0, 4.0], [-0.779500008, 19.0, 20.0, 3.0], [0.0277435984, 0.0, 0.0, 0.0], [-0.111742206, 0.0, 0.0, 0.0], [-0.0193598364, 0.0, 0.0, 0.0], [0.117729552, 0.0, 0.0, 0.0], [0.168579221, 0.0, 0.0, 0.0], [0.0333881751, 0.0, 0.0, 0.0], [-0.070623897, 0.0, 0.0, 0.0], [0.0350728221, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 9, 10, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_348(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.942499995, 1.0, 2.0, 4.0], [-0.95449996, 3.0, 4.0, 4.0], [-0.936499953, 5.0, 6.0, 4.0], [0.965499997, 7.0, 8.0, 0.0], [0.097450003, 9.0, 10.0, 6.0], [0.155881673, 0.0, 0.0, 0.0], [0.912999988, 11.0, 12.0, 0.0], [0.960500002, 13.0, 14.0, 0.0], [-0.968500018, 15.0, 16.0, 4.0], [0.0618435927, 0.0, 0.0, 0.0], [-0.986500025, 17.0, 18.0, 1.0], [-0.970499992, 19.0, 20.0, 1.0], [-0.932500005, 21.0, 22.0, 4.0], [0.0569144003, 0.0, 0.0, 0.0], [-0.213991046, 0.0, 0.0, 0.0], [-0.0080139786, 0.0, 0.0, 0.0], [0.0834700391, 0.0, 0.0, 0.0], [-0.276450396, 0.0, 0.0, 0.0], [0.0308580846, 0.0, 0.0, 0.0], [-0.16006878, 0.0, 0.0, 0.0], [0.00335934991, 0.0, 0.0, 0.0], [-0.126658842, 0.0, 0.0, 0.0], [0.0765295252, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 17, 18, 5, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_349(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.942499995, 1.0, 2.0, 4.0], [-0.95449996, 3.0, 4.0, 4.0], [-0.936499953, 5.0, 6.0, 4.0], [0.965499997, 7.0, 8.0, 0.0], [0.097450003, 9.0, 10.0, 6.0], [-0.155400157, 0.0, 0.0, 0.0], [-0.932500005, 11.0, 12.0, 4.0], [0.960500002, 13.0, 14.0, 0.0], [-0.968500018, 15.0, 16.0, 4.0], [-0.0612750649, 0.0, 0.0, 0.0], [-0.986500025, 17.0, 18.0, 1.0], [0.127101302, 0.0, 0.0, 0.0], [0.912999988, 19.0, 20.0, 0.0], [-0.0563022271, 0.0, 0.0, 0.0], [0.214291498, 0.0, 0.0, 0.0], [0.00882801134, 0.0, 0.0, 0.0], [-0.0828457102, 0.0, 0.0, 0.0], [0.276974171, 0.0, 0.0, 0.0], [-0.0303407293, 0.0, 0.0, 0.0], [0.0698586479, 0.0, 0.0, 0.0], [-0.0730193555, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 17, 18, 5, 11, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_350(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.951499999, 1.0, 2.0, 3.0], [-0.4815, 3.0, 4.0, 1.0], [-0.537500024, 5.0, 6.0, 1.0], [0.015441142, 0.0, 0.0, 0.0], [-0.0802215487, 0.0, 0.0, 0.0], [-0.0639833286, 0.0, 0.0, 0.0], [-0.676499963, 7.0, 8.0, 2.0], [-0.711500049, 9.0, 10.0, 5.0], [-0.696500003, 11.0, 12.0, 3.0], [0.0157226883, 0.0, 0.0, 0.0], [0.102499761, 0.0, 0.0, 0.0], [-0.0635493696, 0.0, 0.0, 0.0], [0.0515136681, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 2, 6, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_351(xs):
    #Predicts Class 1
    function_dict = np.array([[0.291500002, 1.0, 2.0, 6.0], [-0.342500001, 3.0, 4.0, 1.0], [0.328500003, 5.0, 6.0, 6.0], [0.238499999, 7.0, 8.0, 6.0], [-0.317499995, 9.0, 10.0, 1.0], [0.135500014, 11.0, 12.0, 0.0], [-0.717499971, 13.0, 14.0, 2.0], [-0.801499963, 15.0, 16.0, 5.0], [-0.361499995, 17.0, 18.0, 4.0], [0.111401081, 0.0, 0.0, 0.0], [-0.210999995, 19.0, 20.0, 4.0], [0.0087682819, 0.0, 0.0, 0.0], [0.108171389, 0.0, 0.0, 0.0], [-0.0661309138, 0.0, 0.0, 0.0], [0.0472747833, 0.0, 0.0, 0.0], [-0.0594955795, 0.0, 0.0, 0.0], [0.0627540872, 0.0, 0.0, 0.0], [-5.09135934e-05, 0.0, 0.0, 0.0], [-0.110632166, 0.0, 0.0, 0.0], [0.0502412021, 0.0, 0.0, 0.0], [-0.0326795429, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_352(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.426999986, 1.0, 2.0, 5.0], [0.249500006, 3.0, 4.0, 6.0], [0.0657181442, 0.0, 0.0, 0.0], [-0.2755, 5.0, 6.0, 4.0], [-0.536499977, 7.0, 8.0, 5.0], [-0.361999989, 9.0, 10.0, 4.0], [-0.699499965, 11.0, 12.0, 2.0], [-0.0203900747, 0.0, 0.0, 0.0], [-0.10876964, 0.0, 0.0, 0.0], [0.00472959876, 0.0, 0.0, 0.0], [-0.075531587, 0.0, 0.0, 0.0], [0.0872460753, 0.0, 0.0, 0.0], [-0.0082081072, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 7, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_353(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.976500034, 1.0, 2.0, 4.0], [-0.986500025, 3.0, 4.0, 4.0], [0.968500018, 5.0, 6.0, 0.0], [0.175999999, 7.0, 8.0, 6.0], [0.990499973, 9.0, 10.0, 0.0], [0.961500049, 11.0, 12.0, 0.0], [0.98150003, 13.0, 14.0, 0.0], [0.168500006, 15.0, 16.0, 6.0], [0.193500012, 17.0, 18.0, 6.0], [-0.984500051, 19.0, 20.0, 4.0], [0.994500041, 21.0, 22.0, 0.0], [0.951499999, 23.0, 24.0, 0.0], [0.0978000015, 25.0, 26.0, 6.0], [-0.939499974, 27.0, 28.0, 4.0], [-0.986500025, 29.0, 30.0, 1.0], [-0.00299698883, 0.0, 0.0, 0.0], [0.176842839, 0.0, 0.0, 0.0], [-0.339961529, 0.0, 0.0, 0.0], [0.0347059369, 0.0, 0.0, 0.0], [0.297898531, 0.0, 0.0, 0.0], [0.021703504, 0.0, 0.0, 0.0], [-0.0685581714, 0.0, 0.0, 0.0], [0.101213485, 0.0, 0.0, 0.0], [0.0189453959, 0.0, 0.0, 0.0], [-0.123806156, 0.0, 0.0, 0.0], [-0.0952357128, 0.0, 0.0, 0.0], [0.160874352, 0.0, 0.0, 0.0], [-0.145937979, 0.0, 0.0, 0.0], [0.027301928, 0.0, 0.0, 0.0], [0.0312432367, 0.0, 0.0, 0.0], [-0.137030229, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_354(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.976500034, 1.0, 2.0, 4.0], [-0.986500025, 3.0, 4.0, 4.0], [0.968500018, 5.0, 6.0, 0.0], [0.175999999, 7.0, 8.0, 6.0], [0.990499973, 9.0, 10.0, 0.0], [0.961500049, 11.0, 12.0, 0.0], [0.98150003, 13.0, 14.0, 0.0], [0.168500006, 15.0, 16.0, 6.0], [0.193500012, 17.0, 18.0, 6.0], [-0.984500051, 19.0, 20.0, 4.0], [0.994500041, 21.0, 22.0, 0.0], [0.951499999, 23.0, 24.0, 0.0], [0.0978000015, 25.0, 26.0, 6.0], [-0.939499974, 27.0, 28.0, 4.0], [-0.986500025, 29.0, 30.0, 1.0], [0.00381234963, 0.0, 0.0, 0.0], [-0.176637813, 0.0, 0.0, 0.0], [0.340153992, 0.0, 0.0, 0.0], [-0.0336822048, 0.0, 0.0, 0.0], [-0.297445863, 0.0, 0.0, 0.0], [-0.021053873, 0.0, 0.0, 0.0], [0.0691580549, 0.0, 0.0, 0.0], [-0.100466192, 0.0, 0.0, 0.0], [-0.0248683784, 0.0, 0.0, 0.0], [0.126652583, 0.0, 0.0, 0.0], [0.0957411826, 0.0, 0.0, 0.0], [-0.160061181, 0.0, 0.0, 0.0], [0.146530733, 0.0, 0.0, 0.0], [-0.0266967509, 0.0, 0.0, 0.0], [-0.0304602273, 0.0, 0.0, 0.0], [0.137701452, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_355(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.325500011, 1.0, 2.0, 4.0], [0.402500004, 3.0, 4.0, 0.0], [-0.761500001, 5.0, 6.0, 5.0], [-0.779500008, 7.0, 8.0, 5.0], [-0.415499985, 9.0, 10.0, 1.0], [-0.109680064, 0.0, 0.0, 0.0], [-0.450999975, 11.0, 12.0, 1.0], [0.126637906, 0.0, 0.0, 0.0], [0.0117679778, 0.0, 0.0, 0.0], [-0.82249999, 13.0, 14.0, 2.0], [-0.778499961, 15.0, 16.0, 5.0], [-0.741999984, 17.0, 18.0, 2.0], [-0.233500004, 19.0, 20.0, 4.0], [-0.0345409736, 0.0, 0.0, 0.0], [0.0957251638, 0.0, 0.0, 0.0], [-0.140165284, 0.0, 0.0, 0.0], [0.0553412512, 0.0, 0.0, 0.0], [0.0141887134, 0.0, 0.0, 0.0], [-0.140473664, 0.0, 0.0, 0.0], [0.0738091767, 0.0, 0.0, 0.0], [-0.0132168364, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 13, 14, 15, 16, 5, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_356(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.484499991, 1.0, 2.0, 4.0], [-0.0653154403, 0.0, 0.0, 0.0], [0.584499955, 3.0, 4.0, 0.0], [0.301499993, 5.0, 6.0, 6.0], [0.213499993, 7.0, 8.0, 6.0], [0.549499989, 9.0, 10.0, 0.0], [0.135500014, 11.0, 12.0, 0.0], [-0.0315683298, 0.0, 0.0, 0.0], [0.257499993, 13.0, 14.0, 6.0], [-0.00150496804, 0.0, 0.0, 0.0], [-0.103627391, 0.0, 0.0, 0.0], [-0.0175330453, 0.0, 0.0, 0.0], [0.0907706767, 0.0, 0.0, 0.0], [0.149901167, 0.0, 0.0, 0.0], [0.0106930593, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 7, 13, 14])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_357(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.455500007, 1.0, 2.0, 1.0], [-0.0718800128, 0.0, 0.0, 0.0], [-0.418500006, 3.0, 4.0, 1.0], [0.0822265223, 0.0, 0.0, 0.0], [-0.159500003, 5.0, 6.0, 1.0], [-0.184500009, 7.0, 8.0, 1.0], [-0.0148999998, 9.0, 10.0, 4.0], [0.00473190425, 0.0, 0.0, 0.0], [-0.118650757, 0.0, 0.0, 0.0], [-0.00848670863, 0.0, 0.0, 0.0], [0.0884664133, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_358(xs):
    #Predicts Class 3
    function_dict = np.array([[0.19749999, 1.0, 2.0, 6.0], [0.932500005, 3.0, 4.0, 0.0], [0.33950001, 5.0, 6.0, 6.0], [0.112000003, 7.0, 8.0, 6.0], [0.984500051, 9.0, 10.0, 0.0], [0.989500046, 11.0, 12.0, 0.0], [0.104977891, 0.0, 0.0, 0.0], [0.00702097919, 0.0, 0.0, 0.0], [-0.144129485, 0.0, 0.0, 0.0], [-0.967499971, 13.0, 14.0, 4.0], [0.193500012, 15.0, 16.0, 6.0], [-0.989500046, 17.0, 18.0, 1.0], [0.993499994, 19.0, 20.0, 0.0], [0.133192822, 0.0, 0.0, 0.0], [0.0110883936, 0.0, 0.0, 0.0], [-0.0197609812, 0.0, 0.0, 0.0], [0.13365224, 0.0, 0.0, 0.0], [0.025598973, 0.0, 0.0, 0.0], [-0.159898207, 0.0, 0.0, 0.0], [-0.290223986, 0.0, 0.0, 0.0], [-0.0476367027, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 6])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_359(xs):
    #Predicts Class 4
    function_dict = np.array([[0.19749999, 1.0, 2.0, 6.0], [0.932500005, 3.0, 4.0, 0.0], [0.33950001, 5.0, 6.0, 6.0], [-0.970499992, 7.0, 8.0, 1.0], [0.984500051, 9.0, 10.0, 0.0], [0.989500046, 11.0, 12.0, 0.0], [-0.0905212015, 0.0, 0.0, 0.0], [0.126335219, 0.0, 0.0, 0.0], [-0.0212131273, 0.0, 0.0, 0.0], [-0.967499971, 13.0, 14.0, 4.0], [0.193500012, 15.0, 16.0, 6.0], [0.984500051, 17.0, 18.0, 0.0], [0.993499994, 19.0, 20.0, 0.0], [-0.132648423, 0.0, 0.0, 0.0], [-0.00975018833, 0.0, 0.0, 0.0], [0.0205029137, 0.0, 0.0, 0.0], [-0.133386895, 0.0, 0.0, 0.0], [0.0856300667, 0.0, 0.0, 0.0], [-0.0683113635, 0.0, 0.0, 0.0], [0.290615439, 0.0, 0.0, 0.0], [0.0487476327, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 6])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_360(xs):
    #Predicts Class 0
    function_dict = np.array([[0.21450001, 1.0, 2.0, 6.0], [0.168500006, 3.0, 4.0, 6.0], [0.230500013, 5.0, 6.0, 6.0], [0.0693500042, 7.0, 8.0, 6.0], [-0.901499987, 9.0, 10.0, 3.0], [-0.101720572, 0.0, 0.0, 0.0], [0.245499998, 11.0, 12.0, 6.0], [0.0377756096, 0.0, 0.0, 0.0], [-0.0812185481, 0.0, 0.0, 0.0], [-0.0156128788, 0.0, 0.0, 0.0], [0.111321099, 0.0, 0.0, 0.0], [-0.745499969, 13.0, 14.0, 5.0], [-0.789499998, 15.0, 16.0, 3.0], [0.127824947, 0.0, 0.0, 0.0], [-0.0441581234, 0.0, 0.0, 0.0], [-0.0505477786, 0.0, 0.0, 0.0], [0.0487019531, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 5, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 3, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_361(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.841500044, 1.0, 2.0, 2.0], [-0.0578191467, 0.0, 0.0, 0.0], [0.471499979, 3.0, 4.0, 0.0], [0.257499993, 5.0, 6.0, 6.0], [0.181499988, 7.0, 8.0, 6.0], [-0.433499992, 9.0, 10.0, 1.0], [-0.7755, 11.0, 12.0, 3.0], [-0.0723453611, 0.0, 0.0, 0.0], [0.237500012, 13.0, 14.0, 6.0], [-0.115540437, 0.0, 0.0, 0.0], [-0.0154203381, 0.0, 0.0, 0.0], [0.0622966103, 0.0, 0.0, 0.0], [-0.0399828628, 0.0, 0.0, 0.0], [0.107881717, 0.0, 0.0, 0.0], [0.00331398961, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 7, 13, 14])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_362(xs):
    #Predicts Class 2
    function_dict = np.array([[0.1105, 1.0, 2.0, 4.0], [0.168500006, 3.0, 4.0, 6.0], [0.0574333258, 0.0, 0.0, 0.0], [0.0406751856, 0.0, 0.0, 0.0], [-0.386500001, 5.0, 6.0, 1.0], [-0.0782640725, 0.0, 0.0, 0.0], [-0.293500006, 7.0, 8.0, 1.0], [0.0551656224, 0.0, 0.0, 0.0], [-0.0343915485, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 5, 7, 8, 2])
    branch_indices = np.array([0, 1, 4, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_363(xs):
    #Predicts Class 3
    function_dict = np.array([[0.990499973, 1.0, 2.0, 0.0], [0.166500002, 3.0, 4.0, 6.0], [0.99150002, 5.0, 6.0, 0.0], [0.164499998, 7.0, 8.0, 6.0], [0.175500005, 9.0, 10.0, 6.0], [0.145999998, 11.0, 12.0, 6.0], [0.168500006, 13.0, 14.0, 6.0], [0.986500025, 15.0, 16.0, 0.0], [0.216505364, 0.0, 0.0, 0.0], [-0.30280149, 0.0, 0.0, 0.0], [-0.986500025, 17.0, 18.0, 4.0], [-0.982499957, 19.0, 20.0, 4.0], [-0.0519311316, 0.0, 0.0, 0.0], [0.075849995, 21.0, 22.0, 6.0], [0.178000003, 23.0, 24.0, 6.0], [0.0178090576, 0.0, 0.0, 0.0], [-0.0764518306, 0.0, 0.0, 0.0], [-0.154915214, 0.0, 0.0, 0.0], [0.0302184243, 0.0, 0.0, 0.0], [0.285544157, 0.0, 0.0, 0.0], [0.00553707592, 0.0, 0.0, 0.0], [0.0906203762, 0.0, 0.0, 0.0], [-0.0730384886, 0.0, 0.0, 0.0], [0.253815264, 0.0, 0.0, 0.0], [0.00735644111, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 17, 18, 19, 20, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 4, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_364(xs):
    #Predicts Class 4
    function_dict = np.array([[0.990499973, 1.0, 2.0, 0.0], [-0.968500018, 3.0, 4.0, 4.0], [0.99150002, 5.0, 6.0, 0.0], [0.152999997, 7.0, 8.0, 6.0], [-0.966500044, 9.0, 10.0, 4.0], [0.145999998, 11.0, 12.0, 6.0], [0.168500006, 13.0, 14.0, 6.0], [0.980499983, 15.0, 16.0, 0.0], [0.987499952, 17.0, 18.0, 0.0], [-0.225402862, 0.0, 0.0, 0.0], [-0.958500028, 19.0, 20.0, 4.0], [-0.982499957, 21.0, 22.0, 4.0], [0.0524093211, 0.0, 0.0, 0.0], [0.075849995, 23.0, 24.0, 6.0], [0.178000003, 25.0, 26.0, 6.0], [-0.17157121, 0.0, 0.0, 0.0], [0.0546217449, 0.0, 0.0, 0.0], [0.205743045, 0.0, 0.0, 0.0], [-0.00604988355, 0.0, 0.0, 0.0], [0.0956571102, 0.0, 0.0, 0.0], [-0.0199709162, 0.0, 0.0, 0.0], [-0.285353422, 0.0, 0.0, 0.0], [-0.00509841274, 0.0, 0.0, 0.0], [-0.0892571807, 0.0, 0.0, 0.0], [0.0736120939, 0.0, 0.0, 0.0], [-0.253572166, 0.0, 0.0, 0.0], [-0.00594903622, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 9, 19, 20, 21, 22, 12, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_365(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.325500011, 1.0, 2.0, 4.0], [0.382499993, 3.0, 4.0, 0.0], [0.0930999964, 5.0, 6.0, 0.0], [0.0886113048, 0.0, 0.0, 0.0], [0.280499995, 7.0, 8.0, 6.0], [0.060051173, 0.0, 0.0, 0.0], [-0.761500001, 9.0, 10.0, 5.0], [0.25849998, 11.0, 12.0, 6.0], [-0.0942418426, 0.0, 0.0, 0.0], [-0.104472496, 0.0, 0.0, 0.0], [-0.449000001, 13.0, 14.0, 1.0], [-0.0221772902, 0.0, 0.0, 0.0], [0.141165018, 0.0, 0.0, 0.0], [-0.0919214189, 0.0, 0.0, 0.0], [0.00927510671, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 11, 12, 8, 5, 9, 13, 14])
    branch_indices = np.array([0, 1, 4, 7, 2, 6, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_366(xs):
    #Predicts Class 1
    function_dict = np.array([[0.0498500019, 1.0, 2.0, 6.0], [0.0782511607, 0.0, 0.0, 0.0], [0.201499999, 3.0, 4.0, 6.0], [-0.906499982, 5.0, 6.0, 3.0], [-0.959499955, 7.0, 8.0, 3.0], [0.0230341814, 0.0, 0.0, 0.0], [-0.12980032, 0.0, 0.0, 0.0], [-0.273499995, 9.0, 10.0, 4.0], [-0.952499986, 11.0, 12.0, 3.0], [0.0112919025, 0.0, 0.0, 0.0], [-0.0993031189, 0.0, 0.0, 0.0], [0.087706238, 0.0, 0.0, 0.0], [-0.000261194305, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 9, 10, 11, 12])
    branch_indices = np.array([0, 2, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_367(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.455500007, 1.0, 2.0, 1.0], [-0.0619175024, 0.0, 0.0, 0.0], [0.220499992, 3.0, 4.0, 6.0], [-0.692000031, 5.0, 6.0, 2.0], [0.228500009, 7.0, 8.0, 6.0], [-0.0949170664, 0.0, 0.0, 0.0], [0.199499995, 9.0, 10.0, 6.0], [0.0885574967, 0.0, 0.0, 0.0], [-0.578999996, 11.0, 12.0, 5.0], [0.0809765235, 0.0, 0.0, 0.0], [-0.0681462511, 0.0, 0.0, 0.0], [-0.0440500602, 0.0, 0.0, 0.0], [0.0524519831, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 9, 10, 7, 11, 12])
    branch_indices = np.array([0, 2, 3, 6, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_368(xs):
    #Predicts Class 3
    function_dict = np.array([[0.971500039, 1.0, 2.0, 0.0], [-0.993499994, 3.0, 4.0, 1.0], [-0.980499983, 5.0, 6.0, 1.0], [0.96449995, 7.0, 8.0, 0.0], [-0.999500036, 9.0, 10.0, 2.0], [-0.992499948, 11.0, 12.0, 1.0], [0.147644073, 0.0, 0.0, 0.0], [0.0124920234, 0.0, 0.0, 0.0], [0.0962499976, 13.0, 14.0, 6.0], [0.104499996, 15.0, 16.0, 6.0], [0.91900003, 17.0, 18.0, 0.0], [0.0433499999, 19.0, 20.0, 6.0], [0.977499962, 21.0, 22.0, 0.0], [-0.0521139242, 0.0, 0.0, 0.0], [-0.267287254, 0.0, 0.0, 0.0], [-0.0684198439, 0.0, 0.0, 0.0], [0.112893239, 0.0, 0.0, 0.0], [0.0148303676, 0.0, 0.0, 0.0], [-0.135642394, 0.0, 0.0, 0.0], [-0.0825846568, 0.0, 0.0, 0.0], [0.0341470093, 0.0, 0.0, 0.0], [-0.185938433, 0.0, 0.0, 0.0], [-0.0166338142, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 6])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_369(xs):
    #Predicts Class 4
    function_dict = np.array([[0.971500039, 1.0, 2.0, 0.0], [-0.993499994, 3.0, 4.0, 1.0], [-0.980499983, 5.0, 6.0, 1.0], [0.96449995, 7.0, 8.0, 0.0], [-0.999500036, 9.0, 10.0, 2.0], [-0.992499948, 11.0, 12.0, 1.0], [-0.147046551, 0.0, 0.0, 0.0], [-0.0119391764, 0.0, 0.0, 0.0], [0.0962499976, 13.0, 14.0, 6.0], [0.104499996, 15.0, 16.0, 6.0], [0.91900003, 17.0, 18.0, 0.0], [0.0433499999, 19.0, 20.0, 6.0], [0.977499962, 21.0, 22.0, 0.0], [0.0525314286, 0.0, 0.0, 0.0], [0.267434776, 0.0, 0.0, 0.0], [0.0691004172, 0.0, 0.0, 0.0], [-0.111213379, 0.0, 0.0, 0.0], [-0.0410239436, 0.0, 0.0, 0.0], [0.142958239, 0.0, 0.0, 0.0], [0.0841843933, 0.0, 0.0, 0.0], [-0.033509247, 0.0, 0.0, 0.0], [0.186277911, 0.0, 0.0, 0.0], [0.0173297394, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 6])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_370(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.837499976, 1.0, 2.0, 5.0], [-0.858500004, 3.0, 4.0, 5.0], [0.473500013, 5.0, 6.0, 0.0], [-0.0034517704, 0.0, 0.0, 0.0], [0.0816128328, 0.0, 0.0, 0.0], [0.2685, 7.0, 8.0, 6.0], [0.263500005, 9.0, 10.0, 6.0], [-0.919499993, 11.0, 12.0, 3.0], [-0.362500012, 13.0, 14.0, 4.0], [0.210000008, 15.0, 16.0, 6.0], [0.280499995, 17.0, 18.0, 6.0], [0.0910603032, 0.0, 0.0, 0.0], [-0.000355274678, 0.0, 0.0, 0.0], [0.0523211248, 0.0, 0.0, 0.0], [-0.070039846, 0.0, 0.0, 0.0], [-0.00281565567, 0.0, 0.0, 0.0], [-0.134311721, 0.0, 0.0, 0.0], [0.0779699385, 0.0, 0.0, 0.0], [-0.0396942645, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 13, 14, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 2, 5, 7, 8, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_371(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.935500026, 1.0, 2.0, 3.0], [-0.469500005, 3.0, 4.0, 1.0], [-0.455500007, 5.0, 6.0, 1.0], [-0.125288218, 0.0, 0.0, 0.0], [-0.715999961, 7.0, 8.0, 5.0], [0.475499988, 9.0, 10.0, 0.0], [-0.418500006, 11.0, 12.0, 1.0], [0.253499985, 13.0, 14.0, 6.0], [0.233500004, 15.0, 16.0, 6.0], [-0.00838223659, 0.0, 0.0, 0.0], [0.117799647, 0.0, 0.0, 0.0], [-0.116625004, 0.0, 0.0, 0.0], [-0.721500039, 17.0, 18.0, 5.0], [0.145872384, 0.0, 0.0, 0.0], [0.00104252901, 0.0, 0.0, 0.0], [0.0224154871, 0.0, 0.0, 0.0], [-0.114361629, 0.0, 0.0, 0.0], [-0.0305707362, 0.0, 0.0, 0.0], [0.0389673822, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 13, 14, 15, 16, 9, 10, 11, 17, 18])
    branch_indices = np.array([0, 1, 4, 7, 8, 2, 5, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_372(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.471000016, 1.0, 2.0, 2.0], [-0.510499954, 3.0, 4.0, 2.0], [0.392499983, 5.0, 6.0, 0.0], [-0.455500007, 7.0, 8.0, 1.0], [-0.0872979909, 0.0, 0.0, 0.0], [-0.00975051522, 0.0, 0.0, 0.0], [0.0882984474, 0.0, 0.0, 0.0], [-0.057611648, 0.0, 0.0, 0.0], [-0.788499951, 9.0, 10.0, 3.0], [-0.00483906083, 0.0, 0.0, 0.0], [0.058158908, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 9, 10, 4, 5, 6])
    branch_indices = np.array([0, 1, 3, 8, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_373(xs):
    #Predicts Class 3
    function_dict = np.array([[0.120499998, 1.0, 2.0, 6.0], [0.0957500041, 3.0, 4.0, 6.0], [0.987499952, 5.0, 6.0, 0.0], [0.0581500009, 7.0, 8.0, 6.0], [-0.990499973, 9.0, 10.0, 1.0], [0.229499996, 11.0, 12.0, 6.0], [-0.999500036, 13.0, 14.0, 3.0], [0.0445500016, 15.0, 16.0, 6.0], [-0.98150003, 17.0, 18.0, 4.0], [-0.995499969, 19.0, 20.0, 1.0], [-0.945500016, 21.0, 22.0, 4.0], [-0.992499948, 23.0, 24.0, 1.0], [-0.994500041, 25.0, 26.0, 1.0], [0.988499999, 27.0, 28.0, 0.0], [0.232134998, 0.0, 0.0, 0.0], [0.0220440719, 0.0, 0.0, 0.0], [0.142433092, 0.0, 0.0, 0.0], [-0.132193372, 0.0, 0.0, 0.0], [0.0142905796, 0.0, 0.0, 0.0], [0.0382587202, 0.0, 0.0, 0.0], [0.192204788, 0.0, 0.0, 0.0], [-0.195351452, 0.0, 0.0, 0.0], [0.0716562867, 0.0, 0.0, 0.0], [-0.192442819, 0.0, 0.0, 0.0], [-0.00187563687, 0.0, 0.0, 0.0], [0.121872336, 0.0, 0.0, 0.0], [-0.103133351, 0.0, 0.0, 0.0], [0.146991521, 0.0, 0.0, 0.0], [-0.0610039905, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 14])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_374(xs):
    #Predicts Class 4
    function_dict = np.array([[0.122500002, 1.0, 2.0, 6.0], [0.0957500041, 3.0, 4.0, 6.0], [-0.967499971, 5.0, 6.0, 5.0], [0.0581500009, 7.0, 8.0, 6.0], [-0.990499973, 9.0, 10.0, 1.0], [-0.99849999, 11.0, 12.0, 5.0], [-0.101138048, 0.0, 0.0, 0.0], [0.0445500016, 13.0, 14.0, 6.0], [-0.98150003, 15.0, 16.0, 4.0], [-0.995499969, 17.0, 18.0, 1.0], [-0.945500016, 19.0, 20.0, 4.0], [-0.959499955, 21.0, 22.0, 4.0], [-0.936499953, 23.0, 24.0, 4.0], [-0.0198191945, 0.0, 0.0, 0.0], [-0.149570942, 0.0, 0.0, 0.0], [0.132490352, 0.0, 0.0, 0.0], [-0.0140995095, 0.0, 0.0, 0.0], [-0.0378149897, 0.0, 0.0, 0.0], [-0.191905379, 0.0, 0.0, 0.0], [0.195477828, 0.0, 0.0, 0.0], [-0.0705304295, 0.0, 0.0, 0.0], [0.0271914825, 0.0, 0.0, 0.0], [-0.139607519, 0.0, 0.0, 0.0], [0.247119069, 0.0, 0.0, 0.0], [0.050376635, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_375(xs):
    #Predicts Class 0
    function_dict = np.array([[0.619500041, 1.0, 2.0, 0.0], [-0.413500011, 3.0, 4.0, 4.0], [-0.0610704497, 0.0, 0.0, 0.0], [0.0734613016, 0.0, 0.0, 0.0], [-0.791499972, 5.0, 6.0, 2.0], [0.249500006, 7.0, 8.0, 6.0], [0.245499998, 9.0, 10.0, 6.0], [-0.112009436, 0.0, 0.0, 0.0], [0.00891900528, 0.0, 0.0, 0.0], [0.0457882322, 0.0, 0.0, 0.0], [-0.0255235471, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 2])
    branch_indices = np.array([0, 1, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_376(xs):
    #Predicts Class 1
    function_dict = np.array([[0.245499998, 1.0, 2.0, 6.0], [-0.0970499963, 3.0, 4.0, 4.0], [0.0945999995, 5.0, 6.0, 0.0], [-0.603500009, 7.0, 8.0, 2.0], [-0.538499951, 9.0, 10.0, 5.0], [-0.059426818, 0.0, 0.0, 0.0], [-0.256500006, 11.0, 12.0, 4.0], [-0.658499956, 13.0, 14.0, 2.0], [-0.127397761, 0.0, 0.0, 0.0], [0.101394862, 0.0, 0.0, 0.0], [-0.0410069562, 0.0, 0.0, 0.0], [-0.763499975, 15.0, 16.0, 5.0], [-0.571500003, 17.0, 18.0, 5.0], [-0.0414301865, 0.0, 0.0, 0.0], [0.105015285, 0.0, 0.0, 0.0], [0.0429735817, 0.0, 0.0, 0.0], [-0.122822903, 0.0, 0.0, 0.0], [0.120646045, 0.0, 0.0, 0.0], [-0.014009227, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_377(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.523499966, 1.0, 2.0, 2.0], [-0.178499997, 3.0, 4.0, 1.0], [-0.83949995, 5.0, 6.0, 3.0], [-0.931499958, 7.0, 8.0, 3.0], [-0.0635882169, 0.0, 0.0, 0.0], [-0.453999996, 9.0, 10.0, 2.0], [-0.020469619, 0.0, 0.0, 0.0], [0.237500012, 11.0, 12.0, 6.0], [0.238499999, 13.0, 14.0, 6.0], [0.115130134, 0.0, 0.0, 0.0], [-0.00864840485, 0.0, 0.0, 0.0], [-0.0881368071, 0.0, 0.0, 0.0], [0.0247719344, 0.0, 0.0, 0.0], [0.0571811274, 0.0, 0.0, 0.0], [-0.0279710125, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 9, 10, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_378(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.999500036, 1.0, 2.0, 3.0], [0.965499997, 3.0, 4.0, 0.0], [0.992499948, 5.0, 6.0, 0.0], [0.140000001, 7.0, 8.0, 6.0], [0.975499988, 9.0, 10.0, 0.0], [-0.960500002, 11.0, 12.0, 4.0], [0.0872833952, 0.0, 0.0, 0.0], [-0.203078181, 0.0, 0.0, 0.0], [0.10804531, 0.0, 0.0, 0.0], [0.174999997, 13.0, 14.0, 6.0], [0.151499987, 15.0, 16.0, 6.0], [-0.995499969, 17.0, 18.0, 1.0], [0.124499999, 19.0, 20.0, 6.0], [0.204155073, 0.0, 0.0, 0.0], [0.031273175, 0.0, 0.0, 0.0], [0.0361468866, 0.0, 0.0, 0.0], [-0.0224659257, 0.0, 0.0, 0.0], [-0.246204525, 0.0, 0.0, 0.0], [-0.0712360367, 0.0, 0.0, 0.0], [0.0347264707, 0.0, 0.0, 0.0], [-0.0798505917, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 6])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_379(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.999500036, 1.0, 2.0, 3.0], [0.965499997, 3.0, 4.0, 0.0], [0.992499948, 5.0, 6.0, 0.0], [0.140000001, 7.0, 8.0, 6.0], [0.975499988, 9.0, 10.0, 0.0], [-0.960500002, 11.0, 12.0, 4.0], [-0.0866225958, 0.0, 0.0, 0.0], [0.203767404, 0.0, 0.0, 0.0], [-0.105490141, 0.0, 0.0, 0.0], [0.174999997, 13.0, 14.0, 6.0], [0.151499987, 15.0, 16.0, 6.0], [-0.995499969, 17.0, 18.0, 1.0], [0.124499999, 19.0, 20.0, 6.0], [-0.20382297, 0.0, 0.0, 0.0], [-0.0307103023, 0.0, 0.0, 0.0], [-0.0354688726, 0.0, 0.0, 0.0], [0.023116488, 0.0, 0.0, 0.0], [0.2465574, 0.0, 0.0, 0.0], [0.0719318092, 0.0, 0.0, 0.0], [-0.0356320664, 0.0, 0.0, 0.0], [0.0743699968, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 6])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_380(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.484499991, 1.0, 2.0, 4.0], [0.0614109524, 0.0, 0.0, 0.0], [0.32950002, 3.0, 4.0, 6.0], [0.345499992, 5.0, 6.0, 0.0], [0.0552179404, 0.0, 0.0, 0.0], [-0.624500036, 7.0, 8.0, 5.0], [0.280499995, 9.0, 10.0, 6.0], [0.0601685233, 0.0, 0.0, 0.0], [-0.052605316, 0.0, 0.0, 0.0], [-0.0187346973, 0.0, 0.0, 0.0], [-0.13827461, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 7, 8, 9, 10, 4])
    branch_indices = np.array([0, 2, 3, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_381(xs):
    #Predicts Class 1
    function_dict = np.array([[0.0538999997, 1.0, 2.0, 6.0], [0.059158314, 0.0, 0.0, 0.0], [-0.7245, 3.0, 4.0, 5.0], [-0.29549998, 5.0, 6.0, 4.0], [-0.630499959, 7.0, 8.0, 2.0], [0.619500041, 9.0, 10.0, 0.0], [0.104751267, 0.0, 0.0, 0.0], [0.234999999, 11.0, 12.0, 6.0], [0.519000053, 13.0, 14.0, 0.0], [-0.0289052408, 0.0, 0.0, 0.0], [0.0742699727, 0.0, 0.0, 0.0], [-0.159326822, 0.0, 0.0, 0.0], [-0.0240325257, 0.0, 0.0, 0.0], [-0.0107463645, 0.0, 0.0, 0.0], [0.0827266499, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 6, 11, 12, 13, 14])
    branch_indices = np.array([0, 2, 3, 5, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_382(xs):
    #Predicts Class 2
    function_dict = np.array([[0.531499982, 1.0, 2.0, 0.0], [0.485500008, 3.0, 4.0, 0.0], [-0.0962499976, 5.0, 6.0, 4.0], [0.457499981, 7.0, 8.0, 0.0], [-0.28549999, 9.0, 10.0, 1.0], [-0.895500004, 11.0, 12.0, 3.0], [-0.0917549953, 0.0, 0.0, 0.0], [0.00493500009, 13.0, 14.0, 4.0], [-0.0704652518, 0.0, 0.0, 0.0], [0.00818543602, 0.0, 0.0, 0.0], [0.107662141, 0.0, 0.0, 0.0], [0.063178055, 0.0, 0.0, 0.0], [-0.0539220758, 0.0, 0.0, 0.0], [-0.0152038075, 0.0, 0.0, 0.0], [0.07246501, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_383(xs):
    #Predicts Class 3
    function_dict = np.array([[0.112499997, 1.0, 2.0, 6.0], [0.1105, 3.0, 4.0, 6.0], [0.116499998, 5.0, 6.0, 6.0], [-0.987499952, 7.0, 8.0, 1.0], [-0.247068658, 0.0, 0.0, 0.0], [0.14781934, 0.0, 0.0, 0.0], [0.994500041, 9.0, 10.0, 0.0], [-0.956499994, 11.0, 12.0, 4.0], [-0.982499957, 13.0, 14.0, 5.0], [-0.993499994, 15.0, 16.0, 4.0], [0.147, 17.0, 18.0, 6.0], [0.00120402954, 0.0, 0.0, 0.0], [-0.112896308, 0.0, 0.0, 0.0], [0.142635405, 0.0, 0.0, 0.0], [-0.0616979599, 0.0, 0.0, 0.0], [0.145718411, 0.0, 0.0, 0.0], [0.00703604007, 0.0, 0.0, 0.0], [-0.208465323, 0.0, 0.0, 0.0], [0.0203723032, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_384(xs):
    #Predicts Class 4
    function_dict = np.array([[0.112499997, 1.0, 2.0, 6.0], [0.1105, 3.0, 4.0, 6.0], [0.116499998, 5.0, 6.0, 6.0], [-0.987499952, 7.0, 8.0, 1.0], [0.24763, 0.0, 0.0, 0.0], [-0.147482425, 0.0, 0.0, 0.0], [0.994500041, 9.0, 10.0, 0.0], [-0.956499994, 11.0, 12.0, 4.0], [-0.982499957, 13.0, 14.0, 5.0], [-0.993499994, 15.0, 16.0, 4.0], [0.147, 17.0, 18.0, 6.0], [-0.000501297996, 0.0, 0.0, 0.0], [0.113448419, 0.0, 0.0, 0.0], [-0.141454443, 0.0, 0.0, 0.0], [0.0566588044, 0.0, 0.0, 0.0], [-0.145141914, 0.0, 0.0, 0.0], [-0.00753457425, 0.0, 0.0, 0.0], [0.208803311, 0.0, 0.0, 0.0], [-0.0193674248, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_385(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.895500004, 1.0, 2.0, 3.0], [-0.392499983, 3.0, 4.0, 1.0], [-0.879500031, 5.0, 6.0, 3.0], [0.456499994, 7.0, 8.0, 0.0], [-0.759500027, 9.0, 10.0, 2.0], [0.0957647189, 0.0, 0.0, 0.0], [-0.294499993, 11.0, 12.0, 1.0], [-0.763499975, 13.0, 14.0, 5.0], [-0.821500003, 15.0, 16.0, 2.0], [-0.00253611198, 0.0, 0.0, 0.0], [-0.129780442, 0.0, 0.0, 0.0], [-0.770500004, 17.0, 18.0, 5.0], [-0.57249999, 19.0, 20.0, 2.0], [-0.0748551562, 0.0, 0.0, 0.0], [0.00828297529, 0.0, 0.0, 0.0], [-0.0266097263, 0.0, 0.0, 0.0], [0.132024705, 0.0, 0.0, 0.0], [0.0264233779, 0.0, 0.0, 0.0], [-0.0752672702, 0.0, 0.0, 0.0], [0.0729429796, 0.0, 0.0, 0.0], [-0.0293836426, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_386(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.83949995, 1.0, 2.0, 2.0], [-0.0613594875, 0.0, 0.0, 0.0], [-0.404500008, 3.0, 4.0, 4.0], [-0.827499986, 5.0, 6.0, 5.0], [-0.778499961, 7.0, 8.0, 5.0], [-0.0178566687, 0.0, 0.0, 0.0], [0.133734465, 0.0, 0.0, 0.0], [-0.76849997, 9.0, 10.0, 2.0], [-0.452499986, 11.0, 12.0, 1.0], [-0.00225352333, 0.0, 0.0, 0.0], [-0.0985873863, 0.0, 0.0, 0.0], [0.0854141861, 0.0, 0.0, 0.0], [-0.00394308334, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 9, 10, 11, 12])
    branch_indices = np.array([0, 2, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_387(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.159500003, 1.0, 2.0, 1.0], [-0.0157500003, 3.0, 4.0, 4.0], [-0.0967999995, 5.0, 6.0, 1.0], [-0.0847499967, 7.0, 8.0, 4.0], [-0.436999977, 9.0, 10.0, 5.0], [0.0801852271, 0.0, 0.0, 0.0], [0.375499994, 11.0, 12.0, 0.0], [0.541499972, 13.0, 14.0, 0.0], [0.0992701203, 0.0, 0.0, 0.0], [-0.113937706, 0.0, 0.0, 0.0], [0.031720683, 0.0, 0.0, 0.0], [-0.0649577156, 0.0, 0.0, 0.0], [0.0787152275, 0.0, 0.0, 0.0], [-0.0551523231, 0.0, 0.0, 0.0], [0.0184011776, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 5, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_388(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.935500026, 1.0, 2.0, 1.0], [-0.971500039, 3.0, 4.0, 1.0], [-0.898499966, 5.0, 6.0, 5.0], [0.03565, 7.0, 8.0, 6.0], [0.138025269, 0.0, 0.0, 0.0], [-0.115421452, 0.0, 0.0, 0.0], [0.000824921939, 0.0, 0.0, 0.0], [-0.035149999, 9.0, 10.0, 6.0], [0.0714000016, 11.0, 12.0, 6.0], [-0.0379647687, 0.0, 0.0, 0.0], [0.111181751, 0.0, 0.0, 0.0], [-0.0798826069, 0.0, 0.0, 0.0], [0.00160477939, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 4, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_389(xs):
    #Predicts Class 4
    function_dict = np.array([[0.03565, 1.0, 2.0, 6.0], [0.0297500007, 3.0, 4.0, 6.0], [0.0402499996, 5.0, 6.0, 6.0], [-0.994500041, 7.0, 8.0, 1.0], [-0.151727408, 0.0, 0.0, 0.0], [0.150475472, 0.0, 0.0, 0.0], [0.0429000035, 9.0, 10.0, 6.0], [-0.975499988, 11.0, 12.0, 4.0], [-0.0805691928, 0.0, 0.0, 0.0], [-0.0995218083, 0.0, 0.0, 0.0], [0.0714000016, 13.0, 14.0, 6.0], [-0.000409240747, 0.0, 0.0, 0.0], [0.0965895504, 0.0, 0.0, 0.0], [0.0920132995, 0.0, 0.0, 0.0], [-0.0028881717, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 4, 5, 9, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 2, 6, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_390(xs):
    #Predicts Class 0
    function_dict = np.array([[0.135500014, 1.0, 2.0, 0.0], [-0.712499976, 3.0, 4.0, 2.0], [-0.113499999, 5.0, 6.0, 1.0], [-0.0136474846, 0.0, 0.0, 0.0], [0.0693190396, 0.0, 0.0, 0.0], [0.21450001, 7.0, 8.0, 6.0], [-0.0708566234, 0.0, 0.0, 0.0], [-0.468500018, 9.0, 10.0, 1.0], [0.455500007, 11.0, 12.0, 0.0], [-0.0400044471, 0.0, 0.0, 0.0], [0.0625882745, 0.0, 0.0, 0.0], [0.0178118944, 0.0, 0.0, 0.0], [-0.0507565849, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 9, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 2, 5, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_391(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.497500002, 1.0, 2.0, 5.0], [-0.560500026, 3.0, 4.0, 5.0], [-0.527500033, 5.0, 6.0, 2.0], [-0.698500037, 7.0, 8.0, 3.0], [-0.872500002, 9.0, 10.0, 3.0], [0.0844615847, 0.0, 0.0, 0.0], [-0.0163696557, 0.0, 0.0, 0.0], [-0.6875, 11.0, 12.0, 5.0], [-0.0681978092, 0.0, 0.0, 0.0], [-0.0157962814, 0.0, 0.0, 0.0], [-0.0921092108, 0.0, 0.0, 0.0], [-0.0110565266, 0.0, 0.0, 0.0], [0.0605826899, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 9, 10, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 4, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_392(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.397500008, 1.0, 2.0, 2.0], [-0.49849999, 3.0, 4.0, 5.0], [0.0618339889, 0.0, 0.0, 0.0], [-0.237500012, 5.0, 6.0, 1.0], [-0.206, 7.0, 8.0, 1.0], [-0.816499949, 9.0, 10.0, 3.0], [-0.786499977, 11.0, 12.0, 3.0], [0.020187255, 0.0, 0.0, 0.0], [-0.0973179862, 0.0, 0.0, 0.0], [-0.0513328463, 0.0, 0.0, 0.0], [0.038013041, 0.0, 0.0, 0.0], [0.0610287897, 0.0, 0.0, 0.0], [-0.0159407668, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 7, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_393(xs):
    #Predicts Class 3
    function_dict = np.array([[0.932500005, 1.0, 2.0, 0.0], [0.899500012, 3.0, 4.0, 0.0], [0.962499976, 5.0, 6.0, 0.0], [0.0206088163, 0.0, 0.0, 0.0], [-0.984500051, 7.0, 8.0, 5.0], [-0.902500033, 9.0, 10.0, 4.0], [-0.909500003, 11.0, 12.0, 4.0], [-0.155432805, 0.0, 0.0, 0.0], [-0.00535508292, 0.0, 0.0, 0.0], [-0.997500002, 13.0, 14.0, 5.0], [-0.0471087359, 0.0, 0.0, 0.0], [-0.925500035, 15.0, 16.0, 4.0], [0.0866405889, 0.0, 0.0, 0.0], [0.0198440552, 0.0, 0.0, 0.0], [0.224328041, 0.0, 0.0, 0.0], [-0.000814071042, 0.0, 0.0, 0.0], [-0.14773494, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 13, 14, 10, 15, 16, 12])
    branch_indices = np.array([0, 1, 4, 2, 5, 9, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_394(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.992499948, 1.0, 2.0, 4.0], [0.994500041, 3.0, 4.0, 0.0], [0.194499999, 5.0, 6.0, 6.0], [0.993499994, 7.0, 8.0, 0.0], [0.105499998, 9.0, 10.0, 6.0], [0.932500005, 11.0, 12.0, 0.0], [-0.987499952, 13.0, 14.0, 4.0], [-0.994500041, 15.0, 16.0, 4.0], [-0.192294151, 0.0, 0.0, 0.0], [0.17213425, 0.0, 0.0, 0.0], [0.00713837193, 0.0, 0.0, 0.0], [0.899999976, 17.0, 18.0, 0.0], [0.956499994, 19.0, 20.0, 0.0], [0.183557972, 0.0, 0.0, 0.0], [-0.985499978, 21.0, 22.0, 4.0], [0.00175674981, 0.0, 0.0, 0.0], [0.138698757, 0.0, 0.0, 0.0], [-0.0175173208, 0.0, 0.0, 0.0], [0.131725192, 0.0, 0.0, 0.0], [-0.140459806, 0.0, 0.0, 0.0], [-0.0113191651, 0.0, 0.0, 0.0], [-0.108342245, 0.0, 0.0, 0.0], [0.0315682031, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 10, 17, 18, 19, 20, 13, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_395(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.484499991, 1.0, 2.0, 4.0], [0.0515342951, 0.0, 0.0, 0.0], [-0.763499975, 3.0, 4.0, 5.0], [0.245499998, 5.0, 6.0, 6.0], [0.250499994, 7.0, 8.0, 6.0], [-0.790500045, 9.0, 10.0, 2.0], [-0.778499961, 11.0, 12.0, 2.0], [0.317499995, 13.0, 14.0, 0.0], [-0.600499988, 15.0, 16.0, 2.0], [-0.0430607237, 0.0, 0.0, 0.0], [0.077481322, 0.0, 0.0, 0.0], [-0.00600112462, 0.0, 0.0, 0.0], [-0.124135323, 0.0, 0.0, 0.0], [0.0443269275, 0.0, 0.0, 0.0], [-0.0745108351, 0.0, 0.0, 0.0], [0.0732582733, 0.0, 0.0, 0.0], [-0.0575266965, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_396(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.841500044, 1.0, 2.0, 2.0], [-0.0528769344, 0.0, 0.0, 0.0], [-0.404500008, 3.0, 4.0, 4.0], [-0.827499986, 5.0, 6.0, 5.0], [-0.658499956, 7.0, 8.0, 2.0], [-0.00271254568, 0.0, 0.0, 0.0], [0.106339119, 0.0, 0.0, 0.0], [-0.702499986, 9.0, 10.0, 5.0], [-0.198500007, 11.0, 12.0, 1.0], [0.00593502726, 0.0, 0.0, 0.0], [-0.0680269226, 0.0, 0.0, 0.0], [0.0593022034, 0.0, 0.0, 0.0], [-0.0124455327, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 9, 10, 11, 12])
    branch_indices = np.array([0, 2, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_397(xs):
    #Predicts Class 2
    function_dict = np.array([[0.28549999, 1.0, 2.0, 6.0], [0.578500032, 3.0, 4.0, 0.0], [-0.0509079322, 0.0, 0.0, 0.0], [0.211499989, 5.0, 6.0, 6.0], [-0.0329661146, 0.0, 0.0, 0.0], [-0.631500006, 7.0, 8.0, 5.0], [0.229499996, 9.0, 10.0, 6.0], [0.0342810825, 0.0, 0.0, 0.0], [-0.0678698719, 0.0, 0.0, 0.0], [0.0903747529, 0.0, 0.0, 0.0], [0.010762563, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 4, 2])
    branch_indices = np.array([0, 1, 3, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_398(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.984500051, 1.0, 2.0, 3.0], [-0.834499955, 3.0, 4.0, 4.0], [-0.0944362804, 0.0, 0.0, 0.0], [-0.864500046, 5.0, 6.0, 4.0], [-0.922500014, 7.0, 8.0, 5.0], [-0.978500009, 9.0, 10.0, 1.0], [-0.138771102, 0.0, 0.0, 0.0], [0.138560489, 0.0, 0.0, 0.0], [-0.0382302031, 0.0, 0.0, 0.0], [-0.00151092943, 0.0, 0.0, 0.0], [0.120276779, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 6, 7, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_399(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [-0.0639600307, 0.0, 0.0, 0.0], [-0.994500041, 3.0, 4.0, 4.0], [0.107836425, 0.0, 0.0, 0.0], [0.300500005, 5.0, 6.0, 6.0], [0.289499998, 7.0, 8.0, 6.0], [0.0782921538, 0.0, 0.0, 0.0], [0.00143701467, 0.0, 0.0, 0.0], [-0.0862196833, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 6])
    branch_indices = np.array([0, 2, 4, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_400(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.5255, 1.0, 2.0, 5.0], [0.157499999, 3.0, 4.0, 0.0], [-0.0556641668, 0.0, 0.0, 0.0], [-0.227499992, 5.0, 6.0, 4.0], [-0.24849999, 7.0, 8.0, 1.0], [-0.0108638573, 0.0, 0.0, 0.0], [0.0984830409, 0.0, 0.0, 0.0], [0.346000016, 9.0, 10.0, 0.0], [-0.722499967, 11.0, 12.0, 3.0], [0.0614286326, 0.0, 0.0, 0.0], [-0.0110761607, 0.0, 0.0, 0.0], [-0.0922763422, 0.0, 0.0, 0.0], [0.0141411005, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 6, 9, 10, 11, 12, 2])
    branch_indices = np.array([0, 1, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_401(xs):
    #Predicts Class 1
    function_dict = np.array([[0.301499993, 1.0, 2.0, 6.0], [0.327499986, 3.0, 4.0, 0.0], [-0.83949995, 5.0, 6.0, 3.0], [-0.858500004, 7.0, 8.0, 3.0], [-0.862499952, 9.0, 10.0, 3.0], [-0.0192847215, 0.0, 0.0, 0.0], [0.0890487954, 0.0, 0.0, 0.0], [-0.70449996, 11.0, 12.0, 2.0], [-0.583500028, 13.0, 14.0, 5.0], [-0.29549998, 15.0, 16.0, 4.0], [-0.666499972, 17.0, 18.0, 5.0], [0.0798891261, 0.0, 0.0, 0.0], [-0.0262350421, 0.0, 0.0, 0.0], [-0.142390817, 0.0, 0.0, 0.0], [-0.00683029788, 0.0, 0.0, 0.0], [-0.0548638105, 0.0, 0.0, 0.0], [0.0218448192, 0.0, 0.0, 0.0], [0.0939069465, 0.0, 0.0, 0.0], [-0.0200158879, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 15, 16, 17, 18, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_402(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.426999986, 1.0, 2.0, 5.0], [0.257499993, 3.0, 4.0, 6.0], [0.0468765758, 0.0, 0.0, 0.0], [-0.469999999, 5.0, 6.0, 2.0], [-0.0693943426, 0.0, 0.0, 0.0], [-0.114500001, 7.0, 8.0, 1.0], [0.0768036097, 0.0, 0.0, 0.0], [0.00801456347, 0.0, 0.0, 0.0], [-0.0673630685, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 6, 4, 2])
    branch_indices = np.array([0, 1, 3, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_403(xs):
    #Predicts Class 3
    function_dict = np.array([[0.194499999, 1.0, 2.0, 6.0], [-0.995499969, 3.0, 4.0, 3.0], [0.289499998, 5.0, 6.0, 6.0], [0.193500012, 7.0, 8.0, 6.0], [-0.0964758098, 0.0, 0.0, 0.0], [0.98150003, 9.0, 10.0, 0.0], [-0.986500025, 11.0, 12.0, 4.0], [0.968500018, 13.0, 14.0, 0.0], [0.143752068, 0.0, 0.0, 0.0], [-0.95449996, 15.0, 16.0, 4.0], [-0.987499952, 17.0, 18.0, 4.0], [-0.0981783196, 0.0, 0.0, 0.0], [0.299499989, 19.0, 20.0, 6.0], [0.0682604834, 0.0, 0.0, 0.0], [-0.00577285327, 0.0, 0.0, 0.0], [-0.206043467, 0.0, 0.0, 0.0], [-0.0193694588, 0.0, 0.0, 0.0], [-0.0886747912, 0.0, 0.0, 0.0], [0.0359507389, 0.0, 0.0, 0.0], [0.161203191, 0.0, 0.0, 0.0], [-0.0116523467, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 15, 16, 17, 18, 11, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 9, 10, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_404(xs):
    #Predicts Class 4
    function_dict = np.array([[0.194499999, 1.0, 2.0, 6.0], [0.193500012, 3.0, 4.0, 6.0], [-0.987499952, 5.0, 6.0, 4.0], [-0.985499978, 7.0, 8.0, 4.0], [-0.110298723, 0.0, 0.0, 0.0], [0.993499994, 9.0, 10.0, 0.0], [-0.995499969, 11.0, 12.0, 1.0], [0.1655, 13.0, 14.0, 6.0], [-0.982499957, 15.0, 16.0, 4.0], [0.186832935, 0.0, 0.0, 0.0], [-0.0517593697, 0.0, 0.0, 0.0], [0.988499999, 17.0, 18.0, 0.0], [-0.95449996, 19.0, 20.0, 4.0], [-0.00997119304, 0.0, 0.0, 0.0], [0.199789613, 0.0, 0.0, 0.0], [-0.129803613, 0.0, 0.0, 0.0], [0.00211515301, 0.0, 0.0, 0.0], [0.0250918195, 0.0, 0.0, 0.0], [-0.117815241, 0.0, 0.0, 0.0], [0.173068523, 0.0, 0.0, 0.0], [-0.039623417, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 9, 10, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_405(xs):
    #Predicts Class 0
    function_dict = np.array([[0.647500038, 1.0, 2.0, 0.0], [-0.377499998, 3.0, 4.0, 4.0], [-0.0608945526, 0.0, 0.0, 0.0], [-0.456499994, 5.0, 6.0, 1.0], [-0.763499975, 7.0, 8.0, 5.0], [0.13631779, 0.0, 0.0, 0.0], [-0.811499953, 9.0, 10.0, 5.0], [-0.406499982, 11.0, 12.0, 1.0], [0.379500002, 13.0, 14.0, 0.0], [0.0271467324, 0.0, 0.0, 0.0], [-0.0581096523, 0.0, 0.0, 0.0], [-0.109580442, 0.0, 0.0, 0.0], [0.0156115834, 0.0, 0.0, 0.0], [-0.0217515975, 0.0, 0.0, 0.0], [0.0321913697, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 9, 10, 11, 12, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_406(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.721500039, 1.0, 2.0, 3.0], [-0.470499992, 3.0, 4.0, 1.0], [-0.162, 5.0, 6.0, 4.0], [0.556499958, 7.0, 8.0, 0.0], [0.549499989, 9.0, 10.0, 0.0], [0.0814662725, 0.0, 0.0, 0.0], [-0.0230824761, 0.0, 0.0, 0.0], [-0.0968678445, 0.0, 0.0, 0.0], [0.0313456953, 0.0, 0.0, 0.0], [-0.712499976, 11.0, 12.0, 2.0], [0.218499988, 13.0, 14.0, 6.0], [0.0788884163, 0.0, 0.0, 0.0], [-0.0141946701, 0.0, 0.0, 0.0], [-0.122881688, 0.0, 0.0, 0.0], [0.0138801252, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 11, 12, 13, 14, 5, 6])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_407(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.455500007, 1.0, 2.0, 1.0], [-0.0476038791, 0.0, 0.0, 0.0], [-0.328500003, 3.0, 4.0, 1.0], [-0.721500039, 5.0, 6.0, 5.0], [-0.841500044, 7.0, 8.0, 3.0], [0.0824805051, 0.0, 0.0, 0.0], [0.00538476044, 0.0, 0.0, 0.0], [-0.534000039, 9.0, 10.0, 2.0], [0.402999997, 11.0, 12.0, 0.0], [-0.0126636112, 0.0, 0.0, 0.0], [0.0565265492, 0.0, 0.0, 0.0], [0.0186369512, 0.0, 0.0, 0.0], [-0.0910686105, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 9, 10, 11, 12])
    branch_indices = np.array([0, 2, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_408(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.989500046, 1.0, 2.0, 4.0], [-0.996500015, 3.0, 4.0, 1.0], [0.99150002, 5.0, 6.0, 0.0], [0.113000005, 7.0, 8.0, 6.0], [0.193220839, 0.0, 0.0, 0.0], [0.192499995, 9.0, 10.0, 6.0], [0.158500001, 11.0, 12.0, 6.0], [0.108500004, 13.0, 14.0, 6.0], [-0.99150002, 15.0, 16.0, 4.0], [0.175500005, 17.0, 18.0, 6.0], [-0.997500002, 19.0, 20.0, 1.0], [0.102499999, 21.0, 22.0, 6.0], [-0.141540349, 0.0, 0.0, 0.0], [0.0363226235, 0.0, 0.0, 0.0], [-0.266372859, 0.0, 0.0, 0.0], [-0.0375406146, 0.0, 0.0, 0.0], [0.12451075, 0.0, 0.0, 0.0], [-0.00436210725, 0.0, 0.0, 0.0], [0.0979254469, 0.0, 0.0, 0.0], [-0.142239854, 0.0, 0.0, 0.0], [0.00161881209, 0.0, 0.0, 0.0], [-0.0929668173, 0.0, 0.0, 0.0], [0.1010717, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 19, 20, 21, 22, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 10, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_409(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.989500046, 1.0, 2.0, 4.0], [-0.996500015, 3.0, 4.0, 1.0], [0.99150002, 5.0, 6.0, 0.0], [0.113000005, 7.0, 8.0, 6.0], [-0.192619324, 0.0, 0.0, 0.0], [0.0367000028, 9.0, 10.0, 6.0], [0.158500001, 11.0, 12.0, 6.0], [0.108500004, 13.0, 14.0, 6.0], [-0.99150002, 15.0, 16.0, 4.0], [-0.9745, 17.0, 18.0, 4.0], [0.057099998, 19.0, 20.0, 6.0], [0.102499999, 21.0, 22.0, 6.0], [0.142248616, 0.0, 0.0, 0.0], [-0.0356508605, 0.0, 0.0, 0.0], [0.266715318, 0.0, 0.0, 0.0], [0.0382441692, 0.0, 0.0, 0.0], [-0.124177463, 0.0, 0.0, 0.0], [0.17449443, 0.0, 0.0, 0.0], [-0.0456639528, 0.0, 0.0, 0.0], [-0.154544652, 0.0, 0.0, 0.0], [0.00490819104, 0.0, 0.0, 0.0], [0.0937716812, 0.0, 0.0, 0.0], [-0.100550197, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 19, 20, 21, 22, 12])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 10, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_410(xs):
    #Predicts Class 0
    function_dict = np.array([[0.619500041, 1.0, 2.0, 0.0], [0.144499987, 3.0, 4.0, 6.0], [-0.0437918194, 0.0, 0.0, 0.0], [-0.0597176962, 0.0, 0.0, 0.0], [0.21450001, 5.0, 6.0, 6.0], [-0.705500007, 7.0, 8.0, 2.0], [0.2315, 9.0, 10.0, 6.0], [0.15167594, 0.0, 0.0, 0.0], [-0.0181270111, 0.0, 0.0, 0.0], [-0.0953669921, 0.0, 0.0, 0.0], [0.0158142392, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 2])
    branch_indices = np.array([0, 1, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_411(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.17050001, 1.0, 2.0, 1.0], [-0.230500013, 3.0, 4.0, 1.0], [-0.801499963, 5.0, 6.0, 3.0], [-0.908499956, 7.0, 8.0, 3.0], [-0.889999986, 9.0, 10.0, 3.0], [-0.0280000009, 11.0, 12.0, 1.0], [-0.0257166531, 0.0, 0.0, 0.0], [-0.932500005, 13.0, 14.0, 3.0], [-0.766499996, 15.0, 16.0, 5.0], [-0.0131976781, 0.0, 0.0, 0.0], [-0.090395771, 0.0, 0.0, 0.0], [0.0926621854, 0.0, 0.0, 0.0], [-0.00504552014, 0.0, 0.0, 0.0], [0.0216069259, 0.0, 0.0, 0.0], [-0.0940499902, 0.0, 0.0, 0.0], [-0.0304071102, 0.0, 0.0, 0.0], [0.0544774719, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_412(xs):
    #Predicts Class 2
    function_dict = np.array([[0.168500006, 1.0, 2.0, 6.0], [0.0397191457, 0.0, 0.0, 0.0], [-0.17750001, 3.0, 4.0, 1.0], [-0.386500001, 5.0, 6.0, 1.0], [-0.523000002, 7.0, 8.0, 2.0], [-0.0502561852, 0.0, 0.0, 0.0], [-0.0157500003, 9.0, 10.0, 4.0], [-0.0979596078, 0.0, 0.0, 0.0], [-0.456499994, 11.0, 12.0, 2.0], [0.0637747198, 0.0, 0.0, 0.0], [-0.0230458025, 0.0, 0.0, 0.0], [0.0492789038, 0.0, 0.0, 0.0], [-0.0365962908, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 9, 10, 7, 11, 12])
    branch_indices = np.array([0, 2, 3, 6, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_413(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [0.095063448, 0.0, 0.0, 0.0], [0.0335000008, 3.0, 4.0, 6.0], [0.986500025, 5.0, 6.0, 0.0], [-0.994500041, 7.0, 8.0, 4.0], [-0.0242799968, 0.0, 0.0, 0.0], [-0.0350499973, 9.0, 10.0, 6.0], [-0.093927674, 0.0, 0.0, 0.0], [0.971500039, 11.0, 12.0, 0.0], [-0.0411793217, 0.0, 0.0, 0.0], [0.172512412, 0.0, 0.0, 0.0], [-0.0338096358, 0.0, 0.0, 0.0], [0.00280692126, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 9, 10, 7, 11, 12])
    branch_indices = np.array([0, 2, 3, 6, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_414(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [-0.0943424702, 0.0, 0.0, 0.0], [-0.994500041, 3.0, 4.0, 4.0], [0.0861761421, 0.0, 0.0, 0.0], [-0.999500036, 5.0, 6.0, 3.0], [0.075849995, 7.0, 8.0, 6.0], [0.0665000007, 9.0, 10.0, 6.0], [-0.0674829409, 0.0, 0.0, 0.0], [0.0074796034, 0.0, 0.0, 0.0], [0.110960655, 0.0, 0.0, 0.0], [0.00209637312, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_415(xs):
    #Predicts Class 0
    function_dict = np.array([[0.0719500035, 1.0, 2.0, 6.0], [0.0488955788, 0.0, 0.0, 0.0], [0.590499997, 3.0, 4.0, 0.0], [-0.341499984, 5.0, 6.0, 1.0], [-0.0606716052, 0.0, 0.0, 0.0], [0.30250001, 7.0, 8.0, 6.0], [-0.897500038, 9.0, 10.0, 3.0], [0.0492853634, 0.0, 0.0, 0.0], [-0.059415061, 0.0, 0.0, 0.0], [-0.0982974246, 0.0, 0.0, 0.0], [0.00599676091, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 7, 8, 9, 10, 4])
    branch_indices = np.array([0, 2, 3, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_416(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.957499981, 1.0, 2.0, 3.0], [-0.356000006, 3.0, 4.0, 1.0], [-0.211499989, 5.0, 6.0, 4.0], [-0.0675422922, 0.0, 0.0, 0.0], [0.00372621743, 0.0, 0.0, 0.0], [-0.249500006, 7.0, 8.0, 4.0], [-0.510499954, 9.0, 10.0, 2.0], [-0.746500015, 11.0, 12.0, 2.0], [0.105463721, 0.0, 0.0, 0.0], [0.462500006, 13.0, 14.0, 0.0], [-0.0223500002, 15.0, 16.0, 4.0], [0.0298655424, 0.0, 0.0, 0.0], [-0.0376764759, 0.0, 0.0, 0.0], [-0.079141736, 0.0, 0.0, 0.0], [0.0166765768, 0.0, 0.0, 0.0], [0.0909075961, 0.0, 0.0, 0.0], [-0.0212908257, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 8, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 2, 5, 7, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_417(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.426999986, 1.0, 2.0, 5.0], [0.249500006, 3.0, 4.0, 6.0], [0.0446318164, 0.0, 0.0, 0.0], [0.317499995, 5.0, 6.0, 0.0], [-0.135500014, 7.0, 8.0, 1.0], [-0.570500016, 9.0, 10.0, 2.0], [0.49000001, 11.0, 12.0, 0.0], [-0.0783262923, 0.0, 0.0, 0.0], [-0.00351601257, 0.0, 0.0, 0.0], [0.0283992235, 0.0, 0.0, 0.0], [-0.0940824077, 0.0, 0.0, 0.0], [0.0710258931, 0.0, 0.0, 0.0], [-0.0184128974, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 7, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_418(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.968500018, 1.0, 2.0, 4.0], [-0.972499967, 3.0, 4.0, 4.0], [-0.966500044, 5.0, 6.0, 4.0], [0.983500004, 7.0, 8.0, 0.0], [0.984500051, 9.0, 10.0, 0.0], [0.140011102, 0.0, 0.0, 0.0], [-0.995499969, 11.0, 12.0, 1.0], [0.980499983, 13.0, 14.0, 0.0], [0.985499978, 15.0, 16.0, 0.0], [0.0310016461, 0.0, 0.0, 0.0], [-0.208059445, 0.0, 0.0, 0.0], [0.1215, 17.0, 18.0, 6.0], [-0.993499994, 19.0, 20.0, 1.0], [0.019094307, 0.0, 0.0, 0.0], [-0.23646611, 0.0, 0.0, 0.0], [0.114062801, 0.0, 0.0, 0.0], [0.0041119433, 0.0, 0.0, 0.0], [0.197574869, 0.0, 0.0, 0.0], [-0.0800683275, 0.0, 0.0, 0.0], [-0.128651127, 0.0, 0.0, 0.0], [0.0185873974, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_419(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.968500018, 1.0, 2.0, 4.0], [-0.972499967, 3.0, 4.0, 4.0], [-0.966500044, 5.0, 6.0, 4.0], [0.983500004, 7.0, 8.0, 0.0], [0.984500051, 9.0, 10.0, 0.0], [-0.139740467, 0.0, 0.0, 0.0], [0.0665000007, 11.0, 12.0, 6.0], [0.980499983, 13.0, 14.0, 0.0], [0.985499978, 15.0, 16.0, 0.0], [-0.0305631831, 0.0, 0.0, 0.0], [0.208382368, 0.0, 0.0, 0.0], [-0.937999964, 17.0, 18.0, 4.0], [0.0830000043, 19.0, 20.0, 6.0], [-0.0184294339, 0.0, 0.0, 0.0], [0.236642674, 0.0, 0.0, 0.0], [-0.113807932, 0.0, 0.0, 0.0], [-0.00343391579, 0.0, 0.0, 0.0], [0.117681734, 0.0, 0.0, 0.0], [-0.0275706574, 0.0, 0.0, 0.0], [-0.172823623, 0.0, 0.0, 0.0], [0.00109976635, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 10, 5, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_420(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.784500003, 1.0, 2.0, 3.0], [0.178499997, 3.0, 4.0, 0.0], [-0.19749999, 5.0, 6.0, 1.0], [0.0717008039, 0.0, 0.0, 0.0], [-0.249500006, 7.0, 8.0, 4.0], [-0.362500012, 9.0, 10.0, 1.0], [0.0212549753, 0.0, 0.0, 0.0], [0.255500019, 11.0, 12.0, 6.0], [0.381999999, 13.0, 14.0, 0.0], [-0.0105258077, 0.0, 0.0, 0.0], [-0.107747026, 0.0, 0.0, 0.0], [-0.0194763932, 0.0, 0.0, 0.0], [0.0641466305, 0.0, 0.0, 0.0], [-0.109632701, 0.0, 0.0, 0.0], [0.0169156529, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 11, 12, 13, 14, 9, 10, 6])
    branch_indices = np.array([0, 1, 4, 7, 8, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_421(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.722499967, 1.0, 2.0, 2.0], [-0.929499984, 3.0, 4.0, 3.0], [-0.263500005, 5.0, 6.0, 4.0], [-0.955500007, 7.0, 8.0, 3.0], [-0.743999958, 9.0, 10.0, 5.0], [-0.327000022, 11.0, 12.0, 1.0], [-0.225499988, 13.0, 14.0, 4.0], [-0.000788714096, 0.0, 0.0, 0.0], [-0.759500027, 15.0, 16.0, 5.0], [0.554499984, 17.0, 18.0, 0.0], [-0.243499994, 19.0, 20.0, 4.0], [-0.0336679704, 0.0, 0.0, 0.0], [0.160576344, 0.0, 0.0, 0.0], [-0.0833861604, 0.0, 0.0, 0.0], [0.418500006, 21.0, 22.0, 0.0], [-0.0230220165, 0.0, 0.0, 0.0], [-0.131140336, 0.0, 0.0, 0.0], [0.0946561992, 0.0, 0.0, 0.0], [-0.0215024222, 0.0, 0.0, 0.0], [-0.103152134, 0.0, 0.0, 0.0], [0.0348525792, 0.0, 0.0, 0.0], [-0.0194019713, 0.0, 0.0, 0.0], [0.054167442, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 17, 18, 19, 20, 11, 12, 13, 21, 22])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 5, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_422(xs):
    #Predicts Class 2
    function_dict = np.array([[0.283500016, 1.0, 2.0, 0.0], [0.188499987, 3.0, 4.0, 0.0], [-0.459999979, 5.0, 6.0, 5.0], [-0.0330521353, 0.0, 0.0, 0.0], [0.0883081555, 0.0, 0.0, 0.0], [-0.560000002, 7.0, 8.0, 5.0], [-0.0725209638, 0.0, 0.0, 0.0], [-0.5995, 9.0, 10.0, 5.0], [-0.179000005, 11.0, 12.0, 1.0], [0.00364686782, 0.0, 0.0, 0.0], [-0.0800115392, 0.0, 0.0, 0.0], [-0.00149552443, 0.0, 0.0, 0.0], [0.0894671082, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 9, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 2, 5, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_423(xs):
    #Predicts Class 3
    function_dict = np.array([[0.141499996, 1.0, 2.0, 6.0], [-0.99150002, 3.0, 4.0, 4.0], [0.1505, 5.0, 6.0, 6.0], [0.0960000008, 7.0, 8.0, 6.0], [-0.997500002, 9.0, 10.0, 1.0], [-0.126232043, 0.0, 0.0, 0.0], [0.151499987, 11.0, 12.0, 6.0], [-0.072607778, 0.0, 0.0, 0.0], [-0.993499994, 13.0, 14.0, 4.0], [-0.98150003, 15.0, 16.0, 4.0], [-0.999500036, 17.0, 18.0, 2.0], [0.178956315, 0.0, 0.0, 0.0], [0.987499952, 19.0, 20.0, 0.0], [0.00586627517, 0.0, 0.0, 0.0], [0.175916284, 0.0, 0.0, 0.0], [-0.110162124, 0.0, 0.0, 0.0], [0.0644071922, 0.0, 0.0, 0.0], [0.0406354368, 0.0, 0.0, 0.0], [-0.0696495697, 0.0, 0.0, 0.0], [-0.0683210641, 0.0, 0.0, 0.0], [0.0137816388, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 15, 16, 17, 18, 5, 11, 19, 20])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_424(xs):
    #Predicts Class 4
    function_dict = np.array([[0.141499996, 1.0, 2.0, 6.0], [-0.99150002, 3.0, 4.0, 4.0], [-0.967499971, 5.0, 6.0, 5.0], [0.0960000008, 7.0, 8.0, 6.0], [-0.997500002, 9.0, 10.0, 1.0], [-0.99849999, 11.0, 12.0, 5.0], [-0.109919935, 0.0, 0.0, 0.0], [0.0736713335, 0.0, 0.0, 0.0], [-0.993499994, 13.0, 14.0, 4.0], [-0.98150003, 15.0, 16.0, 4.0], [-0.999500036, 17.0, 18.0, 2.0], [0.1505, 19.0, 20.0, 6.0], [0.222499996, 21.0, 22.0, 6.0], [-0.00553702097, 0.0, 0.0, 0.0], [-0.175652072, 0.0, 0.0, 0.0], [0.110713094, 0.0, 0.0, 0.0], [-0.0641242936, 0.0, 0.0, 0.0], [-0.039900776, 0.0, 0.0, 0.0], [0.0697372854, 0.0, 0.0, 0.0], [0.166371897, 0.0, 0.0, 0.0], [-0.00378182949, 0.0, 0.0, 0.0], [0.170005322, 0.0, 0.0, 0.0], [-0.00773934787, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 6])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 5, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_425(xs):
    #Predicts Class 0
    function_dict = np.array([[0.473500013, 1.0, 2.0, 0.0], [0.25849998, 3.0, 4.0, 6.0], [0.25849998, 5.0, 6.0, 6.0], [0.188499987, 7.0, 8.0, 6.0], [-0.362500012, 9.0, 10.0, 4.0], [0.212500006, 11.0, 12.0, 6.0], [-0.406000018, 13.0, 14.0, 1.0], [-0.0209835377, 0.0, 0.0, 0.0], [-0.425500005, 15.0, 16.0, 1.0], [0.0674645379, 0.0, 0.0, 0.0], [0.0945999995, 17.0, 18.0, 0.0], [0.0228858925, 0.0, 0.0, 0.0], [-0.12555109, 0.0, 0.0, 0.0], [0.0608362146, 0.0, 0.0, 0.0], [-0.0304699726, 0.0, 0.0, 0.0], [0.118369192, 0.0, 0.0, 0.0], [0.0152572254, 0.0, 0.0, 0.0], [0.0305808745, 0.0, 0.0, 0.0], [-0.0957373232, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 9, 17, 18, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 8, 4, 10, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_426(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.841500044, 1.0, 2.0, 2.0], [-0.0527252853, 0.0, 0.0, 0.0], [-0.404500008, 3.0, 4.0, 4.0], [-0.925500035, 5.0, 6.0, 3.0], [-0.33950001, 7.0, 8.0, 4.0], [0.0894798338, 0.0, 0.0, 0.0], [-0.00454036333, 0.0, 0.0, 0.0], [-0.406499982, 9.0, 10.0, 1.0], [0.243499994, 11.0, 12.0, 6.0], [0.0195607264, 0.0, 0.0, 0.0], [-0.0990301222, 0.0, 0.0, 0.0], [-0.0214029755, 0.0, 0.0, 0.0], [0.0298416782, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 9, 10, 11, 12])
    branch_indices = np.array([0, 2, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_427(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.526499987, 1.0, 2.0, 5.0], [-0.708500028, 3.0, 4.0, 3.0], [-0.808500051, 5.0, 6.0, 3.0], [0.512500048, 7.0, 8.0, 0.0], [0.0671866685, 0.0, 0.0, 0.0], [0.0727415234, 0.0, 0.0, 0.0], [-0.0256605372, 0.0, 0.0, 0.0], [0.24849999, 9.0, 10.0, 6.0], [-0.691499949, 11.0, 12.0, 5.0], [-0.0836302638, 0.0, 0.0, 0.0], [0.0156704821, 0.0, 0.0, 0.0], [-0.0310357902, 0.0, 0.0, 0.0], [0.0681151524, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 4, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_428(xs):
    #Predicts Class 3
    function_dict = np.array([[0.994500041, 1.0, 2.0, 0.0], [-0.99150002, 3.0, 4.0, 4.0], [-0.99150002, 5.0, 6.0, 4.0], [0.193500012, 7.0, 8.0, 6.0], [-0.990499973, 9.0, 10.0, 4.0], [-0.993499994, 11.0, 12.0, 4.0], [-0.997500002, 13.0, 14.0, 1.0], [0.143000007, 15.0, 16.0, 6.0], [0.13963373, 0.0, 0.0, 0.0], [-0.117080793, 0.0, 0.0, 0.0], [0.102499999, 17.0, 18.0, 6.0], [-0.00246778294, 0.0, 0.0, 0.0], [0.102499999, 19.0, 20.0, 6.0], [0.13499999, 21.0, 22.0, 6.0], [-0.133308396, 0.0, 0.0, 0.0], [0.109344415, 0.0, 0.0, 0.0], [-0.108275101, 0.0, 0.0, 0.0], [-0.0226115566, 0.0, 0.0, 0.0], [0.0237121526, 0.0, 0.0, 0.0], [-0.0282785166, 0.0, 0.0, 0.0], [-0.204151958, 0.0, 0.0, 0.0], [-0.00112707051, 0.0, 0.0, 0.0], [0.225550026, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 17, 18, 11, 19, 20, 21, 22, 14])
    branch_indices = np.array([0, 1, 3, 7, 4, 10, 2, 5, 12, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_429(xs):
    #Predicts Class 4
    function_dict = np.array([[0.994500041, 1.0, 2.0, 0.0], [-0.99150002, 3.0, 4.0, 4.0], [-0.99150002, 5.0, 6.0, 4.0], [0.193500012, 7.0, 8.0, 6.0], [-0.990499973, 9.0, 10.0, 4.0], [-0.993499994, 11.0, 12.0, 4.0], [-0.997500002, 13.0, 14.0, 1.0], [0.143000007, 15.0, 16.0, 6.0], [-0.139114186, 0.0, 0.0, 0.0], [0.117508948, 0.0, 0.0, 0.0], [0.102499999, 17.0, 18.0, 6.0], [0.00331877661, 0.0, 0.0, 0.0], [0.102499999, 19.0, 20.0, 6.0], [0.13499999, 21.0, 22.0, 6.0], [0.133843392, 0.0, 0.0, 0.0], [-0.108796105, 0.0, 0.0, 0.0], [0.108511269, 0.0, 0.0, 0.0], [0.0231325608, 0.0, 0.0, 0.0], [-0.0237997584, 0.0, 0.0, 0.0], [0.0285386406, 0.0, 0.0, 0.0], [0.204617247, 0.0, 0.0, 0.0], [0.00149501744, 0.0, 0.0, 0.0], [-0.225129113, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 17, 18, 11, 19, 20, 21, 22, 14])
    branch_indices = np.array([0, 1, 3, 7, 4, 10, 2, 5, 12, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_430(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.448500007, 1.0, 2.0, 1.0], [-0.377499998, 3.0, 4.0, 4.0], [-0.763499975, 5.0, 6.0, 5.0], [0.0477175973, 0.0, 0.0, 0.0], [-0.749500036, 7.0, 8.0, 2.0], [-0.89349997, 9.0, 10.0, 3.0], [-0.167499989, 11.0, 12.0, 1.0], [-0.0232213829, 0.0, 0.0, 0.0], [-0.119603634, 0.0, 0.0, 0.0], [-0.0799894929, 0.0, 0.0, 0.0], [0.0327822007, 0.0, 0.0, 0.0], [-0.762500048, 13.0, 14.0, 2.0], [-0.166500002, 15.0, 16.0, 4.0], [-0.0190456919, 0.0, 0.0, 0.0], [0.0707934722, 0.0, 0.0, 0.0], [-0.0732630417, 0.0, 0.0, 0.0], [0.0255106688, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 4, 2, 5, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_431(xs):
    #Predicts Class 1
    function_dict = np.array([[0.0678500012, 1.0, 2.0, 0.0], [0.0444389321, 0.0, 0.0, 0.0], [0.278500021, 3.0, 4.0, 0.0], [0.260500014, 5.0, 6.0, 6.0], [0.300999999, 7.0, 8.0, 0.0], [-0.140969381, 0.0, 0.0, 0.0], [0.28549999, 9.0, 10.0, 6.0], [0.070554316, 0.0, 0.0, 0.0], [0.28549999, 11.0, 12.0, 6.0], [0.0844149292, 0.0, 0.0, 0.0], [-0.0412192084, 0.0, 0.0, 0.0], [-0.0158821736, 0.0, 0.0, 0.0], [0.053782016, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 9, 10, 7, 11, 12])
    branch_indices = np.array([0, 2, 3, 6, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_432(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.865499973, 1.0, 2.0, 3.0], [-0.906499982, 3.0, 4.0, 3.0], [-0.132499993, 5.0, 6.0, 4.0], [0.222499996, 7.0, 8.0, 6.0], [-0.0544424094, 0.0, 0.0, 0.0], [-0.709499955, 9.0, 10.0, 2.0], [-0.50849998, 11.0, 12.0, 5.0], [-0.0466486439, 0.0, 0.0, 0.0], [-0.210000008, 13.0, 14.0, 4.0], [0.0160927363, 0.0, 0.0, 0.0], [-0.0492090397, 0.0, 0.0, 0.0], [0.0944115818, 0.0, 0.0, 0.0], [-0.0180355646, 0.0, 0.0, 0.0], [-0.0167097542, 0.0, 0.0, 0.0], [0.0737236068, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 4, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 3, 8, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_433(xs):
    #Predicts Class 3
    function_dict = np.array([[0.151499987, 1.0, 2.0, 6.0], [-0.982499957, 3.0, 4.0, 4.0], [0.157499999, 5.0, 6.0, 6.0], [0.100500003, 7.0, 8.0, 6.0], [0.100500003, 9.0, 10.0, 6.0], [-0.159154981, 0.0, 0.0, 0.0], [-0.968500018, 11.0, 12.0, 4.0], [0.0978499949, 13.0, 14.0, 6.0], [-0.990499973, 15.0, 16.0, 4.0], [0.0814500004, 17.0, 18.0, 6.0], [-0.948500037, 19.0, 20.0, 4.0], [0.986500025, 21.0, 22.0, 0.0], [-0.951499999, 23.0, 24.0, 4.0], [0.0433910564, 0.0, 0.0, 0.0], [-0.21838516, 0.0, 0.0, 0.0], [-0.00111018319, 0.0, 0.0, 0.0], [0.200452834, 0.0, 0.0, 0.0], [-0.0288153011, 0.0, 0.0, 0.0], [0.131030321, 0.0, 0.0, 0.0], [-0.144414291, 0.0, 0.0, 0.0], [0.0876132548, 0.0, 0.0, 0.0], [-0.175253645, 0.0, 0.0, 0.0], [0.00558052352, 0.0, 0.0, 0.0], [0.142172575, 0.0, 0.0, 0.0], [-0.0304801594, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_434(xs):
    #Predicts Class 4
    function_dict = np.array([[0.151499987, 1.0, 2.0, 6.0], [-0.982499957, 3.0, 4.0, 4.0], [0.157499999, 5.0, 6.0, 6.0], [0.100500003, 7.0, 8.0, 6.0], [0.100500003, 9.0, 10.0, 6.0], [0.163365543, 0.0, 0.0, 0.0], [-0.968500018, 11.0, 12.0, 4.0], [0.0978499949, 13.0, 14.0, 6.0], [-0.990499973, 15.0, 16.0, 4.0], [0.0814500004, 17.0, 18.0, 6.0], [-0.948500037, 19.0, 20.0, 4.0], [0.986500025, 21.0, 22.0, 0.0], [-0.951499999, 23.0, 24.0, 4.0], [-0.042532187, 0.0, 0.0, 0.0], [0.218519241, 0.0, 0.0, 0.0], [0.00152442197, 0.0, 0.0, 0.0], [-0.200230375, 0.0, 0.0, 0.0], [0.0292421058, 0.0, 0.0, 0.0], [-0.130627692, 0.0, 0.0, 0.0], [0.144848853, 0.0, 0.0, 0.0], [-0.0875998065, 0.0, 0.0, 0.0], [0.175704882, 0.0, 0.0, 0.0], [-0.00493949419, 0.0, 0.0, 0.0], [-0.141611755, 0.0, 0.0, 0.0], [0.0245320071, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_435(xs):
    #Predicts Class 0
    function_dict = np.array([[0.473500013, 1.0, 2.0, 0.0], [-0.375500023, 3.0, 4.0, 4.0], [-0.438499987, 5.0, 6.0, 1.0], [0.0736059994, 0.0, 0.0, 0.0], [-0.221500009, 7.0, 8.0, 4.0], [-0.434499979, 9.0, 10.0, 4.0], [-0.379500002, 11.0, 12.0, 1.0], [-0.919499993, 13.0, 14.0, 3.0], [-0.571500003, 15.0, 16.0, 2.0], [0.00680058356, 0.0, 0.0, 0.0], [-0.0978692099, 0.0, 0.0, 0.0], [0.0892126039, 0.0, 0.0, 0.0], [-0.0609340928, 0.0, 0.0, 0.0], [0.0789391771, 0.0, 0.0, 0.0], [-0.0871252343, 0.0, 0.0, 0.0], [0.0626166537, 0.0, 0.0, 0.0], [-0.0362429731, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 13, 14, 15, 16, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 4, 7, 8, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_436(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.957499981, 1.0, 2.0, 3.0], [-0.356000006, 3.0, 4.0, 1.0], [0.638499975, 5.0, 6.0, 0.0], [-0.0551338494, 0.0, 0.0, 0.0], [0.00582004571, 0.0, 0.0, 0.0], [0.207500011, 7.0, 8.0, 6.0], [0.0546451285, 0.0, 0.0, 0.0], [-0.902500033, 9.0, 10.0, 3.0], [-0.798500001, 11.0, 12.0, 2.0], [0.022547029, 0.0, 0.0, 0.0], [-0.110537127, 0.0, 0.0, 0.0], [-0.0459675156, 0.0, 0.0, 0.0], [0.0221655108, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 9, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 2, 5, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_437(xs):
    #Predicts Class 2
    function_dict = np.array([[0.195499986, 1.0, 2.0, 6.0], [-0.690500021, 3.0, 4.0, 2.0], [-0.733500004, 5.0, 6.0, 2.0], [-0.0404171534, 0.0, 0.0, 0.0], [0.0725537762, 0.0, 0.0, 0.0], [0.0463335067, 0.0, 0.0, 0.0], [-0.581499994, 7.0, 8.0, 2.0], [0.408500016, 9.0, 10.0, 0.0], [-0.09595, 11.0, 12.0, 1.0], [0.00633231224, 0.0, 0.0, 0.0], [-0.107685648, 0.0, 0.0, 0.0], [0.0608017631, 0.0, 0.0, 0.0], [-0.0353938974, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 2, 6, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_438(xs):
    #Predicts Class 3
    function_dict = np.array([[0.03565, 1.0, 2.0, 6.0], [-0.983500004, 3.0, 4.0, 4.0], [-0.999500036, 5.0, 6.0, 3.0], [-0.00687396806, 0.0, 0.0, 0.0], [0.0107500004, 7.0, 8.0, 6.0], [-0.978500009, 9.0, 10.0, 4.0], [0.0986000001, 11.0, 12.0, 6.0], [0.144568756, 0.0, 0.0, 0.0], [0.002695414, 0.0, 0.0, 0.0], [0.199499995, 13.0, 14.0, 6.0], [-0.976500034, 15.0, 16.0, 4.0], [0.952000022, 17.0, 18.0, 0.0], [0.1065, 19.0, 20.0, 6.0], [-0.0029485093, 0.0, 0.0, 0.0], [-0.118455842, 0.0, 0.0, 0.0], [0.209180206, 0.0, 0.0, 0.0], [0.00284910691, 0.0, 0.0, 0.0], [0.0810491964, 0.0, 0.0, 0.0], [-0.171759069, 0.0, 0.0, 0.0], [0.198141575, 0.0, 0.0, 0.0], [-0.0424623005, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 4, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_439(xs):
    #Predicts Class 4
    function_dict = np.array([[0.0709000006, 1.0, 2.0, 6.0], [0.989500046, 3.0, 4.0, 0.0], [0.0970000029, 5.0, 6.0, 6.0], [-0.999500036, 7.0, 8.0, 3.0], [-0.983500004, 9.0, 10.0, 4.0], [0.990499973, 11.0, 12.0, 0.0], [0.097649999, 13.0, 14.0, 6.0], [0.98150003, 15.0, 16.0, 0.0], [-0.937000036, 17.0, 18.0, 4.0], [0.0413499996, 19.0, 20.0, 6.0], [-0.0730992481, 0.0, 0.0, 0.0], [0.986500025, 21.0, 22.0, 0.0], [0.992499948, 23.0, 24.0, 0.0], [-0.14231506, 0.0, 0.0, 0.0], [-0.987499952, 25.0, 26.0, 4.0], [0.00135935133, 0.0, 0.0, 0.0], [-0.227596939, 0.0, 0.0, 0.0], [0.173737556, 0.0, 0.0, 0.0], [-0.0520257577, 0.0, 0.0, 0.0], [-0.02368748, 0.0, 0.0, 0.0], [0.158893019, 0.0, 0.0, 0.0], [0.042593956, 0.0, 0.0, 0.0], [0.239740387, 0.0, 0.0, 0.0], [-0.172737524, 0.0, 0.0, 0.0], [0.0799864605, 0.0, 0.0, 0.0], [0.040105246, 0.0, 0.0, 0.0], [-0.0122651067, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 21, 22, 23, 24, 13, 25, 26])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_440(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.587499976, 1.0, 2.0, 5.0], [0.345499992, 3.0, 4.0, 0.0], [-0.0431600437, 0.0, 0.0, 0.0], [0.277500004, 5.0, 6.0, 6.0], [0.25849998, 7.0, 8.0, 6.0], [-0.261500001, 9.0, 10.0, 4.0], [-0.0208104439, 0.0, 0.0, 0.0], [-0.75150001, 11.0, 12.0, 5.0], [0.280499995, 13.0, 14.0, 6.0], [0.0995940641, 0.0, 0.0, 0.0], [0.0358649343, 0.0, 0.0, 0.0], [0.00359142805, 0.0, 0.0, 0.0], [-0.0758791193, 0.0, 0.0, 0.0], [0.0727813244, 0.0, 0.0, 0.0], [-0.0283425748, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 6, 11, 12, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 5, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_441(xs):
    #Predicts Class 1
    function_dict = np.array([[0.2315, 1.0, 2.0, 6.0], [-0.159999996, 3.0, 4.0, 1.0], [0.243499994, 5.0, 6.0, 6.0], [0.217500001, 7.0, 8.0, 6.0], [-0.049185507, 0.0, 0.0, 0.0], [-0.707000017, 9.0, 10.0, 5.0], [-0.771499991, 11.0, 12.0, 2.0], [0.440499991, 13.0, 14.0, 0.0], [-0.659500003, 15.0, 16.0, 2.0], [-0.094264254, 0.0, 0.0, 0.0], [0.0133155258, 0.0, 0.0, 0.0], [-0.794499993, 17.0, 18.0, 5.0], [-0.889999986, 19.0, 20.0, 3.0], [0.0630395412, 0.0, 0.0, 0.0], [-0.0493123308, 0.0, 0.0, 0.0], [-0.000443046272, 0.0, 0.0, 0.0], [0.138453841, 0.0, 0.0, 0.0], [0.0608594418, 0.0, 0.0, 0.0], [-0.107516237, 0.0, 0.0, 0.0], [0.0917585939, 0.0, 0.0, 0.0], [-0.0342913829, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 9, 10, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_442(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.159500003, 1.0, 2.0, 1.0], [-0.191500008, 3.0, 4.0, 1.0], [-0.0148999998, 5.0, 6.0, 4.0], [-0.162499994, 7.0, 8.0, 4.0], [-0.076836139, 0.0, 0.0, 0.0], [-0.065200001, 9.0, 10.0, 1.0], [0.0693104491, 0.0, 0.0, 0.0], [-0.712499976, 11.0, 12.0, 5.0], [-0.59799999, 13.0, 14.0, 5.0], [0.0478910506, 0.0, 0.0, 0.0], [-0.0549072102, 0.0, 0.0, 0.0], [0.0152495792, 0.0, 0.0, 0.0], [-0.0677465275, 0.0, 0.0, 0.0], [0.0934611037, 0.0, 0.0, 0.0], [-0.00750283338, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 9, 10, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_443(xs):
    #Predicts Class 3
    function_dict = np.array([[0.289499998, 1.0, 2.0, 6.0], [-0.995499969, 3.0, 4.0, 3.0], [-0.978500009, 5.0, 6.0, 4.0], [0.932500005, 7.0, 8.0, 0.0], [-0.93599999, 9.0, 10.0, 1.0], [-0.0343233496, 0.0, 0.0, 0.0], [0.1105683, 0.0, 0.0, 0.0], [-0.885499954, 11.0, 12.0, 4.0], [-0.909500003, 13.0, 14.0, 4.0], [-0.118625827, 0.0, 0.0, 0.0], [-0.0280208848, 0.0, 0.0, 0.0], [-0.137502104, 0.0, 0.0, 0.0], [0.0102800298, 0.0, 0.0, 0.0], [0.00124801171, 0.0, 0.0, 0.0], [0.121956773, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 9, 10, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_444(xs):
    #Predicts Class 4
    function_dict = np.array([[0.289499998, 1.0, 2.0, 6.0], [0.186500013, 3.0, 4.0, 6.0], [-0.978500009, 5.0, 6.0, 4.0], [0.17050001, 7.0, 8.0, 6.0], [-0.982499957, 9.0, 10.0, 4.0], [0.0360435098, 0.0, 0.0, 0.0], [-0.102491237, 0.0, 0.0, 0.0], [0.166500002, 11.0, 12.0, 6.0], [0.99150002, 13.0, 14.0, 0.0], [-0.987499952, 15.0, 16.0, 4.0], [-0.963500023, 17.0, 18.0, 4.0], [-0.0064139613, 0.0, 0.0, 0.0], [0.0918381661, 0.0, 0.0, 0.0], [-0.000207748541, 0.0, 0.0, 0.0], [-0.151942134, 0.0, 0.0, 0.0], [0.0542825684, 0.0, 0.0, 0.0], [-0.12689501, 0.0, 0.0, 0.0], [0.232517242, 0.0, 0.0, 0.0], [0.0202828236, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 15, 16, 17, 18, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_445(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.305500001, 1.0, 2.0, 1.0], [0.229499996, 3.0, 4.0, 6.0], [-0.622500002, 5.0, 6.0, 2.0], [-0.921499968, 7.0, 8.0, 3.0], [0.265500009, 9.0, 10.0, 6.0], [0.0700490624, 0.0, 0.0, 0.0], [-0.151999995, 11.0, 12.0, 1.0], [0.00627083797, 0.0, 0.0, 0.0], [-0.0802272931, 0.0, 0.0, 0.0], [-0.421000004, 13.0, 14.0, 1.0], [-0.778499961, 15.0, 16.0, 5.0], [-0.0653326735, 0.0, 0.0, 0.0], [0.0230738968, 0.0, 0.0, 0.0], [0.0887694582, 0.0, 0.0, 0.0], [-0.0300618634, 0.0, 0.0, 0.0], [0.0301249418, 0.0, 0.0, 0.0], [-0.0658629686, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 13, 14, 15, 16, 5, 11, 12])
    branch_indices = np.array([0, 1, 3, 4, 9, 10, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_446(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.7245, 1.0, 2.0, 5.0], [-0.29549998, 3.0, 4.0, 4.0], [0.531499982, 5.0, 6.0, 0.0], [-0.817499995, 7.0, 8.0, 3.0], [0.0856222212, 0.0, 0.0, 0.0], [-0.691499949, 9.0, 10.0, 5.0], [0.0404097922, 0.0, 0.0, 0.0], [-0.734500051, 11.0, 12.0, 2.0], [0.061981339, 0.0, 0.0, 0.0], [-0.0911387503, 0.0, 0.0, 0.0], [0.301499993, 13.0, 14.0, 6.0], [0.00802905951, 0.0, 0.0, 0.0], [-0.103515536, 0.0, 0.0, 0.0], [-0.0214038342, 0.0, 0.0, 0.0], [0.0584326684, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 4, 9, 13, 14, 6])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_447(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.772500038, 1.0, 2.0, 2.0], [-0.0377152339, 0.0, 0.0, 0.0], [-0.882500052, 3.0, 4.0, 3.0], [-0.159500003, 5.0, 6.0, 4.0], [-0.790500045, 7.0, 8.0, 3.0], [0.228500009, 9.0, 10.0, 6.0], [0.49150002, 11.0, 12.0, 0.0], [0.244500011, 13.0, 14.0, 6.0], [-0.546499968, 15.0, 16.0, 2.0], [0.108693153, 0.0, 0.0, 0.0], [-0.00934507512, 0.0, 0.0, 0.0], [0.0349593535, 0.0, 0.0, 0.0], [-0.0566781834, 0.0, 0.0, 0.0], [-0.0976950899, 0.0, 0.0, 0.0], [0.0351228751, 0.0, 0.0, 0.0], [0.0635182634, 0.0, 0.0, 0.0], [-0.0239624083, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_448(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.989500046, 1.0, 2.0, 4.0], [0.198500007, 3.0, 4.0, 6.0], [0.0794499964, 5.0, 6.0, 6.0], [0.17050001, 7.0, 8.0, 6.0], [-0.11275778, 0.0, 0.0, 0.0], [0.0719500035, 9.0, 10.0, 6.0], [0.0838000029, 11.0, 12.0, 6.0], [0.102499999, 13.0, 14.0, 6.0], [0.99150002, 15.0, 16.0, 0.0], [-0.993499994, 17.0, 18.0, 1.0], [0.193769753, 0.0, 0.0, 0.0], [-0.977499962, 19.0, 20.0, 4.0], [-0.985499978, 21.0, 22.0, 4.0], [0.0704648197, 0.0, 0.0, 0.0], [-0.0210929904, 0.0, 0.0, 0.0], [-0.0329271704, 0.0, 0.0, 0.0], [0.223729298, 0.0, 0.0, 0.0], [-0.0580227003, 0.0, 0.0, 0.0], [0.0778166726, 0.0, 0.0, 0.0], [-0.17410484, 0.0, 0.0, 0.0], [-0.0292682964, 0.0, 0.0, 0.0], [-0.0604318306, 0.0, 0.0, 0.0], [0.00537568424, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 10, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_449(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.989500046, 1.0, 2.0, 4.0], [0.198500007, 3.0, 4.0, 6.0], [0.0794499964, 5.0, 6.0, 6.0], [0.17050001, 7.0, 8.0, 6.0], [0.114169568, 0.0, 0.0, 0.0], [0.0714500025, 9.0, 10.0, 6.0], [0.0838000029, 11.0, 12.0, 6.0], [0.102499999, 13.0, 14.0, 6.0], [0.99150002, 15.0, 16.0, 0.0], [-0.993499994, 17.0, 18.0, 1.0], [-0.193561286, 0.0, 0.0, 0.0], [-0.977499962, 19.0, 20.0, 4.0], [-0.985499978, 21.0, 22.0, 4.0], [-0.0697604194, 0.0, 0.0, 0.0], [0.0214957558, 0.0, 0.0, 0.0], [0.0330871493, 0.0, 0.0, 0.0], [-0.223484233, 0.0, 0.0, 0.0], [0.0590239204, 0.0, 0.0, 0.0], [-0.0800465792, 0.0, 0.0, 0.0], [0.174204051, 0.0, 0.0, 0.0], [0.0295460001, 0.0, 0.0, 0.0], [0.0608996265, 0.0, 0.0, 0.0], [-0.00546067953, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 4, 17, 18, 10, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 5, 9, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_450(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.949499965, 1.0, 2.0, 3.0], [-0.0434706397, 0.0, 0.0, 0.0], [-0.537500024, 3.0, 4.0, 1.0], [-0.0641206503, 0.0, 0.0, 0.0], [-0.676499963, 5.0, 6.0, 2.0], [-0.305500001, 7.0, 8.0, 1.0], [-0.831499994, 9.0, 10.0, 3.0], [0.0139079317, 0.0, 0.0, 0.0], [0.0983362123, 0.0, 0.0, 0.0], [-0.0657467097, 0.0, 0.0, 0.0], [0.0173129011, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_451(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.492500007, 1.0, 2.0, 2.0], [-0.113499999, 3.0, 4.0, 1.0], [-0.417999983, 5.0, 6.0, 2.0], [0.0298000015, 7.0, 8.0, 4.0], [0.0954665318, 0.0, 0.0, 0.0], [-0.0599599667, 0.0, 0.0, 0.0], [0.0236939378, 0.0, 0.0, 0.0], [-0.594500005, 9.0, 10.0, 2.0], [0.0557811745, 0.0, 0.0, 0.0], [0.0027226971, 0.0, 0.0, 0.0], [-0.114267558, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 8, 4, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_452(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.559499979, 1.0, 2.0, 5.0], [0.542500019, 3.0, 4.0, 0.0], [-0.741999984, 5.0, 6.0, 3.0], [0.229499996, 7.0, 8.0, 6.0], [0.578500032, 9.0, 10.0, 0.0], [0.2315, 11.0, 12.0, 6.0], [-0.0314589515, 0.0, 0.0, 0.0], [0.216499999, 13.0, 14.0, 6.0], [-0.0741138682, 0.0, 0.0, 0.0], [0.0690957904, 0.0, 0.0, 0.0], [-0.0289633349, 0.0, 0.0, 0.0], [-0.00844448712, 0.0, 0.0, 0.0], [0.0743588358, 0.0, 0.0, 0.0], [-0.0670320243, 0.0, 0.0, 0.0], [0.0903347507, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_453(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.966500044, 1.0, 2.0, 4.0], [0.978500009, 3.0, 4.0, 0.0], [-0.963500023, 5.0, 6.0, 4.0], [0.154500008, 7.0, 8.0, 6.0], [0.983500004, 9.0, 10.0, 0.0], [-0.112410903, 0.0, 0.0, 0.0], [0.980499983, 11.0, 12.0, 0.0], [0.160566673, 0.0, 0.0, 0.0], [-0.0129550053, 0.0, 0.0, 0.0], [-0.130987555, 0.0, 0.0, 0.0], [0.242500007, 13.0, 14.0, 6.0], [-0.99849999, 15.0, 16.0, 5.0], [-0.99849999, 17.0, 18.0, 5.0], [0.00512329116, 0.0, 0.0, 0.0], [0.107329763, 0.0, 0.0, 0.0], [-0.155982941, 0.0, 0.0, 0.0], [-0.00664897077, 0.0, 0.0, 0.0], [0.198540106, 0.0, 0.0, 0.0], [-0.0591018833, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 13, 14, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 4, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_454(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.966500044, 1.0, 2.0, 4.0], [0.978500009, 3.0, 4.0, 0.0], [-0.963500023, 5.0, 6.0, 4.0], [0.154500008, 7.0, 8.0, 6.0], [0.983500004, 9.0, 10.0, 0.0], [0.112921581, 0.0, 0.0, 0.0], [0.980499983, 11.0, 12.0, 0.0], [-0.160157934, 0.0, 0.0, 0.0], [0.0134825306, 0.0, 0.0, 0.0], [0.131392464, 0.0, 0.0, 0.0], [0.242500007, 13.0, 14.0, 6.0], [-0.99849999, 15.0, 16.0, 5.0], [-0.99849999, 17.0, 18.0, 5.0], [-0.00452694949, 0.0, 0.0, 0.0], [-0.105948307, 0.0, 0.0, 0.0], [0.156379431, 0.0, 0.0, 0.0], [0.00480654091, 0.0, 0.0, 0.0], [-0.19829452, 0.0, 0.0, 0.0], [0.0597137921, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 13, 14, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 4, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_455(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.5255, 1.0, 2.0, 5.0], [0.345499992, 3.0, 4.0, 0.0], [-0.0497288778, 0.0, 0.0, 0.0], [0.260500014, 5.0, 6.0, 6.0], [0.25849998, 7.0, 8.0, 6.0], [-0.272500008, 9.0, 10.0, 1.0], [-0.234999999, 11.0, 12.0, 4.0], [-0.75150001, 13.0, 14.0, 5.0], [0.28549999, 15.0, 16.0, 6.0], [0.105766602, 0.0, 0.0, 0.0], [0.0105221597, 0.0, 0.0, 0.0], [0.0365421474, 0.0, 0.0, 0.0], [-0.0617175587, 0.0, 0.0, 0.0], [-0.000682483835, 0.0, 0.0, 0.0], [-0.0795465931, 0.0, 0.0, 0.0], [0.0522528961, 0.0, 0.0, 0.0], [-0.0287149735, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 15, 16, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_456(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.83949995, 1.0, 2.0, 2.0], [-0.0457489043, 0.0, 0.0, 0.0], [-0.368499994, 3.0, 4.0, 4.0], [0.503000021, 5.0, 6.0, 0.0], [-0.456499994, 7.0, 8.0, 1.0], [-0.0031357049, 0.0, 0.0, 0.0], [0.072733067, 0.0, 0.0, 0.0], [0.0514057502, 0.0, 0.0, 0.0], [-0.418500006, 9.0, 10.0, 1.0], [-0.0971898437, 0.0, 0.0, 0.0], [0.00189726776, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 7, 9, 10])
    branch_indices = np.array([0, 2, 3, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_457(xs):
    #Predicts Class 2
    function_dict = np.array([[0.1105, 1.0, 2.0, 4.0], [0.249500006, 3.0, 4.0, 6.0], [0.0442883484, 0.0, 0.0, 0.0], [0.317499995, 5.0, 6.0, 0.0], [-0.536499977, 7.0, 8.0, 5.0], [-0.0363146625, 0.0, 0.0, 0.0], [-0.678499997, 9.0, 10.0, 5.0], [-0.00403669057, 0.0, 0.0, 0.0], [-0.0632486865, 0.0, 0.0, 0.0], [-0.0159696005, 0.0, 0.0, 0.0], [0.0511660613, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 9, 10, 7, 8, 2])
    branch_indices = np.array([0, 1, 3, 6, 4])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_458(xs):
    #Predicts Class 3
    function_dict = np.array([[0.0709000006, 1.0, 2.0, 6.0], [0.0458000004, 3.0, 4.0, 6.0], [0.0763999969, 5.0, 6.0, 6.0], [0.0419500023, 7.0, 8.0, 6.0], [-0.972499967, 9.0, 10.0, 4.0], [-0.148515224, 0.0, 0.0, 0.0], [0.0811500028, 11.0, 12.0, 6.0], [-0.98150003, 13.0, 14.0, 4.0], [-0.107513227, 0.0, 0.0, 0.0], [0.159884378, 0.0, 0.0, 0.0], [0.00795658864, 0.0, 0.0, 0.0], [0.107885927, 0.0, 0.0, 0.0], [0.0832500011, 15.0, 16.0, 6.0], [0.130419001, 0.0, 0.0, 0.0], [-0.0230125636, 0.0, 0.0, 0.0], [-0.113599263, 0.0, 0.0, 0.0], [-0.000535619911, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 5, 11, 15, 16])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_459(xs):
    #Predicts Class 4
    function_dict = np.array([[0.0709000006, 1.0, 2.0, 6.0], [0.0458000004, 3.0, 4.0, 6.0], [0.0763999969, 5.0, 6.0, 6.0], [0.0419500023, 7.0, 8.0, 6.0], [-0.972499967, 9.0, 10.0, 4.0], [0.148594782, 0.0, 0.0, 0.0], [0.0811500028, 11.0, 12.0, 6.0], [-0.98150003, 13.0, 14.0, 4.0], [0.10709884, 0.0, 0.0, 0.0], [-0.159571648, 0.0, 0.0, 0.0], [-0.0132298153, 0.0, 0.0, 0.0], [-0.107716866, 0.0, 0.0, 0.0], [0.0832500011, 15.0, 16.0, 6.0], [-0.128776267, 0.0, 0.0, 0.0], [0.0253819134, 0.0, 0.0, 0.0], [0.113865919, 0.0, 0.0, 0.0], [0.000669458357, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 5, 11, 15, 16])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_460(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.842499971, 1.0, 2.0, 3.0], [-0.284500003, 3.0, 4.0, 4.0], [-0.74150002, 5.0, 6.0, 5.0], [-0.379500002, 7.0, 8.0, 1.0], [-0.71449995, 9.0, 10.0, 5.0], [-0.0444271564, 0.0, 0.0, 0.0], [0.24149999, 11.0, 12.0, 6.0], [-0.45450002, 13.0, 14.0, 1.0], [0.0698978454, 0.0, 0.0, 0.0], [-0.131287068, 0.0, 0.0, 0.0], [-0.705500007, 15.0, 16.0, 2.0], [-0.0222535748, 0.0, 0.0, 0.0], [-0.174499989, 17.0, 18.0, 1.0], [0.0459673591, 0.0, 0.0, 0.0], [-0.0739868805, 0.0, 0.0, 0.0], [0.0516068675, 0.0, 0.0, 0.0], [-0.0410689376, 0.0, 0.0, 0.0], [0.123819537, 0.0, 0.0, 0.0], [-0.0114875138, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 15, 16, 5, 11, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 4, 10, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_461(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.798500001, 1.0, 2.0, 2.0], [-0.898499966, 3.0, 4.0, 3.0], [-0.898499966, 5.0, 6.0, 3.0], [-0.0778763518, 0.0, 0.0, 0.0], [0.0517853498, 0.0, 0.0, 0.0], [0.549499989, 7.0, 8.0, 0.0], [-0.766499996, 9.0, 10.0, 5.0], [-0.596000016, 11.0, 12.0, 5.0], [-0.037213292, 0.0, 0.0, 0.0], [-0.079817526, 0.0, 0.0, 0.0], [-0.262499988, 13.0, 14.0, 4.0], [0.087740548, 0.0, 0.0, 0.0], [-0.031423945, 0.0, 0.0, 0.0], [0.0823916346, 0.0, 0.0, 0.0], [-0.0214365162, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 8, 9, 13, 14])
    branch_indices = np.array([0, 1, 2, 5, 7, 6, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_462(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.411500007, 1.0, 2.0, 2.0], [-0.882500052, 3.0, 4.0, 3.0], [0.0400479734, 0.0, 0.0, 0.0], [-0.338499993, 5.0, 6.0, 1.0], [-0.194000006, 7.0, 8.0, 1.0], [-0.0364020206, 0.0, 0.0, 0.0], [-0.278500021, 9.0, 10.0, 1.0], [-0.156500012, 11.0, 12.0, 4.0], [-0.0772944242, 0.0, 0.0, 0.0], [0.0771888942, 0.0, 0.0, 0.0], [-0.00303261238, 0.0, 0.0, 0.0], [-0.0338664018, 0.0, 0.0, 0.0], [0.0482951067, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 9, 10, 11, 12, 8, 2])
    branch_indices = np.array([0, 1, 3, 6, 4, 7])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_463(xs):
    #Predicts Class 3
    function_dict = np.array([[0.194499999, 1.0, 2.0, 6.0], [-0.921000004, 3.0, 4.0, 1.0], [-0.983500004, 5.0, 6.0, 4.0], [-0.861000001, 7.0, 8.0, 4.0], [-0.104330048, 0.0, 0.0, 0.0], [0.993499994, 9.0, 10.0, 0.0], [-0.995499969, 11.0, 12.0, 1.0], [-0.940500021, 13.0, 14.0, 4.0], [0.145722568, 0.0, 0.0, 0.0], [0.989500046, 15.0, 16.0, 0.0], [0.0312312376, 0.0, 0.0, 0.0], [0.0853496715, 0.0, 0.0, 0.0], [-0.95449996, 17.0, 18.0, 4.0], [0.0157350898, 0.0, 0.0, 0.0], [-0.0623691119, 0.0, 0.0, 0.0], [-0.0328480229, 0.0, 0.0, 0.0], [-0.191029981, 0.0, 0.0, 0.0], [-0.133297026, 0.0, 0.0, 0.0], [0.0226338301, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 15, 16, 10, 11, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 9, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_464(xs):
    #Predicts Class 4
    function_dict = np.array([[0.194499999, 1.0, 2.0, 6.0], [-0.921000004, 3.0, 4.0, 1.0], [-0.983500004, 5.0, 6.0, 4.0], [-0.861000001, 7.0, 8.0, 4.0], [0.0927684307, 0.0, 0.0, 0.0], [0.993499994, 9.0, 10.0, 0.0], [-0.995499969, 11.0, 12.0, 1.0], [-0.940500021, 13.0, 14.0, 4.0], [-0.141972035, 0.0, 0.0, 0.0], [0.989500046, 15.0, 16.0, 0.0], [-0.0299535673, 0.0, 0.0, 0.0], [-0.0847715959, 0.0, 0.0, 0.0], [-0.930000007, 17.0, 18.0, 4.0], [-0.0151491705, 0.0, 0.0, 0.0], [0.063137874, 0.0, 0.0, 0.0], [0.0332046114, 0.0, 0.0, 0.0], [0.191499814, 0.0, 0.0, 0.0], [0.116955251, 0.0, 0.0, 0.0], [-0.0373600088, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 15, 16, 10, 11, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 9, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_465(xs):
    #Predicts Class 0
    function_dict = np.array([[0.619500041, 1.0, 2.0, 0.0], [-0.587499976, 3.0, 4.0, 5.0], [-0.0496465117, 0.0, 0.0, 0.0], [-0.763499975, 5.0, 6.0, 5.0], [-0.0408184715, 0.0, 0.0, 0.0], [-0.456499994, 7.0, 8.0, 1.0], [-0.450999975, 9.0, 10.0, 1.0], [0.0488069654, 0.0, 0.0, 0.0], [-0.0600377917, 0.0, 0.0, 0.0], [-0.0175423212, 0.0, 0.0, 0.0], [0.0502390973, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 4, 2])
    branch_indices = np.array([0, 1, 3, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_466(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.621500015, 1.0, 2.0, 5.0], [-0.679499984, 3.0, 4.0, 5.0], [-0.57949996, 5.0, 6.0, 5.0], [-0.226500005, 7.0, 8.0, 4.0], [0.24849999, 9.0, 10.0, 6.0], [0.0631269291, 0.0, 0.0, 0.0], [-0.541499972, 11.0, 12.0, 5.0], [-0.716500044, 13.0, 14.0, 5.0], [0.0600766689, 0.0, 0.0, 0.0], [-0.0757426023, 0.0, 0.0, 0.0], [-0.0192086641, 0.0, 0.0, 0.0], [-0.0520360917, 0.0, 0.0, 0.0], [0.37349999, 15.0, 16.0, 0.0], [0.00534059899, 0.0, 0.0, 0.0], [-0.0670106336, 0.0, 0.0, 0.0], [-0.0139977811, 0.0, 0.0, 0.0], [0.0599549413, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 5, 11, 15, 16])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_467(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.159500003, 1.0, 2.0, 1.0], [-0.605499983, 3.0, 4.0, 2.0], [-0.450500011, 5.0, 6.0, 2.0], [-0.1065, 7.0, 8.0, 4.0], [0.232500002, 9.0, 10.0, 6.0], [-0.523000002, 11.0, 12.0, 2.0], [-0.0232797954, 0.0, 0.0, 0.0], [-0.227499992, 13.0, 14.0, 4.0], [0.0516071096, 0.0, 0.0, 0.0], [-0.0951402187, 0.0, 0.0, 0.0], [0.0219853688, 0.0, 0.0, 0.0], [0.00533733563, 0.0, 0.0, 0.0], [0.0719427764, 0.0, 0.0, 0.0], [0.0177017264, 0.0, 0.0, 0.0], [-0.0522439964, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 9, 10, 11, 12, 6])
    branch_indices = np.array([0, 1, 3, 7, 4, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_468(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [0.0801778287, 0.0, 0.0, 0.0], [-0.992499948, 3.0, 4.0, 4.0], [0.109499998, 5.0, 6.0, 6.0], [0.0911500007, 7.0, 8.0, 6.0], [0.101500005, 9.0, 10.0, 6.0], [0.0346091241, 0.0, 0.0, 0.0], [0.0714000016, 11.0, 12.0, 6.0], [0.101500005, 13.0, 14.0, 6.0], [-0.0391423069, 0.0, 0.0, 0.0], [-0.175142527, 0.0, 0.0, 0.0], [-0.00764917536, 0.0, 0.0, 0.0], [0.0876348764, 0.0, 0.0, 0.0], [-0.096826911, 0.0, 0.0, 0.0], [0.00382400886, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 6, 11, 12, 13, 14])
    branch_indices = np.array([0, 2, 3, 5, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_469(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [-0.079514116, 0.0, 0.0, 0.0], [-0.992499948, 3.0, 4.0, 4.0], [0.109499998, 5.0, 6.0, 6.0], [0.0921999961, 7.0, 8.0, 6.0], [0.101500005, 9.0, 10.0, 6.0], [-0.0339259468, 0.0, 0.0, 0.0], [0.0714000016, 11.0, 12.0, 6.0], [0.101500005, 13.0, 14.0, 6.0], [0.0397991017, 0.0, 0.0, 0.0], [0.175413579, 0.0, 0.0, 0.0], [0.00815435033, 0.0, 0.0, 0.0], [-0.0873229876, 0.0, 0.0, 0.0], [0.0971786007, 0.0, 0.0, 0.0], [-0.00388910505, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 6, 11, 12, 13, 14])
    branch_indices = np.array([0, 2, 3, 5, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_470(xs):
    #Predicts Class 0
    function_dict = np.array([[0.21450001, 1.0, 2.0, 6.0], [0.168500006, 3.0, 4.0, 6.0], [0.0930999964, 5.0, 6.0, 0.0], [-0.017248705, 0.0, 0.0, 0.0], [0.0567014627, 0.0, 0.0, 0.0], [0.0480090305, 0.0, 0.0, 0.0], [-0.685500026, 7.0, 8.0, 5.0], [0.567499995, 9.0, 10.0, 0.0], [-0.791499972, 11.0, 12.0, 3.0], [0.0240849052, 0.0, 0.0, 0.0], [-0.0710097402, 0.0, 0.0, 0.0], [-0.132124111, 0.0, 0.0, 0.0], [0.00146848359, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 2, 6, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_471(xs):
    #Predicts Class 1
    function_dict = np.array([[0.291500002, 1.0, 2.0, 6.0], [-0.135500014, 3.0, 4.0, 1.0], [-0.693500042, 5.0, 6.0, 2.0], [-0.342500001, 7.0, 8.0, 1.0], [-0.872500002, 9.0, 10.0, 3.0], [-0.00565337436, 0.0, 0.0, 0.0], [0.0811653137, 0.0, 0.0, 0.0], [-0.428499997, 11.0, 12.0, 1.0], [0.227499992, 13.0, 14.0, 6.0], [0.0323797241, 0.0, 0.0, 0.0], [-0.103654005, 0.0, 0.0, 0.0], [0.0104677621, 0.0, 0.0, 0.0], [-0.0624785684, 0.0, 0.0, 0.0], [-0.0548811741, 0.0, 0.0, 0.0], [0.0868481025, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 9, 10, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_472(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.653499961, 1.0, 2.0, 5.0], [-0.262499988, 3.0, 4.0, 4.0], [0.37349999, 5.0, 6.0, 0.0], [-0.0276704375, 0.0, 0.0, 0.0], [0.489499986, 7.0, 8.0, 0.0], [0.233999997, 9.0, 10.0, 0.0], [0.487500012, 11.0, 12.0, 0.0], [0.0800636336, 0.0, 0.0, 0.0], [0.00599152502, 0.0, 0.0, 0.0], [-0.0290987045, 0.0, 0.0, 0.0], [0.0542686954, 0.0, 0.0, 0.0], [-0.0679189339, 0.0, 0.0, 0.0], [0.00847273413, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 4, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_473(xs):
    #Predicts Class 3
    function_dict = np.array([[0.144499987, 1.0, 2.0, 6.0], [0.0970000029, 3.0, 4.0, 6.0], [-0.99849999, 5.0, 6.0, 1.0], [0.0709000006, 7.0, 8.0, 6.0], [-0.903999984, 9.0, 10.0, 4.0], [-0.985499978, 11.0, 12.0, 4.0], [-0.985499978, 13.0, 14.0, 4.0], [-0.983500004, 15.0, 16.0, 4.0], [0.967499971, 17.0, 18.0, 0.0], [-0.945500016, 19.0, 20.0, 4.0], [-0.11246933, 0.0, 0.0, 0.0], [-0.283059925, 0.0, 0.0, 0.0], [0.089798376, 0.0, 0.0, 0.0], [0.193500012, 21.0, 22.0, 6.0], [0.9745, 23.0, 24.0, 0.0], [-0.0535357967, 0.0, 0.0, 0.0], [0.0639809817, 0.0, 0.0, 0.0], [0.0524195619, 0.0, 0.0, 0.0], [-0.085194394, 0.0, 0.0, 0.0], [0.0377029181, 0.0, 0.0, 0.0], [0.149953529, 0.0, 0.0, 0.0], [-0.0236677155, 0.0, 0.0, 0.0], [0.0909455642, 0.0, 0.0, 0.0], [0.0364939235, 0.0, 0.0, 0.0], [-0.0728071555, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 11, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_474(xs):
    #Predicts Class 4
    function_dict = np.array([[0.144499987, 1.0, 2.0, 6.0], [0.0970000029, 3.0, 4.0, 6.0], [-0.99849999, 5.0, 6.0, 1.0], [0.0709000006, 7.0, 8.0, 6.0], [-0.903999984, 9.0, 10.0, 4.0], [-0.985499978, 11.0, 12.0, 4.0], [-0.985499978, 13.0, 14.0, 4.0], [-0.983500004, 15.0, 16.0, 4.0], [0.967499971, 17.0, 18.0, 0.0], [-0.945500016, 19.0, 20.0, 4.0], [0.113230541, 0.0, 0.0, 0.0], [0.283364981, 0.0, 0.0, 0.0], [-0.0895569324, 0.0, 0.0, 0.0], [0.193500012, 21.0, 22.0, 6.0], [0.9745, 23.0, 24.0, 0.0], [0.0550731793, 0.0, 0.0, 0.0], [-0.0643618479, 0.0, 0.0, 0.0], [-0.0520998985, 0.0, 0.0, 0.0], [0.0854736492, 0.0, 0.0, 0.0], [-0.0372560695, 0.0, 0.0, 0.0], [-0.149552137, 0.0, 0.0, 0.0], [0.0239155293, 0.0, 0.0, 0.0], [-0.0901718736, 0.0, 0.0, 0.0], [-0.0394486822, 0.0, 0.0, 0.0], [0.0733404607, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 10, 11, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 2, 5, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_475(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.415499985, 1.0, 2.0, 4.0], [0.602999985, 3.0, 4.0, 0.0], [-0.791499972, 5.0, 6.0, 5.0], [0.0478251576, 0.0, 0.0, 0.0], [0.00590576837, 0.0, 0.0, 0.0], [-0.0753807798, 0.0, 0.0, 0.0], [0.378499985, 7.0, 8.0, 0.0], [-0.742499948, 9.0, 10.0, 5.0], [0.460500002, 11.0, 12.0, 0.0], [-0.0828148574, 0.0, 0.0, 0.0], [-0.000343638792, 0.0, 0.0, 0.0], [0.0666237324, 0.0, 0.0, 0.0], [-0.0101833753, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 2, 6, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_476(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.957499981, 1.0, 2.0, 3.0], [-0.0413392149, 0.0, 0.0, 0.0], [-0.837499976, 3.0, 4.0, 5.0], [-0.0381388366, 0.0, 0.0, 0.0], [-0.211499989, 5.0, 6.0, 4.0], [-0.250499994, 7.0, 8.0, 4.0], [-0.17050001, 9.0, 10.0, 1.0], [0.0132897599, 0.0, 0.0, 0.0], [0.0791631341, 0.0, 0.0, 0.0], [-0.0355068929, 0.0, 0.0, 0.0], [0.030541867, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_477(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.426999986, 1.0, 2.0, 5.0], [0.249500006, 3.0, 4.0, 6.0], [0.0385011695, 0.0, 0.0, 0.0], [0.317499995, 5.0, 6.0, 0.0], [-0.0463684574, 0.0, 0.0, 0.0], [-0.0297510102, 0.0, 0.0, 0.0], [0.49000001, 7.0, 8.0, 0.0], [0.0558858402, 0.0, 0.0, 0.0], [-0.00146649987, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 7, 8, 4, 2])
    branch_indices = np.array([0, 1, 3, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_478(xs):
    #Predicts Class 3
    function_dict = np.array([[0.971500039, 1.0, 2.0, 0.0], [-0.993499994, 3.0, 4.0, 1.0], [0.9745, 5.0, 6.0, 0.0], [-0.121769108, 0.0, 0.0, 0.0], [-0.999500036, 7.0, 8.0, 3.0], [0.130292043, 0.0, 0.0, 0.0], [0.199499995, 9.0, 10.0, 6.0], [0.0673035532, 0.0, 0.0, 0.0], [0.951499999, 11.0, 12.0, 0.0], [0.987499952, 13.0, 14.0, 0.0], [0.987499952, 15.0, 16.0, 0.0], [0.0114421928, 0.0, 0.0, 0.0], [-0.0849850476, 0.0, 0.0, 0.0], [-0.0302169956, 0.0, 0.0, 0.0], [0.0225503836, 0.0, 0.0, 0.0], [0.0161763057, 0.0, 0.0, 0.0], [-0.131303906, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 11, 12, 5, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 4, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_479(xs):
    #Predicts Class 4
    function_dict = np.array([[0.971500039, 1.0, 2.0, 0.0], [-0.993499994, 3.0, 4.0, 1.0], [0.9745, 5.0, 6.0, 0.0], [0.122240454, 0.0, 0.0, 0.0], [-0.999500036, 7.0, 8.0, 3.0], [-0.129778072, 0.0, 0.0, 0.0], [0.199499995, 9.0, 10.0, 6.0], [-0.0657889768, 0.0, 0.0, 0.0], [0.951499999, 11.0, 12.0, 0.0], [0.0367000028, 13.0, 14.0, 6.0], [0.987499952, 15.0, 16.0, 0.0], [-0.0186618511, 0.0, 0.0, 0.0], [0.0860912651, 0.0, 0.0, 0.0], [0.0611784197, 0.0, 0.0, 0.0], [-0.0159960613, 0.0, 0.0, 0.0], [-0.0156452265, 0.0, 0.0, 0.0], [0.132811099, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 11, 12, 5, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 4, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_480(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.5255, 1.0, 2.0, 5.0], [0.345499992, 3.0, 4.0, 0.0], [-0.0480054952, 0.0, 0.0, 0.0], [-0.244000003, 5.0, 6.0, 1.0], [-0.858500004, 7.0, 8.0, 3.0], [0.273499995, 9.0, 10.0, 6.0], [-0.0184372216, 0.0, 0.0, 0.0], [-0.951499999, 11.0, 12.0, 3.0], [-0.253499985, 13.0, 14.0, 4.0], [0.0955172628, 0.0, 0.0, 0.0], [-0.000246827811, 0.0, 0.0, 0.0], [-0.0439247563, 0.0, 0.0, 0.0], [0.0302192997, 0.0, 0.0, 0.0], [-0.0750043765, 0.0, 0.0, 0.0], [0.0071827611, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 6, 11, 12, 13, 14, 2])
    branch_indices = np.array([0, 1, 3, 5, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_481(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.880499959, 1.0, 2.0, 3.0], [0.292500019, 3.0, 4.0, 0.0], [0.286000013, 5.0, 6.0, 0.0], [0.0420455895, 0.0, 0.0, 0.0], [-0.924499989, 7.0, 8.0, 3.0], [0.29549998, 9.0, 10.0, 6.0], [-0.278500021, 11.0, 12.0, 1.0], [-0.761500001, 13.0, 14.0, 2.0], [-0.734500051, 15.0, 16.0, 2.0], [-0.080801338, 0.0, 0.0, 0.0], [0.019952761, 0.0, 0.0, 0.0], [-0.789499998, 17.0, 18.0, 3.0], [-0.807500005, 19.0, 20.0, 3.0], [-0.0533978939, 0.0, 0.0, 0.0], [0.0318425298, 0.0, 0.0, 0.0], [0.00745324278, 0.0, 0.0, 0.0], [-0.0953164771, 0.0, 0.0, 0.0], [0.113936275, 0.0, 0.0, 0.0], [-0.00997074135, 0.0, 0.0, 0.0], [-0.0464081392, 0.0, 0.0, 0.0], [0.0447033122, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 13, 14, 15, 16, 9, 10, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 4, 7, 8, 2, 5, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_482(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.471000016, 1.0, 2.0, 2.0], [0.25150001, 3.0, 4.0, 0.0], [0.0365870148, 0.0, 0.0, 0.0], [0.0334195122, 0.0, 0.0, 0.0], [0.485500008, 5.0, 6.0, 0.0], [0.227499992, 7.0, 8.0, 6.0], [0.531499982, 9.0, 10.0, 0.0], [0.000971365022, 0.0, 0.0, 0.0], [-0.0799746066, 0.0, 0.0, 0.0], [0.0507358238, 0.0, 0.0, 0.0], [-0.0231007896, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 2])
    branch_indices = np.array([0, 1, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_483(xs):
    #Predicts Class 3
    function_dict = np.array([[0.912999988, 1.0, 2.0, 0.0], [-0.961500049, 3.0, 4.0, 5.0], [0.194499999, 5.0, 6.0, 6.0], [-0.103256382, 0.0, 0.0, 0.0], [-0.0117798084, 0.0, 0.0, 0.0], [0.952000022, 7.0, 8.0, 0.0], [-0.987499952, 9.0, 10.0, 4.0], [-0.997500002, 11.0, 12.0, 3.0], [-0.988499999, 13.0, 14.0, 4.0], [-0.993499994, 15.0, 16.0, 4.0], [-0.989500046, 17.0, 18.0, 1.0], [0.133706361, 0.0, 0.0, 0.0], [-0.0182162207, 0.0, 0.0, 0.0], [0.0368257053, 0.0, 0.0, 0.0], [-0.00901926681, 0.0, 0.0, 0.0], [0.00608301302, 0.0, 0.0, 0.0], [-0.160946175, 0.0, 0.0, 0.0], [0.0391037054, 0.0, 0.0, 0.0], [-0.0995458066, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 13, 14, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 2, 5, 7, 8, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_484(xs):
    #Predicts Class 4
    function_dict = np.array([[0.097649999, 1.0, 2.0, 6.0], [-0.987499952, 3.0, 4.0, 4.0], [0.959499955, 5.0, 6.0, 0.0], [0.0433499999, 7.0, 8.0, 6.0], [-0.971500039, 9.0, 10.0, 4.0], [-0.986500025, 11.0, 12.0, 1.0], [-0.995499969, 13.0, 14.0, 1.0], [0.0240037367, 0.0, 0.0, 0.0], [-0.99150002, 15.0, 16.0, 4.0], [0.0640500039, 17.0, 18.0, 6.0], [-0.947000027, 19.0, 20.0, 4.0], [0.152882457, 0.0, 0.0, 0.0], [0.193500012, 21.0, 22.0, 6.0], [0.988499999, 23.0, 24.0, 0.0], [0.986500025, 25.0, 26.0, 0.0], [0.00544638699, 0.0, 0.0, 0.0], [-0.171250686, 0.0, 0.0, 0.0], [-0.0359660462, 0.0, 0.0, 0.0], [0.100649565, 0.0, 0.0, 0.0], [-0.118601851, 0.0, 0.0, 0.0], [0.0358704552, 0.0, 0.0, 0.0], [-0.0502949469, 0.0, 0.0, 0.0], [0.074735254, 0.0, 0.0, 0.0], [-0.0234570112, 0.0, 0.0, 0.0], [0.0494284332, 0.0, 0.0, 0.0], [0.00900154654, 0.0, 0.0, 0.0], [-0.135326326, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 17, 18, 19, 20, 11, 21, 22, 23, 24, 25, 26])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 5, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_485(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.800500035, 1.0, 2.0, 2.0], [0.573500037, 3.0, 4.0, 0.0], [-0.888499975, 5.0, 6.0, 3.0], [0.0571918376, 0.0, 0.0, 0.0], [-0.0164989959, 0.0, 0.0, 0.0], [-0.921499968, 7.0, 8.0, 3.0], [-0.784500003, 9.0, 10.0, 3.0], [-0.725499988, 11.0, 12.0, 2.0], [-0.0913559645, 0.0, 0.0, 0.0], [-0.676499963, 13.0, 14.0, 2.0], [-0.19749999, 15.0, 16.0, 1.0], [0.0332257636, 0.0, 0.0, 0.0], [-0.0468713045, 0.0, 0.0, 0.0], [0.0907381848, 0.0, 0.0, 0.0], [-0.016352158, 0.0, 0.0, 0.0], [-0.0874201804, 0.0, 0.0, 0.0], [0.0357029848, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 11, 12, 8, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 2, 5, 7, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_486(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.935500026, 1.0, 2.0, 3.0], [-0.694499969, 3.0, 4.0, 5.0], [-0.86650002, 5.0, 6.0, 3.0], [-0.45450002, 7.0, 8.0, 1.0], [-0.0630602911, 0.0, 0.0, 0.0], [-0.665500045, 9.0, 10.0, 5.0], [0.407499999, 11.0, 12.0, 0.0], [-0.0621299334, 0.0, 0.0, 0.0], [0.0587330498, 0.0, 0.0, 0.0], [-0.734500051, 13.0, 14.0, 2.0], [-0.524999976, 15.0, 16.0, 2.0], [0.259499997, 17.0, 18.0, 6.0], [-0.226500005, 19.0, 20.0, 1.0], [0.0504314117, 0.0, 0.0, 0.0], [-0.105123915, 0.0, 0.0, 0.0], [0.121816881, 0.0, 0.0, 0.0], [0.00780828996, 0.0, 0.0, 0.0], [-0.103853889, 0.0, 0.0, 0.0], [0.0109912641, 0.0, 0.0, 0.0], [0.0522406437, 0.0, 0.0, 0.0], [-0.0395383425, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 4, 13, 14, 15, 16, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 2, 5, 9, 10, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_487(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.173500001, 1.0, 2.0, 4.0], [-0.930500031, 3.0, 4.0, 3.0], [0.220499992, 5.0, 6.0, 6.0], [-0.0191289112, 0.0, 0.0, 0.0], [-0.282499999, 7.0, 8.0, 4.0], [-0.0716499984, 9.0, 10.0, 4.0], [-0.0677499995, 11.0, 12.0, 4.0], [0.00752272736, 0.0, 0.0, 0.0], [0.0563206151, 0.0, 0.0, 0.0], [-0.0794821978, 0.0, 0.0, 0.0], [0.0122440765, 0.0, 0.0, 0.0], [0.0570567921, 0.0, 0.0, 0.0], [0.0293000005, 13.0, 14.0, 4.0], [-0.0587754697, 0.0, 0.0, 0.0], [0.0344297811, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 11, 13, 14])
    branch_indices = np.array([0, 1, 4, 2, 5, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_488(xs):
    #Predicts Class 3
    function_dict = np.array([[0.332499981, 1.0, 2.0, 6.0], [0.912999988, 3.0, 4.0, 0.0], [0.0839143023, 0.0, 0.0, 0.0], [-0.0804895833, 0.0, 0.0, 0.0], [0.194499999, 5.0, 6.0, 6.0], [-0.871500015, 7.0, 8.0, 4.0], [-0.987499952, 9.0, 10.0, 4.0], [0.00323424162, 0.0, 0.0, 0.0], [0.0763056576, 0.0, 0.0, 0.0], [-0.144805208, 0.0, 0.0, 0.0], [0.00889639743, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 10, 2])
    branch_indices = np.array([0, 1, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_489(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [-0.0708059892, 0.0, 0.0, 0.0], [-0.994500041, 3.0, 4.0, 4.0], [0.0842262581, 0.0, 0.0, 0.0], [0.996500015, 5.0, 6.0, 0.0], [0.995499969, 7.0, 8.0, 0.0], [-0.0697662756, 0.0, 0.0, 0.0], [0.000237347936, 0.0, 0.0, 0.0], [0.0750305802, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 6])
    branch_indices = np.array([0, 2, 4, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_490(xs):
    #Predicts Class 0
    function_dict = np.array([[0.0939500034, 1.0, 2.0, 0.0], [0.0423262492, 0.0, 0.0, 0.0], [-0.325500011, 3.0, 4.0, 4.0], [0.402500004, 5.0, 6.0, 0.0], [0.215499997, 7.0, 8.0, 6.0], [0.079075776, 0.0, 0.0, 0.0], [0.520500004, 9.0, 10.0, 0.0], [0.184500009, 11.0, 12.0, 6.0], [-0.7755, 13.0, 14.0, 3.0], [-0.0581578538, 0.0, 0.0, 0.0], [0.0307817329, 0.0, 0.0, 0.0], [-0.0230794922, 0.0, 0.0, 0.0], [0.0587150529, 0.0, 0.0, 0.0], [-0.0763982087, 0.0, 0.0, 0.0], [0.0248027649, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 9, 10, 11, 12, 13, 14])
    branch_indices = np.array([0, 2, 3, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_491(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.33950001, 1.0, 2.0, 4.0], [0.636999965, 3.0, 4.0, 0.0], [-0.960500002, 5.0, 6.0, 3.0], [-0.764500022, 7.0, 8.0, 2.0], [0.0226661731, 0.0, 0.0, 0.0], [-0.0471378677, 0.0, 0.0, 0.0], [-0.86650002, 9.0, 10.0, 3.0], [-0.429499984, 11.0, 12.0, 1.0], [0.0182198156, 0.0, 0.0, 0.0], [0.405000001, 13.0, 14.0, 0.0], [-0.38499999, 15.0, 16.0, 1.0], [-0.0213285703, 0.0, 0.0, 0.0], [-0.0938278139, 0.0, 0.0, 0.0], [0.0825443268, 0.0, 0.0, 0.0], [0.00034616387, 0.0, 0.0, 0.0], [-0.0598650351, 0.0, 0.0, 0.0], [0.0114810104, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 4, 5, 13, 14, 15, 16])
    branch_indices = np.array([0, 1, 3, 7, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_492(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.227499992, 1.0, 2.0, 4.0], [-0.269500017, 3.0, 4.0, 4.0], [-0.581499994, 5.0, 6.0, 2.0], [-0.00809881371, 0.0, 0.0, 0.0], [0.0562935509, 0.0, 0.0, 0.0], [-0.13350001, 7.0, 8.0, 4.0], [-0.510499954, 9.0, 10.0, 2.0], [-0.0756548271, 0.0, 0.0, 0.0], [0.234999999, 11.0, 12.0, 6.0], [0.0606664903, 0.0, 0.0, 0.0], [-0.490500003, 13.0, 14.0, 5.0], [0.0500651672, 0.0, 0.0, 0.0], [-0.0439857878, 0.0, 0.0, 0.0], [-0.0582316667, 0.0, 0.0, 0.0], [0.0221921001, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 7, 11, 12, 9, 13, 14])
    branch_indices = np.array([0, 1, 2, 5, 8, 6, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_493(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [0.0638705939, 0.0, 0.0, 0.0], [-0.994500041, 3.0, 4.0, 4.0], [-0.0649407133, 0.0, 0.0, 0.0], [0.300500005, 5.0, 6.0, 6.0], [0.289499998, 7.0, 8.0, 6.0], [-0.0612812974, 0.0, 0.0, 0.0], [-0.00205629156, 0.0, 0.0, 0.0], [0.0767903626, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 6])
    branch_indices = np.array([0, 2, 4, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_494(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.773499966, 1.0, 2.0, 4.0], [-0.996500015, 3.0, 4.0, 3.0], [-0.0525446497, 0.0, 0.0, 0.0], [-0.989500046, 5.0, 6.0, 1.0], [0.100979038, 0.0, 0.0, 0.0], [0.96449995, 7.0, 8.0, 0.0], [0.989500046, 9.0, 10.0, 0.0], [-0.105858035, 0.0, 0.0, 0.0], [0.000183809039, 0.0, 0.0, 0.0], [0.0846254826, 0.0, 0.0, 0.0], [-0.118348725, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 4, 2])
    branch_indices = np.array([0, 1, 3, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_495(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.587499976, 1.0, 2.0, 5.0], [-0.763499975, 3.0, 4.0, 5.0], [-0.033224415, 0.0, 0.0, 0.0], [0.280499995, 5.0, 6.0, 6.0], [0.188499987, 7.0, 8.0, 0.0], [-0.762500048, 9.0, 10.0, 2.0], [-0.0691208169, 0.0, 0.0, 0.0], [0.0842505544, 0.0, 0.0, 0.0], [-0.740499973, 11.0, 12.0, 2.0], [0.0396629274, 0.0, 0.0, 0.0], [-0.0511646345, 0.0, 0.0, 0.0], [0.0519223697, 0.0, 0.0, 0.0], [-0.0257060323, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 6, 7, 11, 12, 2])
    branch_indices = np.array([0, 1, 3, 5, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_496(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.721500039, 1.0, 2.0, 3.0], [-0.0256999992, 3.0, 4.0, 1.0], [-0.162, 5.0, 6.0, 4.0], [-0.511500001, 7.0, 8.0, 2.0], [-0.0660802349, 0.0, 0.0, 0.0], [0.0530662015, 0.0, 0.0, 0.0], [-0.00423051603, 0.0, 0.0, 0.0], [-0.567499995, 9.0, 10.0, 2.0], [0.0777639672, 0.0, 0.0, 0.0], [-0.00653971406, 0.0, 0.0, 0.0], [-0.0733535662, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 8, 4, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_497(xs):
    #Predicts Class 2
    function_dict = np.array([[0.233500004, 1.0, 2.0, 6.0], [-0.941499949, 3.0, 4.0, 3.0], [-0.940500021, 5.0, 6.0, 3.0], [-0.0703359172, 0.0, 0.0, 0.0], [-0.3125, 7.0, 8.0, 1.0], [0.084306106, 0.0, 0.0, 0.0], [-0.578500032, 9.0, 10.0, 5.0], [0.0511421897, 0.0, 0.0, 0.0], [-0.877499998, 11.0, 12.0, 3.0], [-0.0622882284, 0.0, 0.0, 0.0], [-0.476999998, 13.0, 14.0, 5.0], [0.0419350229, 0.0, 0.0, 0.0], [-0.0581631102, 0.0, 0.0, 0.0], [0.0562562943, 0.0, 0.0, 0.0], [-0.00814059004, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 11, 12, 5, 9, 13, 14])
    branch_indices = np.array([0, 1, 4, 8, 2, 6, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_498(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.935500026, 1.0, 2.0, 1.0], [-0.860499978, 3.0, 4.0, 4.0], [-0.0506705306, 0.0, 0.0, 0.0], [0.932500005, 5.0, 6.0, 0.0], [0.0971412882, 0.0, 0.0, 0.0], [-0.0838081464, 0.0, 0.0, 0.0], [-0.933500051, 7.0, 8.0, 4.0], [-0.00229050103, 0.0, 0.0, 0.0], [0.0556463972, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 7, 8, 4, 2])
    branch_indices = np.array([0, 1, 3, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_499(xs):
    #Predicts Class 4
    function_dict = np.array([[0.097649999, 1.0, 2.0, 6.0], [0.0815500021, 3.0, 4.0, 6.0], [0.102499999, 5.0, 6.0, 6.0], [-0.939499974, 7.0, 8.0, 4.0], [0.990499973, 9.0, 10.0, 0.0], [-0.979499996, 11.0, 12.0, 4.0], [0.111500002, 13.0, 14.0, 6.0], [-0.995499969, 15.0, 16.0, 1.0], [-0.0793997198, 0.0, 0.0, 0.0], [0.986500025, 17.0, 18.0, 0.0], [-0.177591413, 0.0, 0.0, 0.0], [0.993000031, 19.0, 20.0, 0.0], [-0.0084921699, 0.0, 0.0, 0.0], [-0.992499948, 21.0, 22.0, 4.0], [0.112499997, 23.0, 24.0, 6.0], [-0.0145686101, 0.0, 0.0, 0.0], [0.105712369, 0.0, 0.0, 0.0], [-0.0857819989, 0.0, 0.0, 0.0], [0.154695541, 0.0, 0.0, 0.0], [0.163697794, 0.0, 0.0, 0.0], [-0.0234794114, 0.0, 0.0, 0.0], [0.0906436145, 0.0, 0.0, 0.0], [-0.140042111, 0.0, 0.0, 0.0], [0.0970053077, 0.0, 0.0, 0.0], [0.00245186826, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 10, 19, 20, 12, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 2, 5, 11, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_500(xs):
    #Predicts Class 0
    function_dict = np.array([[0.619500041, 1.0, 2.0, 0.0], [0.2685, 3.0, 4.0, 6.0], [-0.0417538099, 0.0, 0.0, 0.0], [-0.737499952, 5.0, 6.0, 5.0], [0.325500011, 7.0, 8.0, 6.0], [-0.406499982, 9.0, 10.0, 1.0], [0.405499995, 11.0, 12.0, 0.0], [-0.407499999, 13.0, 14.0, 1.0], [0.0428453162, 0.0, 0.0, 0.0], [-0.00213494664, 0.0, 0.0, 0.0], [0.0910132825, 0.0, 0.0, 0.0], [0.0311558358, 0.0, 0.0, 0.0], [-0.0667091459, 0.0, 0.0, 0.0], [0.006834717, 0.0, 0.0, 0.0], [-0.0762963071, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 13, 14, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 6, 4, 7])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_501(xs):
    #Predicts Class 1
    function_dict = np.array([[0.291500002, 1.0, 2.0, 6.0], [-0.493000001, 3.0, 4.0, 2.0], [0.328500003, 5.0, 6.0, 6.0], [-0.276499987, 7.0, 8.0, 1.0], [-0.844500005, 9.0, 10.0, 3.0], [0.0623263232, 0.0, 0.0, 0.0], [-0.0240522213, 0.0, 0.0, 0.0], [-0.184500009, 11.0, 12.0, 4.0], [-0.64349997, 13.0, 14.0, 5.0], [-0.00516936556, 0.0, 0.0, 0.0], [-0.0679126754, 0.0, 0.0, 0.0], [-0.0271909554, 0.0, 0.0, 0.0], [0.0278580822, 0.0, 0.0, 0.0], [0.0843552426, 0.0, 0.0, 0.0], [-0.0142290946, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 9, 10, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_502(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.868499994, 1.0, 2.0, 3.0], [-0.527500033, 3.0, 4.0, 2.0], [-0.50849998, 5.0, 6.0, 5.0], [-0.601500034, 7.0, 8.0, 5.0], [0.0411390513, 0.0, 0.0, 0.0], [-0.156500012, 9.0, 10.0, 4.0], [-0.0210940596, 0.0, 0.0, 0.0], [-0.338499993, 11.0, 12.0, 1.0], [-0.0975177586, 0.0, 0.0, 0.0], [-0.00497335661, 0.0, 0.0, 0.0], [0.0737999603, 0.0, 0.0, 0.0], [-0.0465464704, 0.0, 0.0, 0.0], [0.0327134505, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 4, 9, 10, 6])
    branch_indices = np.array([0, 1, 3, 7, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_503(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.982499957, 1.0, 2.0, 4.0], [0.987499952, 3.0, 4.0, 0.0], [0.191500008, 5.0, 6.0, 6.0], [0.152500004, 7.0, 8.0, 6.0], [0.988499999, 9.0, 10.0, 0.0], [0.154500008, 11.0, 12.0, 6.0], [0.21450001, 13.0, 14.0, 6.0], [0.104499996, 15.0, 16.0, 6.0], [-0.129702732, 0.0, 0.0, 0.0], [0.163311183, 0.0, 0.0, 0.0], [0.168500006, 17.0, 18.0, 6.0], [0.100500003, 19.0, 20.0, 6.0], [0.990499973, 21.0, 22.0, 0.0], [-0.232362062, 0.0, 0.0, 0.0], [-0.989500046, 23.0, 24.0, 1.0], [-0.0266847424, 0.0, 0.0, 0.0], [0.072006844, 0.0, 0.0, 0.0], [-0.0281790774, 0.0, 0.0, 0.0], [0.0777163133, 0.0, 0.0, 0.0], [0.0293709673, 0.0, 0.0, 0.0], [-0.0747261345, 0.0, 0.0, 0.0], [0.021337403, 0.0, 0.0, 0.0], [0.201872617, 0.0, 0.0, 0.0], [0.0713115185, 0.0, 0.0, 0.0], [-0.0551276244, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 17, 18, 19, 20, 21, 22, 13, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 4, 10, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_504(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.982499957, 1.0, 2.0, 4.0], [0.987499952, 3.0, 4.0, 0.0], [0.191500008, 5.0, 6.0, 6.0], [0.152500004, 7.0, 8.0, 6.0], [0.988499999, 9.0, 10.0, 0.0], [0.154500008, 11.0, 12.0, 6.0], [0.21450001, 13.0, 14.0, 6.0], [0.104499996, 15.0, 16.0, 6.0], [0.129941508, 0.0, 0.0, 0.0], [-0.162981749, 0.0, 0.0, 0.0], [0.168500006, 17.0, 18.0, 6.0], [0.100500003, 19.0, 20.0, 6.0], [0.990499973, 21.0, 22.0, 0.0], [0.233862773, 0.0, 0.0, 0.0], [-0.989500046, 23.0, 24.0, 1.0], [0.0270817503, 0.0, 0.0, 0.0], [-0.0719173104, 0.0, 0.0, 0.0], [0.0288345646, 0.0, 0.0, 0.0], [-0.0770332962, 0.0, 0.0, 0.0], [-0.029094344, 0.0, 0.0, 0.0], [0.075871557, 0.0, 0.0, 0.0], [-0.0249135867, 0.0, 0.0, 0.0], [-0.201536596, 0.0, 0.0, 0.0], [-0.0705252662, 0.0, 0.0, 0.0], [0.0489836782, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 9, 17, 18, 19, 20, 21, 22, 13, 23, 24])
    branch_indices = np.array([0, 1, 3, 7, 4, 10, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_505(xs):
    #Predicts Class 0
    function_dict = np.array([[0.473500013, 1.0, 2.0, 0.0], [0.435499996, 3.0, 4.0, 0.0], [0.212500006, 5.0, 6.0, 6.0], [0.345499992, 7.0, 8.0, 0.0], [0.0688642785, 0.0, 0.0, 0.0], [0.0188152138, 0.0, 0.0, 0.0], [0.25849998, 9.0, 10.0, 6.0], [-0.621500015, 11.0, 12.0, 5.0], [0.240500003, 13.0, 14.0, 6.0], [-0.103790581, 0.0, 0.0, 0.0], [0.015877828, 0.0, 0.0, 0.0], [0.0429521389, 0.0, 0.0, 0.0], [-0.0367732942, 0.0, 0.0, 0.0], [-0.0695705935, 0.0, 0.0, 0.0], [0.0104756104, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 5, 9, 10])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_506(xs):
    #Predicts Class 1
    function_dict = np.array([[0.471499979, 1.0, 2.0, 0.0], [0.435499996, 3.0, 4.0, 0.0], [0.181499988, 5.0, 6.0, 6.0], [0.37349999, 7.0, 8.0, 0.0], [-0.069565624, 0.0, 0.0, 0.0], [-0.0579711311, 0.0, 0.0, 0.0], [0.237500012, 9.0, 10.0, 6.0], [0.260500014, 11.0, 12.0, 6.0], [-0.274500012, 13.0, 14.0, 1.0], [-0.902500033, 15.0, 16.0, 3.0], [-0.370499998, 17.0, 18.0, 1.0], [-0.0486885756, 0.0, 0.0, 0.0], [0.017756423, 0.0, 0.0, 0.0], [0.0689124092, 0.0, 0.0, 0.0], [-0.00413075555, 0.0, 0.0, 0.0], [0.109439418, 0.0, 0.0, 0.0], [0.0303947777, 0.0, 0.0, 0.0], [-0.0581217483, 0.0, 0.0, 0.0], [0.0394531041, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 4, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 7, 8, 2, 6, 9, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_507(xs):
    #Predicts Class 2
    function_dict = np.array([[0.283500016, 1.0, 2.0, 0.0], [0.181499988, 3.0, 4.0, 0.0], [0.387499988, 5.0, 6.0, 0.0], [-0.0120566329, 0.0, 0.0, 0.0], [0.0545398071, 0.0, 0.0, 0.0], [-0.0458716303, 0.0, 0.0, 0.0], [-0.526000023, 7.0, 8.0, 2.0], [-0.597499967, 9.0, 10.0, 2.0], [0.0515572764, 0.0, 0.0, 0.0], [0.0131823858, 0.0, 0.0, 0.0], [-0.0643431246, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 9, 10, 8])
    branch_indices = np.array([0, 1, 2, 6, 7])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_508(xs):
    #Predicts Class 3
    function_dict = np.array([[0.144499987, 1.0, 2.0, 6.0], [0.0991000012, 3.0, 4.0, 6.0], [-0.995499969, 5.0, 6.0, 1.0], [-0.999500036, 7.0, 8.0, 3.0], [-0.993499994, 9.0, 10.0, 1.0], [0.242500007, 11.0, 12.0, 6.0], [-0.977499962, 13.0, 14.0, 4.0], [0.0964000002, 15.0, 16.0, 6.0], [0.965499997, 17.0, 18.0, 0.0], [-0.999500036, 19.0, 20.0, 3.0], [-0.947999954, 21.0, 22.0, 4.0], [0.986500025, 23.0, 24.0, 0.0], [0.25150001, 25.0, 26.0, 6.0], [0.151790202, 0.0, 0.0, 0.0], [0.968500018, 27.0, 28.0, 0.0], [0.0249112435, 0.0, 0.0, 0.0], [-0.0614891574, 0.0, 0.0, 0.0], [0.0321727619, 0.0, 0.0, 0.0], [-0.11042399, 0.0, 0.0, 0.0], [0.119079471, 0.0, 0.0, 0.0], [-0.0883698016, 0.0, 0.0, 0.0], [-0.112741806, 0.0, 0.0, 0.0], [0.0843665823, 0.0, 0.0, 0.0], [0.0158694498, 0.0, 0.0, 0.0], [-0.0862714499, 0.0, 0.0, 0.0], [0.136761427, 0.0, 0.0, 0.0], [-0.0717484951, 0.0, 0.0, 0.0], [0.0738628805, 0.0, 0.0, 0.0], [-0.0647314638, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 13, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_509(xs):
    #Predicts Class 4
    function_dict = np.array([[0.144499987, 1.0, 2.0, 6.0], [0.0991000012, 3.0, 4.0, 6.0], [-0.995499969, 5.0, 6.0, 1.0], [-0.999500036, 7.0, 8.0, 3.0], [-0.993499994, 9.0, 10.0, 1.0], [0.242500007, 11.0, 12.0, 6.0], [-0.977499962, 13.0, 14.0, 4.0], [0.0964000002, 15.0, 16.0, 6.0], [0.965499997, 17.0, 18.0, 0.0], [-0.999500036, 19.0, 20.0, 3.0], [-0.947999954, 21.0, 22.0, 4.0], [0.986500025, 23.0, 24.0, 0.0], [0.25150001, 25.0, 26.0, 6.0], [-0.150958359, 0.0, 0.0, 0.0], [0.968500018, 27.0, 28.0, 0.0], [-0.0240884628, 0.0, 0.0, 0.0], [0.0616793595, 0.0, 0.0, 0.0], [-0.0335959494, 0.0, 0.0, 0.0], [0.110887378, 0.0, 0.0, 0.0], [-0.118722163, 0.0, 0.0, 0.0], [0.0886585638, 0.0, 0.0, 0.0], [0.113085486, 0.0, 0.0, 0.0], [-0.0837102309, 0.0, 0.0, 0.0], [-0.0155725572, 0.0, 0.0, 0.0], [0.0866173729, 0.0, 0.0, 0.0], [-0.136656031, 0.0, 0.0, 0.0], [0.0727616176, 0.0, 0.0, 0.0], [-0.0787116587, 0.0, 0.0, 0.0], [0.0652385652, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 13, 27, 28])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 9, 10, 2, 5, 11, 12, 6, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_510(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.763499975, 1.0, 2.0, 5.0], [-0.377499998, 3.0, 4.0, 4.0], [-0.450999975, 5.0, 6.0, 1.0], [0.523499966, 7.0, 8.0, 0.0], [-0.0699505135, 0.0, 0.0, 0.0], [-0.0446760207, 0.0, 0.0, 0.0], [-0.167499989, 9.0, 10.0, 1.0], [0.0470535792, 0.0, 0.0, 0.0], [-0.0268474817, 0.0, 0.0, 0.0], [-0.75150001, 11.0, 12.0, 2.0], [-0.0225947984, 0.0, 0.0, 0.0], [-0.0130348038, 0.0, 0.0, 0.0], [0.0629476011, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 4, 5, 11, 12, 10])
    branch_indices = np.array([0, 1, 3, 2, 6, 9])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_511(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.7245, 1.0, 2.0, 5.0], [-0.29549998, 3.0, 4.0, 4.0], [-0.658499956, 5.0, 6.0, 2.0], [0.266499996, 7.0, 8.0, 6.0], [0.0684315264, 0.0, 0.0, 0.0], [-0.855499983, 9.0, 10.0, 3.0], [-0.0238500014, 11.0, 12.0, 4.0], [0.613000035, 13.0, 14.0, 0.0], [0.0400339141, 0.0, 0.0, 0.0], [-0.932500005, 15.0, 16.0, 3.0], [0.00118773547, 0.0, 0.0, 0.0], [0.226500005, 17.0, 18.0, 6.0], [0.2315, 19.0, 20.0, 6.0], [-0.0577599742, 0.0, 0.0, 0.0], [0.037862014, 0.0, 0.0, 0.0], [-0.00997008756, 0.0, 0.0, 0.0], [-0.0705726743, 0.0, 0.0, 0.0], [-0.0533257946, 0.0, 0.0, 0.0], [0.074146077, 0.0, 0.0, 0.0], [0.0495060533, 0.0, 0.0, 0.0], [-0.0765835941, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 15, 16, 10, 17, 18, 19, 20])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 9, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_512(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.426999986, 1.0, 2.0, 5.0], [0.249500006, 3.0, 4.0, 6.0], [0.0365399085, 0.0, 0.0, 0.0], [-0.733500004, 5.0, 6.0, 2.0], [-0.0490236208, 0.0, 0.0, 0.0], [0.0507543758, 0.0, 0.0, 0.0], [0.307500005, 7.0, 8.0, 0.0], [-0.0564596094, 0.0, 0.0, 0.0], [0.0154566346, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([5, 7, 8, 4, 2])
    branch_indices = np.array([0, 1, 3, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_513(xs):
    #Predicts Class 3
    function_dict = np.array([[0.958500028, 1.0, 2.0, 0.0], [-0.986500025, 3.0, 4.0, 1.0], [-0.995499969, 5.0, 6.0, 1.0], [-0.117232241, 0.0, 0.0, 0.0], [-0.997500002, 7.0, 8.0, 3.0], [-0.035149999, 9.0, 10.0, 6.0], [0.0402499996, 11.0, 12.0, 6.0], [0.0916215777, 0.0, 0.0, 0.0], [-0.92750001, 13.0, 14.0, 1.0], [-0.112486042, 0.0, 0.0, 0.0], [0.0402499996, 15.0, 16.0, 6.0], [-0.0981034562, 0.0, 0.0, 0.0], [0.191500008, 17.0, 18.0, 6.0], [-0.103835255, 0.0, 0.0, 0.0], [-0.00246901996, 0.0, 0.0, 0.0], [0.172620669, 0.0, 0.0, 0.0], [-0.0127867647, 0.0, 0.0, 0.0], [0.085249126, 0.0, 0.0, 0.0], [-0.0395971462, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 13, 14, 9, 15, 16, 11, 17, 18])
    branch_indices = np.array([0, 1, 4, 8, 2, 5, 10, 6, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_514(xs):
    #Predicts Class 4
    function_dict = np.array([[0.199499995, 1.0, 2.0, 6.0], [0.184500009, 3.0, 4.0, 6.0], [0.286500007, 5.0, 6.0, 6.0], [0.178499997, 7.0, 8.0, 6.0], [-0.986500025, 9.0, 10.0, 4.0], [-0.977499962, 11.0, 12.0, 4.0], [0.297500014, 13.0, 14.0, 6.0], [0.164499998, 15.0, 16.0, 6.0], [0.101616226, 0.0, 0.0, 0.0], [-0.997500002, 17.0, 18.0, 1.0], [0.987499952, 19.0, 20.0, 0.0], [0.122414812, 0.0, 0.0, 0.0], [0.0216308273, 0.0, 0.0, 0.0], [-0.0492788143, 0.0, 0.0, 0.0], [0.019580191, 0.0, 0.0, 0.0], [0.0076028714, 0.0, 0.0, 0.0], [-0.0740864873, 0.0, 0.0, 0.0], [0.077700831, 0.0, 0.0, 0.0], [-0.0286441725, 0.0, 0.0, 0.0], [0.0317590348, 0.0, 0.0, 0.0], [-0.194412231, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([15, 16, 8, 17, 18, 19, 20, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 10, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_515(xs):
    #Predicts Class 0
    function_dict = np.array([[0.135500014, 1.0, 2.0, 0.0], [0.032195691, 0.0, 0.0, 0.0], [0.213499993, 3.0, 4.0, 6.0], [-0.706499994, 5.0, 6.0, 2.0], [-0.421000004, 7.0, 8.0, 1.0], [0.0556532033, 0.0, 0.0, 0.0], [-0.0186327845, 0.0, 0.0, 0.0], [-0.89199996, 9.0, 10.0, 3.0], [0.254500002, 11.0, 12.0, 6.0], [0.0448930785, 0.0, 0.0, 0.0], [-0.0426920317, 0.0, 0.0, 0.0], [-0.0950951651, 0.0, 0.0, 0.0], [-0.00118198444, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 9, 10, 11, 12])
    branch_indices = np.array([0, 2, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_516(xs):
    #Predicts Class 1
    function_dict = np.array([[0.409500003, 1.0, 2.0, 0.0], [-0.70449996, 3.0, 4.0, 2.0], [0.17750001, 5.0, 6.0, 6.0], [-0.755499959, 7.0, 8.0, 2.0], [-0.621500015, 9.0, 10.0, 2.0], [-0.0423357338, 0.0, 0.0, 0.0], [-0.791499972, 11.0, 12.0, 5.0], [-0.0266036745, 0.0, 0.0, 0.0], [0.0694441274, 0.0, 0.0, 0.0], [-0.0948410556, 0.0, 0.0, 0.0], [-0.00662000012, 13.0, 14.0, 4.0], [-0.811499953, 15.0, 16.0, 2.0], [-0.747500002, 17.0, 18.0, 2.0], [0.0362725519, 0.0, 0.0, 0.0], [-0.0543820187, 0.0, 0.0, 0.0], [0.0161348954, 0.0, 0.0, 0.0], [0.09718436, 0.0, 0.0, 0.0], [-0.0656311736, 0.0, 0.0, 0.0], [0.0275679678, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 13, 14, 5, 15, 16, 17, 18])
    branch_indices = np.array([0, 1, 3, 4, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_517(xs):
    #Predicts Class 2
    function_dict = np.array([[0.37349999, 1.0, 2.0, 0.0], [-0.0967999995, 3.0, 4.0, 1.0], [-0.541499972, 5.0, 6.0, 5.0], [-0.870499969, 7.0, 8.0, 3.0], [-0.0203633681, 0.0, 0.0, 0.0], [-0.612499952, 9.0, 10.0, 2.0], [-0.0510804988, 0.0, 0.0, 0.0], [0.00138178945, 0.0, 0.0, 0.0], [0.0657398775, 0.0, 0.0, 0.0], [0.51849997, 11.0, 12.0, 0.0], [0.0396669134, 0.0, 0.0, 0.0], [-0.0597764812, 0.0, 0.0, 0.0], [0.0208131224, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 4, 11, 12, 10, 6])
    branch_indices = np.array([0, 1, 3, 2, 5, 9])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_518(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [0.0683642253, 0.0, 0.0, 0.0], [-0.0354500003, 3.0, 4.0, 6.0], [0.0667466447, 0.0, 0.0, 0.0], [0.99150002, 5.0, 6.0, 0.0], [-0.982499957, 7.0, 8.0, 4.0], [0.168500006, 9.0, 10.0, 6.0], [0.0364183709, 0.0, 0.0, 0.0], [-0.0130392555, 0.0, 0.0, 0.0], [-0.0625962615, 0.0, 0.0, 0.0], [0.0667027384, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_519(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [-0.067802608, 0.0, 0.0, 0.0], [0.99150002, 3.0, 4.0, 0.0], [0.24849999, 5.0, 6.0, 6.0], [0.168500006, 7.0, 8.0, 6.0], [-0.995499969, 9.0, 10.0, 3.0], [-0.958500028, 11.0, 12.0, 4.0], [0.075849995, 13.0, 14.0, 6.0], [-0.990499973, 15.0, 16.0, 4.0], [-0.0174495243, 0.0, 0.0, 0.0], [0.0856739357, 0.0, 0.0, 0.0], [0.111604609, 0.0, 0.0, 0.0], [-0.0233467612, 0.0, 0.0, 0.0], [-0.0577677675, 0.0, 0.0, 0.0], [0.0903932974, 0.0, 0.0, 0.0], [-0.151525602, 0.0, 0.0, 0.0], [0.0705568641, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_520(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.895500004, 1.0, 2.0, 3.0], [-0.800500035, 3.0, 4.0, 2.0], [0.517500043, 5.0, 6.0, 0.0], [0.0272357669, 0.0, 0.0, 0.0], [-0.921499968, 7.0, 8.0, 3.0], [-0.761000037, 9.0, 10.0, 2.0], [-0.041368708, 0.0, 0.0, 0.0], [-0.742499948, 11.0, 12.0, 5.0], [-0.087453194, 0.0, 0.0, 0.0], [-0.024463689, 0.0, 0.0, 0.0], [0.379500002, 13.0, 14.0, 0.0], [0.0205203574, 0.0, 0.0, 0.0], [-0.0396263972, 0.0, 0.0, 0.0], [0.0149489241, 0.0, 0.0, 0.0], [0.0874045193, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 11, 12, 8, 9, 13, 14, 6])
    branch_indices = np.array([0, 1, 4, 7, 2, 5, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_521(xs):
    #Predicts Class 1
    function_dict = np.array([[0.291500002, 1.0, 2.0, 6.0], [-0.842499971, 3.0, 4.0, 3.0], [-0.697000027, 5.0, 6.0, 5.0], [-0.880499959, 7.0, 8.0, 3.0], [-0.585000038, 9.0, 10.0, 5.0], [-0.00534664933, 0.0, 0.0, 0.0], [0.060755711, 0.0, 0.0, 0.0], [-0.746500015, 11.0, 12.0, 2.0], [0.0674164742, 0.0, 0.0, 0.0], [-0.263000011, 13.0, 14.0, 4.0], [0.0240992941, 0.0, 0.0, 0.0], [0.0278903283, 0.0, 0.0, 0.0], [-0.0375887454, 0.0, 0.0, 0.0], [0.011542826, 0.0, 0.0, 0.0], [-0.122036323, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 13, 14, 10, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 4, 9, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_522(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.559499979, 1.0, 2.0, 5.0], [-0.601500034, 3.0, 4.0, 5.0], [-0.811499953, 5.0, 6.0, 3.0], [-0.386500001, 7.0, 8.0, 1.0], [-0.0528390184, 0.0, 0.0, 0.0], [-0.519500017, 9.0, 10.0, 2.0], [-0.0171334129, 0.0, 0.0, 0.0], [-0.037659876, 0.0, 0.0, 0.0], [-0.925500035, 11.0, 12.0, 3.0], [-0.00325511675, 0.0, 0.0, 0.0], [0.0716212913, 0.0, 0.0, 0.0], [0.069550395, 0.0, 0.0, 0.0], [-0.0229877103, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 11, 12, 4, 9, 10, 6])
    branch_indices = np.array([0, 1, 3, 8, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_523(xs):
    #Predicts Class 3
    function_dict = np.array([[0.194499999, 1.0, 2.0, 6.0], [0.184500009, 3.0, 4.0, 6.0], [-0.987499952, 5.0, 6.0, 4.0], [0.993499994, 7.0, 8.0, 0.0], [0.987499952, 9.0, 10.0, 0.0], [-0.0951929092, 0.0, 0.0, 0.0], [0.986500025, 11.0, 12.0, 0.0], [0.166500002, 13.0, 14.0, 6.0], [0.0997000039, 15.0, 16.0, 6.0], [-0.0343559533, 0.0, 0.0, 0.0], [0.989500046, 17.0, 18.0, 0.0], [-0.9745, 19.0, 20.0, 4.0], [-0.985499978, 21.0, 22.0, 4.0], [0.00224793586, 0.0, 0.0, 0.0], [-0.0881529897, 0.0, 0.0, 0.0], [-0.026787743, 0.0, 0.0, 0.0], [0.0872662589, 0.0, 0.0, 0.0], [0.165475145, 0.0, 0.0, 0.0], [0.0118222144, 0.0, 0.0, 0.0], [-0.109180488, 0.0, 0.0, 0.0], [-0.00172218529, 0.0, 0.0, 0.0], [0.12941213, 0.0, 0.0, 0.0], [-0.0325484946, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 17, 18, 5, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_524(xs):
    #Predicts Class 4
    function_dict = np.array([[0.194499999, 1.0, 2.0, 6.0], [0.184500009, 3.0, 4.0, 6.0], [-0.987499952, 5.0, 6.0, 4.0], [0.993499994, 7.0, 8.0, 0.0], [0.987499952, 9.0, 10.0, 0.0], [0.0960857868, 0.0, 0.0, 0.0], [0.986500025, 11.0, 12.0, 0.0], [0.166500002, 13.0, 14.0, 6.0], [0.0997000039, 15.0, 16.0, 6.0], [0.0309641287, 0.0, 0.0, 0.0], [0.989500046, 17.0, 18.0, 0.0], [-0.9745, 19.0, 20.0, 4.0], [-0.985499978, 21.0, 22.0, 4.0], [-0.00194492051, 0.0, 0.0, 0.0], [0.0874979794, 0.0, 0.0, 0.0], [0.0277070142, 0.0, 0.0, 0.0], [-0.0868314058, 0.0, 0.0, 0.0], [-0.16530548, 0.0, 0.0, 0.0], [-0.011448849, 0.0, 0.0, 0.0], [0.109542675, 0.0, 0.0, 0.0], [-0.000248878117, 0.0, 0.0, 0.0], [-0.128946528, 0.0, 0.0, 0.0], [0.0331268236, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 15, 16, 9, 17, 18, 5, 19, 20, 21, 22])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 10, 2, 6, 11, 12])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_525(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.925500035, 1.0, 2.0, 3.0], [0.244500011, 3.0, 4.0, 6.0], [-0.394500017, 5.0, 6.0, 4.0], [0.0197212938, 0.0, 0.0, 0.0], [-0.0552419238, 0.0, 0.0, 0.0], [0.0652139187, 0.0, 0.0, 0.0], [-0.319499999, 7.0, 8.0, 4.0], [-0.0640663654, 0.0, 0.0, 0.0], [0.435499996, 9.0, 10.0, 0.0], [-0.0109884674, 0.0, 0.0, 0.0], [0.0673232228, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 7, 9, 10])
    branch_indices = np.array([0, 1, 2, 6, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_526(xs):
    #Predicts Class 1
    function_dict = np.array([[0.291500002, 1.0, 2.0, 6.0], [0.274500012, 3.0, 4.0, 6.0], [-0.729499996, 5.0, 6.0, 2.0], [0.648500025, 7.0, 8.0, 0.0], [-0.0524099283, 0.0, 0.0, 0.0], [-0.00524459453, 0.0, 0.0, 0.0], [0.0498859212, 0.0, 0.0, 0.0], [-0.808500051, 9.0, 10.0, 5.0], [0.0539607629, 0.0, 0.0, 0.0], [-0.0638436899, 0.0, 0.0, 0.0], [0.00883136783, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 8, 4, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_527(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.868499994, 1.0, 2.0, 3.0], [-0.906499982, 3.0, 4.0, 3.0], [0.0210499987, 5.0, 6.0, 4.0], [0.222499996, 7.0, 8.0, 6.0], [-0.061333511, 0.0, 0.0, 0.0], [-0.194499999, 9.0, 10.0, 1.0], [0.0545925312, 0.0, 0.0, 0.0], [-0.0485294797, 0.0, 0.0, 0.0], [-0.67900002, 11.0, 12.0, 5.0], [0.0290876366, 0.0, 0.0, 0.0], [-0.0348094665, 0.0, 0.0, 0.0], [-0.00727876881, 0.0, 0.0, 0.0], [0.0568719134, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 11, 12, 4, 9, 10, 6])
    branch_indices = np.array([0, 1, 3, 8, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_528(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 1.0], [0.0632499978, 3.0, 4.0, 6.0], [0.0935000032, 5.0, 6.0, 6.0], [-0.035149999, 7.0, 8.0, 6.0], [0.0714000016, 9.0, 10.0, 6.0], [0.0267499983, 11.0, 12.0, 6.0], [0.965499997, 13.0, 14.0, 0.0], [-0.0822098181, 0.0, 0.0, 0.0], [0.0402499996, 15.0, 16.0, 6.0], [-0.184019655, 0.0, 0.0, 0.0], [0.0923499987, 17.0, 18.0, 6.0], [0.0939783007, 0.0, 0.0, 0.0], [0.0402499996, 19.0, 20.0, 6.0], [0.139499992, 21.0, 22.0, 6.0], [0.104499996, 23.0, 24.0, 6.0], [0.143415257, 0.0, 0.0, 0.0], [0.0310395453, 0.0, 0.0, 0.0], [0.116126888, 0.0, 0.0, 0.0], [-0.0234426819, 0.0, 0.0, 0.0], [-0.191595569, 0.0, 0.0, 0.0], [-0.00780909695, 0.0, 0.0, 0.0], [-0.0796831921, 0.0, 0.0, 0.0], [0.0258703344, 0.0, 0.0, 0.0], [0.219690368, 0.0, 0.0, 0.0], [0.039158117, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 9, 17, 18, 11, 19, 20, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 8, 4, 10, 2, 5, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_529(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 1.0], [0.0632499978, 3.0, 4.0, 6.0], [0.0935000032, 5.0, 6.0, 6.0], [-0.035149999, 7.0, 8.0, 6.0], [0.0714000016, 9.0, 10.0, 6.0], [-0.9745, 11.0, 12.0, 4.0], [-0.994500041, 13.0, 14.0, 1.0], [0.0836177915, 0.0, 0.0, 0.0], [0.0402499996, 15.0, 16.0, 6.0], [0.184156701, 0.0, 0.0, 0.0], [0.0923499987, 17.0, 18.0, 6.0], [0.139138892, 0.0, 0.0, 0.0], [0.986500025, 19.0, 20.0, 0.0], [0.168500006, 21.0, 22.0, 6.0], [0.180500001, 23.0, 24.0, 6.0], [-0.14282988, 0.0, 0.0, 0.0], [-0.0302707814, 0.0, 0.0, 0.0], [-0.115924746, 0.0, 0.0, 0.0], [0.02395471, 0.0, 0.0, 0.0], [0.039398782, 0.0, 0.0, 0.0], [-0.124556065, 0.0, 0.0, 0.0], [-0.197261035, 0.0, 0.0, 0.0], [-0.0300512929, 0.0, 0.0, 0.0], [0.0127739161, 0.0, 0.0, 0.0], [-0.0567348599, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 9, 17, 18, 11, 19, 20, 21, 22, 23, 24])
    branch_indices = np.array([0, 1, 3, 8, 4, 10, 2, 5, 12, 6, 13, 14])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_530(xs):
    #Predicts Class 0
    function_dict = np.array([[0.405499995, 1.0, 2.0, 0.0], [0.2685, 3.0, 4.0, 6.0], [0.25849998, 5.0, 6.0, 6.0], [0.291500002, 7.0, 8.0, 0.0], [0.135500014, 9.0, 10.0, 0.0], [0.213499993, 11.0, 12.0, 6.0], [-0.922500014, 13.0, 14.0, 3.0], [-0.0088677099, 0.0, 0.0, 0.0], [0.0645726919, 0.0, 0.0, 0.0], [0.0311501306, 0.0, 0.0, 0.0], [-0.0535010099, 0.0, 0.0, 0.0], [0.00474690087, 0.0, 0.0, 0.0], [-0.071506992, 0.0, 0.0, 0.0], [-0.00558578921, 0.0, 0.0, 0.0], [0.0327702984, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 8, 9, 10, 11, 12, 13, 14])
    branch_indices = np.array([0, 1, 3, 4, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_531(xs):
    #Predicts Class 1
    function_dict = np.array([[0.409500003, 1.0, 2.0, 0.0], [-0.0363999978, 3.0, 4.0, 4.0], [-0.858500004, 5.0, 6.0, 3.0], [-0.145500004, 7.0, 8.0, 4.0], [0.0243367497, 0.0, 0.0, 0.0], [-0.917500019, 9.0, 10.0, 3.0], [0.243499994, 11.0, 12.0, 6.0], [-0.722499967, 13.0, 14.0, 2.0], [-0.100435302, 0.0, 0.0, 0.0], [-0.706499994, 15.0, 16.0, 2.0], [-0.314999998, 17.0, 18.0, 1.0], [-0.0110117802, 0.0, 0.0, 0.0], [0.0962263718, 0.0, 0.0, 0.0], [-0.0317923278, 0.0, 0.0, 0.0], [0.0346234627, 0.0, 0.0, 0.0], [-0.018689841, 0.0, 0.0, 0.0], [0.076021634, 0.0, 0.0, 0.0], [0.0237959921, 0.0, 0.0, 0.0], [-0.0984923095, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([13, 14, 8, 4, 15, 16, 17, 18, 11, 12])
    branch_indices = np.array([0, 1, 3, 7, 2, 5, 9, 10, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_532(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.226500005, 1.0, 2.0, 1.0], [-0.931499958, 3.0, 4.0, 3.0], [0.387499988, 5.0, 6.0, 0.0], [-0.0593181364, 0.0, 0.0, 0.0], [0.238499999, 7.0, 8.0, 6.0], [0.284500003, 9.0, 10.0, 0.0], [-0.043750003, 11.0, 12.0, 4.0], [0.185499996, 13.0, 14.0, 6.0], [-0.0444534421, 0.0, 0.0, 0.0], [0.0272044484, 0.0, 0.0, 0.0], [-0.0344816297, 0.0, 0.0, 0.0], [0.00541503541, 0.0, 0.0, 0.0], [0.0567587055, 0.0, 0.0, 0.0], [-0.0184552204, 0.0, 0.0, 0.0], [0.0715597346, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 13, 14, 8, 9, 10, 11, 12])
    branch_indices = np.array([0, 1, 4, 7, 2, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_533(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.0354500003, 1.0, 2.0, 6.0], [0.0697286576, 0.0, 0.0, 0.0], [0.0458000004, 3.0, 4.0, 6.0], [-0.993499994, 5.0, 6.0, 1.0], [0.0638500005, 7.0, 8.0, 6.0], [-0.98150003, 9.0, 10.0, 4.0], [0.0349644944, 0.0, 0.0, 0.0], [0.109363794, 0.0, 0.0, 0.0], [0.0970000029, 11.0, 12.0, 6.0], [0.0113429883, 0.0, 0.0, 0.0], [-0.134721294, 0.0, 0.0, 0.0], [-0.0325324461, 0.0, 0.0, 0.0], [0.00996395387, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 6, 7, 11, 12])
    branch_indices = np.array([0, 2, 3, 5, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_534(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.0354500003, 1.0, 2.0, 6.0], [-0.0683559775, 0.0, 0.0, 0.0], [0.0458000004, 3.0, 4.0, 6.0], [-0.993499994, 5.0, 6.0, 1.0], [0.0638500005, 7.0, 8.0, 6.0], [-0.98150003, 9.0, 10.0, 4.0], [-0.0324981771, 0.0, 0.0, 0.0], [-0.114664033, 0.0, 0.0, 0.0], [0.0970000029, 11.0, 12.0, 6.0], [-0.0101619614, 0.0, 0.0, 0.0], [0.135297805, 0.0, 0.0, 0.0], [0.032810878, 0.0, 0.0, 0.0], [-0.00988900848, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 6, 7, 11, 12])
    branch_indices = np.array([0, 2, 3, 5, 4, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_535(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.952499986, 1.0, 2.0, 3.0], [-0.0353674963, 0.0, 0.0, 0.0], [0.168500006, 3.0, 4.0, 6.0], [-0.0415578373, 0.0, 0.0, 0.0], [-0.343500018, 5.0, 6.0, 1.0], [-0.358500004, 7.0, 8.0, 4.0], [-0.230500013, 9.0, 10.0, 1.0], [-0.000627741218, 0.0, 0.0, 0.0], [0.0651870295, 0.0, 0.0, 0.0], [-0.0780657381, 0.0, 0.0, 0.0], [0.0346616879, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 3, 7, 8, 9, 10])
    branch_indices = np.array([0, 2, 4, 5, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_536(xs):
    #Predicts Class 1
    function_dict = np.array([[0.2315, 1.0, 2.0, 6.0], [0.551499963, 3.0, 4.0, 0.0], [0.243499994, 5.0, 6.0, 6.0], [-0.193500012, 7.0, 8.0, 1.0], [-0.0190372001, 0.0, 0.0, 0.0], [-0.0582768917, 0.0, 0.0, 0.0], [0.0945999995, 9.0, 10.0, 0.0], [-0.906499982, 11.0, 12.0, 3.0], [-0.0143048055, 0.0, 0.0, 0.0], [-0.0469671562, 0.0, 0.0, 0.0], [-0.256500006, 13.0, 14.0, 4.0], [0.0158227421, 0.0, 0.0, 0.0], [0.0820653513, 0.0, 0.0, 0.0], [-0.0259761848, 0.0, 0.0, 0.0], [0.0461664647, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 4, 5, 9, 13, 14])
    branch_indices = np.array([0, 1, 3, 7, 2, 6, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_537(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.559499979, 1.0, 2.0, 5.0], [-0.601500034, 3.0, 4.0, 5.0], [-0.467500001, 5.0, 6.0, 2.0], [-0.948500037, 7.0, 8.0, 3.0], [-0.0440176204, 0.0, 0.0, 0.0], [0.232500002, 9.0, 10.0, 6.0], [0.0500271097, 0.0, 0.0, 0.0], [0.0372808203, 0.0, 0.0, 0.0], [-0.29549998, 11.0, 12.0, 1.0], [-0.0310686082, 0.0, 0.0, 0.0], [0.0250972882, 0.0, 0.0, 0.0], [0.016301455, 0.0, 0.0, 0.0], [-0.0486700423, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 11, 12, 4, 9, 10, 6])
    branch_indices = np.array([0, 1, 3, 8, 2, 5])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_538(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.962499976, 1.0, 2.0, 1.0], [-0.871500015, 3.0, 4.0, 4.0], [0.166500002, 5.0, 6.0, 6.0], [-0.997500002, 7.0, 8.0, 3.0], [0.104007266, 0.0, 0.0, 0.0], [0.00599481957, 0.0, 0.0, 0.0], [-0.0957320407, 0.0, 0.0, 0.0], [-0.921499968, 9.0, 10.0, 4.0], [-0.0591590926, 0.0, 0.0, 0.0], [0.000586657727, 0.0, 0.0, 0.0], [0.0714627653, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 8, 4, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_539(xs):
    #Predicts Class 4
    function_dict = np.array([[0.199499995, 1.0, 2.0, 6.0], [-0.995499969, 3.0, 4.0, 3.0], [0.242500007, 5.0, 6.0, 6.0], [0.932500005, 7.0, 8.0, 0.0], [0.0447821431, 0.0, 0.0, 0.0], [0.107307374, 0.0, 0.0, 0.0], [-0.973500013, 9.0, 10.0, 4.0], [0.0657140687, 0.0, 0.0, 0.0], [0.956499994, 11.0, 12.0, 0.0], [0.290499985, 13.0, 14.0, 6.0], [0.0531344004, 0.0, 0.0, 0.0], [-0.139876679, 0.0, 0.0, 0.0], [-0.00480689714, 0.0, 0.0, 0.0], [-0.0877378359, 0.0, 0.0, 0.0], [-0.0108553935, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 11, 12, 4, 5, 13, 14, 10])
    branch_indices = np.array([0, 1, 3, 8, 2, 6, 9])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_540(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.443499982, 1.0, 2.0, 4.0], [0.032062795, 0.0, 0.0, 0.0], [-0.763499975, 3.0, 4.0, 5.0], [0.266499996, 5.0, 6.0, 6.0], [-0.233500004, 7.0, 8.0, 4.0], [-0.001830525, 0.0, 0.0, 0.0], [-0.0716968253, 0.0, 0.0, 0.0], [0.254500002, 9.0, 10.0, 6.0], [0.260500014, 11.0, 12.0, 6.0], [-0.0194050968, 0.0, 0.0, 0.0], [0.068688713, 0.0, 0.0, 0.0], [0.00829835702, 0.0, 0.0, 0.0], [-0.0513141304, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 5, 6, 9, 10, 11, 12])
    branch_indices = np.array([0, 2, 3, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_541(xs):
    #Predicts Class 1
    function_dict = np.array([[0.291500002, 1.0, 2.0, 6.0], [-0.135500014, 3.0, 4.0, 1.0], [-0.666499972, 5.0, 6.0, 5.0], [-0.94749999, 7.0, 8.0, 3.0], [-0.872500002, 9.0, 10.0, 3.0], [4.82099786e-05, 0.0, 0.0, 0.0], [0.0490236543, 0.0, 0.0, 0.0], [-0.414499998, 11.0, 12.0, 1.0], [-0.435499996, 13.0, 14.0, 1.0], [0.022859117, 0.0, 0.0, 0.0], [-0.0854767859, 0.0, 0.0, 0.0], [0.0304911211, 0.0, 0.0, 0.0], [-0.0788904727, 0.0, 0.0, 0.0], [-0.0369894914, 0.0, 0.0, 0.0], [0.0383849256, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 13, 14, 9, 10, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 4, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_542(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.703500032, 1.0, 2.0, 2.0], [0.2245, 3.0, 4.0, 6.0], [0.199499995, 5.0, 6.0, 6.0], [-0.0522864833, 0.0, 0.0, 0.0], [0.0118767181, 0.0, 0.0, 0.0], [0.0670546219, 0.0, 0.0, 0.0], [-0.938500047, 7.0, 8.0, 3.0], [0.061592117, 0.0, 0.0, 0.0], [0.264499992, 9.0, 10.0, 6.0], [-0.0636646673, 0.0, 0.0, 0.0], [0.0393335, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 4, 5, 7, 9, 10])
    branch_indices = np.array([0, 1, 2, 6, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_543(xs):
    #Predicts Class 3
    function_dict = np.array([[-0.995499969, 1.0, 2.0, 4.0], [0.0564086027, 0.0, 0.0, 0.0], [-0.980499983, 3.0, 4.0, 4.0], [0.1505, 5.0, 6.0, 6.0], [-0.976500034, 7.0, 8.0, 4.0], [0.111500002, 9.0, 10.0, 6.0], [0.199499995, 11.0, 12.0, 6.0], [0.154500008, 13.0, 14.0, 6.0], [0.0206499994, 15.0, 16.0, 6.0], [-0.000245729287, 0.0, 0.0, 0.0], [-0.136949286, 0.0, 0.0, 0.0], [0.0477586687, 0.0, 0.0, 0.0], [-0.0879946724, 0.0, 0.0, 0.0], [0.126393512, 0.0, 0.0, 0.0], [-0.0234301575, 0.0, 0.0, 0.0], [0.0778930038, 0.0, 0.0, 0.0], [-0.0116383787, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([1, 9, 10, 11, 12, 13, 14, 15, 16])
    branch_indices = np.array([0, 2, 3, 5, 6, 4, 7, 8])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_544(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.77700001, 1.0, 2.0, 4.0], [0.958500028, 3.0, 4.0, 0.0], [-0.0560310744, 0.0, 0.0, 0.0], [0.13350001, 5.0, 6.0, 6.0], [-0.909500003, 7.0, 8.0, 4.0], [-0.986500025, 9.0, 10.0, 1.0], [0.14148955, 0.0, 0.0, 0.0], [-0.928499997, 11.0, 12.0, 4.0], [-0.0993233398, 0.0, 0.0, 0.0], [0.0251943916, 0.0, 0.0, 0.0], [-0.0448943973, 0.0, 0.0, 0.0], [-0.0035806878, 0.0, 0.0, 0.0], [0.106155537, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 6, 11, 12, 8, 2])
    branch_indices = np.array([0, 1, 3, 5, 4, 7])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_545(xs):
    #Predicts Class 0
    function_dict = np.array([[-0.428499997, 1.0, 2.0, 1.0], [0.221500009, 3.0, 4.0, 6.0], [-0.167499989, 5.0, 6.0, 1.0], [-0.0621456243, 0.0, 0.0, 0.0], [0.260500014, 7.0, 8.0, 6.0], [0.186500013, 9.0, 10.0, 6.0], [-0.0315558538, 0.0, 0.0, 0.0], [0.0521894619, 0.0, 0.0, 0.0], [-0.0370673537, 0.0, 0.0, 0.0], [0.0897727683, 0.0, 0.0, 0.0], [0.240500003, 11.0, 12.0, 6.0], [-0.080310598, 0.0, 0.0, 0.0], [0.0331462398, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([3, 7, 8, 9, 11, 12, 6])
    branch_indices = np.array([0, 1, 4, 2, 5, 10])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_546(xs):
    #Predicts Class 1
    function_dict = np.array([[-0.679499984, 1.0, 2.0, 5.0], [-0.778499961, 3.0, 4.0, 5.0], [-0.603500009, 5.0, 6.0, 2.0], [-0.831499994, 7.0, 8.0, 2.0], [0.436500013, 9.0, 10.0, 0.0], [-0.304499984, 11.0, 12.0, 1.0], [0.425500005, 13.0, 14.0, 0.0], [0.0267689675, 0.0, 0.0, 0.0], [-0.415499985, 15.0, 16.0, 1.0], [0.327499986, 17.0, 18.0, 0.0], [-0.716500044, 19.0, 20.0, 2.0], [0.000523299968, 0.0, 0.0, 0.0], [-0.103374943, 0.0, 0.0, 0.0], [0.297500014, 21.0, 22.0, 0.0], [0.0470898971, 0.0, 0.0, 0.0], [-0.0638612807, 0.0, 0.0, 0.0], [0.00149640488, 0.0, 0.0, 0.0], [0.00507820724, 0.0, 0.0, 0.0], [0.0915788338, 0.0, 0.0, 0.0], [0.0366014764, 0.0, 0.0, 0.0], [-0.048657313, 0.0, 0.0, 0.0], [0.0238002762, 0.0, 0.0, 0.0], [-0.0664324537, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 15, 16, 17, 18, 19, 20, 11, 12, 21, 22, 14])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 10, 2, 5, 6, 13])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_547(xs):
    #Predicts Class 2
    function_dict = np.array([[-0.868499994, 1.0, 2.0, 3.0], [-0.534500003, 3.0, 4.0, 5.0], [-0.156500012, 5.0, 6.0, 4.0], [0.543500006, 7.0, 8.0, 0.0], [0.0323632732, 0.0, 0.0, 0.0], [-0.00869943108, 0.0, 0.0, 0.0], [-0.50849998, 9.0, 10.0, 5.0], [-0.151500002, 11.0, 12.0, 4.0], [0.0131704994, 0.0, 0.0, 0.0], [0.0758976862, 0.0, 0.0, 0.0], [-0.0068199127, 0.0, 0.0, 0.0], [-0.00342388568, 0.0, 0.0, 0.0], [-0.070222564, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([11, 12, 8, 4, 5, 9, 10])
    branch_indices = np.array([0, 1, 3, 7, 2, 6])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_548(xs):
    #Predicts Class 3
    function_dict = np.array([[0.289499998, 1.0, 2.0, 6.0], [-0.995499969, 3.0, 4.0, 3.0], [0.300500005, 5.0, 6.0, 6.0], [-0.99849999, 7.0, 8.0, 3.0], [-0.0804129019, 0.0, 0.0, 0.0], [0.064312242, 0.0, 0.0, 0.0], [0.00225972058, 0.0, 0.0, 0.0], [0.96449995, 9.0, 10.0, 0.0], [0.96449995, 11.0, 12.0, 0.0], [0.0630293339, 0.0, 0.0, 0.0], [-0.0106289955, 0.0, 0.0, 0.0], [-0.0647251382, 0.0, 0.0, 0.0], [0.123285778, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([9, 10, 11, 12, 4, 5, 6])
    branch_indices = np.array([0, 1, 3, 7, 8, 2])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def booster_549(xs):
    #Predicts Class 4
    function_dict = np.array([[-0.978500009, 1.0, 2.0, 4.0], [-0.982499957, 3.0, 4.0, 4.0], [-0.976500034, 5.0, 6.0, 4.0], [0.985499978, 7.0, 8.0, 0.0], [0.99150002, 9.0, 10.0, 0.0], [-0.10588368, 0.0, 0.0, 0.0], [0.99150002, 11.0, 12.0, 0.0], [0.0734955519, 0.0, 0.0, 0.0], [-0.985499978, 13.0, 14.0, 4.0], [0.100100003, 15.0, 16.0, 6.0], [-0.067291595, 0.0, 0.0, 0.0], [-0.989500046, 17.0, 18.0, 1.0], [0.0523272119, 0.0, 0.0, 0.0], [0.00727865333, 0.0, 0.0, 0.0], [-0.0713910684, 0.0, 0.0, 0.0], [-0.00922531076, 0.0, 0.0, 0.0], [0.199429318, 0.0, 0.0, 0.0], [-0.0296018198, 0.0, 0.0, 0.0], [0.029173743, 0.0, 0.0, 0.0], [-1.0, -1.0, -1.0, -1.0]])
    leaf_indices = np.array([7, 13, 14, 15, 16, 10, 5, 17, 18, 12])
    branch_indices = np.array([0, 1, 3, 8, 4, 9, 2, 6, 11])
    pointers = np.zeros(xs.shape[0]).astype('int')
    values = np.zeros(xs.shape[0])
    dones = np.zeros(xs.shape[0])
    while True:
        pointed_at_leaf_rowindices = np.argwhere(np.isin(pointers,leaf_indices).reshape(-1)).reshape(-1)
        if pointed_at_leaf_rowindices.shape[0]>0:
            leaf_pointers = pointers[pointed_at_leaf_rowindices]
            dones[pointed_at_leaf_rowindices] = np.ones(pointed_at_leaf_rowindices.shape[0])
            values[pointed_at_leaf_rowindices] = function_dict[leaf_pointers,0].reshape(-1)
        pointed_at_branch_rowindices = np.argwhere(np.isin(pointers, branch_indices)).reshape(-1)
        if pointed_at_branch_rowindices.shape[0]>0:
            features_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 3].reshape(-1).astype('int')
            branching_rows = xs[pointed_at_branch_rowindices, :].reshape(pointed_at_branch_rowindices.shape[0],-1)
            no_pointed_at = function_dict[:-1][pointers, 2].reshape(-1).astype('int')
            yes_pointed_at = function_dict[:-1][pointers, 1].reshape(-1).astype('int')
            thres_pointed_at = function_dict[:-1][pointers[pointed_at_branch_rowindices], 0].reshape(-1).astype('float64')
            feature_val_for_each_row = branching_rows[np.arange(len(branching_rows)),features_pointed_at].reshape(-1).astype('float64')
            yes_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row < thres_pointed_at).reshape(-1)]
            pointers[yes_indices] = yes_pointed_at[yes_indices]
            no_indices = pointed_at_branch_rowindices[np.argwhere(feature_val_for_each_row >= thres_pointed_at).reshape(-1)]
            pointers[no_indices] = no_pointed_at[no_indices]
        if pointed_at_leaf_rowindices.shape[0]>0:
            pointers[pointed_at_leaf_rowindices] = -1 * np.ones(pointed_at_leaf_rowindices.shape[0])
        if (dones==1).all() or (pointers == -1).all():
            break
    return values
def logit_class_0(xs):
    sum_of_leaf_values = np.zeros(xs.shape[0])
    for booster_index in range(0,550,5):
            sum_of_leaf_values += eval('booster_' + str(booster_index) + '(xs)')
    return sum_of_leaf_values


def logit_class_1(xs):
    sum_of_leaf_values = np.zeros(xs.shape[0])
    for booster_index in range(1,550,5):
            sum_of_leaf_values += eval('booster_' + str(booster_index) + '(xs)')
    return sum_of_leaf_values


def logit_class_2(xs):
    sum_of_leaf_values = np.zeros(xs.shape[0])
    for booster_index in range(2,550,5):
            sum_of_leaf_values += eval('booster_' + str(booster_index) + '(xs)')
    return sum_of_leaf_values


def logit_class_3(xs):
    sum_of_leaf_values = np.zeros(xs.shape[0])
    for booster_index in range(3,550,5):
            sum_of_leaf_values += eval('booster_' + str(booster_index) + '(xs)')
    return sum_of_leaf_values


def logit_class_4(xs):
    sum_of_leaf_values = np.zeros(xs.shape[0])
    for booster_index in range(4,550,5):
            sum_of_leaf_values += eval('booster_' + str(booster_index) + '(xs)')
    return sum_of_leaf_values


def classify(rows, return_probabilities=False):
    logits = []
    logits.append(logit_class_0)
    logits.append(logit_class_1)
    logits.append(logit_class_2)
    logits.append(logit_class_3)
    logits.append(logit_class_4)
    o = np.array([logits[class_index](rows) for class_index in range(5)]).T
    if not return_probabilities:
        return np.argmax(o,axis=1)
    else:
        exps = np.exp(o)
        Z = np.sum(exps, axis=1).reshape(-1, 1)
        return exps/Z





def Validate(cleanarr):
    #validation
    outputs = classify(cleanarr[:, :-1])
    #metrics
    count, correct_count = 0, 0
    numeachclass = {}
    for k, o in enumerate(outputs):
        if int(o) == int(float(cleanarr[k, -1])):
            correct_count += 1
        if int(float(cleanarr[k, -1])) in numeachclass.keys():
            numeachclass[int(float(cleanarr[k, -1]))] += 1
        else:
            numeachclass[int(float(cleanarr[k, -1]))] = 1
        count += 1
    return count, correct_count, numeachclass, outputs


def Predict(arr,headerless,csvfile, get_key, classmapping):
    with open(csvfile, 'r') as csvinput:
        #readers and writers
        reader = csv.reader(csvinput)

        #print original header
        if (not headerless):
            print(','.join(next(reader, None) + ["Prediction"]))
        
        outputs = classify(arr)
        for i, row in enumerate(reader):
            #use the transformed array as input to predictor
            pred = str(get_key(int(outputs[i]), classmapping))
            #use original untransformed line to write out
            row.append(pred)
            print(','.join(['"' + field + '"' if ',' in field else field for field in row]))



# Main method
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Predictor trained on '+TRAINFILE)
    parser.add_argument('csvfile', type=str, help='CSV file containing test set (unlabeled).')
    parser.add_argument('-validate', action='store_true', help='Validation mode. csvfile must be labeled. Output is classification statistics rather than predictions.')
    parser.add_argument('-cleanfile', action='store_true', help='Use this flag to save prediction time if the csvfile you are passing has already been preprocessed. Implies headerless.')
    parser.add_argument('-headerless', help='Do not treat the first line of csvfile as a header.', action='store_true')
    parser.add_argument('-json', action="store_true", default=False, help="report measurements as json")
    parser.add_argument('-trim', action="store_true", help="If true, the prediction will not output ignored columns.")
    args = parser.parse_args()
    faulthandler.enable()
    global pool
    if args.validate:
        args.trim = True
    
    #clean if not already clean
    if not args.cleanfile:
        tempdir = tempfile.gettempdir()
        cleanfile = tempfile.NamedTemporaryFile().name
        preprocessedfile = tempfile.NamedTemporaryFile().name
        output = preprocess(args.csvfile,preprocessedfile,args.headerless,(not args.validate), trim=args.trim)
        get_key, classmapping = clean(preprocessedfile if output!=-1 else args.csvfile, cleanfile, -1, args.headerless, (not args.validate), trim=args.trim)
    else:
        cleanfile=args.csvfile
        preprocessedfile=args.csvfile
        get_key = lambda x, y: x
        classmapping = {}
        output=None


    #load file
    cleanarr = np.loadtxt(cleanfile, delimiter=',', dtype='float64')
    if not args.trim and ignorecolumns != []:
        cleanarr = cleanarr[:, important_idxs]


    #Predict
    if not args.validate:
        Predict(cleanarr, args.headerless, preprocessedfile if output!=-1 else args.csvfile, get_key, classmapping)


    #Validate
    else:
        classifier_type = 'RF'
        count, correct_count, numeachclass, preds = Validate(cleanarr)
        #Correct Labels
        true_labels = cleanarr[:, -1]

        #Report Metrics
        model_cap=11
        if args.json:
            import json
        if n_classes == 2:
            #Base metrics
            FN = float(num_FN) * 100.0 / float(count)
            FP = float(num_FP) * 100.0 / float(count)
            TN = float(num_TN) * 100.0 / float(count)
            TP = float(num_TP) * 100.0 / float(count)
            num_correct = correct_count

            #Calculated Metrics
            if int(num_TP + num_FN) != 0:
                TPR = num_TP / (num_TP + num_FN) # Sensitivity, Recall
            if int(num_TN + num_FP) != 0:
                TNR = num_TN / (num_TN + num_FP) # Specificity
            if int(num_TP + num_FP) != 0:
                PPV = num_TP / (num_TP + num_FP) # Recall
            if int(num_FN + num_TP) != 0:
                FNR = num_FN / (num_FN + num_TP) # Miss rate
            if int(2 * num_TP + num_FP + num_FN) != 0:
                FONE = 2 * num_TP / (2 * num_TP + num_FP + num_FN) # F1 Score
            if int(num_TP + num_FN + num_FP) != 0:
                TS = num_TP / (num_TP + num_FN + num_FP) # Critical Success Index
            #Best Guess Accuracy
            randguess = int(float(10000.0 * max(num_class_1, num_class_0)) / count) / 100.0
            #Model Accuracy
            classbalance = [float(num_class_0)/count, float(num_class_1)/count]
            H = float(-1.0 * sum([classbalance[i] * math.log(classbalance[i]) / math.log(2) for i in range(len(classbalance))]))

            modelacc = int(float(num_correct * 10000) / count) / 100.0
            #Report
            json_dict = {'instance_count':                        count ,
                         'classifier_type':                        classifier_type,
                         'classes':                            2 ,
                         'false_negative_instances':    num_FN ,
                         'false_positive_instances':    num_FP ,
                         'true_positive_instances':    num_TP ,
                         'true_negative_instances':    num_TN,
                         'false_negatives':                        FN ,
                         'false_positives':                        FP ,
                         'true_negatives':                        TN ,
                         'true_positives':                        TP ,
                         'number_correct':                        num_correct ,
                         'accuracy': {
                             'best_guess': randguess,
                             'improvement': modelacc-randguess,
                             'model_accuracy': modelacc,
                         },
                         'model_capacity':                        model_cap ,
                         'generalization_ratio':                int(float(num_correct * 100) / model_cap) * H/ 100.0,
                         'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0,
                        'shannon_entropy_of_labels':           H,
                        'classbalance':                        classbalance}
            if args.json:
                pass
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                elif classifier_type == 'RF':
                    print("Classifier Type:                    Random Forest")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        Binary classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0 * H) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))
                print("System behavior")
                print("True Negatives:                     {:.2f}%".format(TN) + " (" + str(int(num_TN)) + "/" + str(count) + ")")
                print("True Positives:                     {:.2f}%".format(TP) + " (" + str(int(num_TP)) + "/" + str(count) + ")")
                print("False Negatives:                    {:.2f}%".format(FN) + " (" + str(int(num_FN)) + "/" + str(count) + ")")
                print("False Positives:                    {:.2f}%".format(FP) + " (" + str(int(num_FP)) + "/" + str(count) + ")")
                if int(num_TP + num_FN) != 0:
                    print("True Pos. Rate/Sensitivity/Recall:  {:.2f}".format(TPR))
                if int(num_TN + num_FP) != 0:
                    print("True Neg. Rate/Specificity:         {:.2f}".format(TNR))
                if int(num_TP + num_FP) != 0:
                    print("Precision:                          {:.2f}".format(PPV))
                if int(2 * num_TP + num_FP + num_FN) != 0:
                    print("F-1 Measure:                        {:.2f}".format(FONE))
                if int(num_TP + num_FN) != 0:
                    print("False Negative Rate/Miss Rate:      {:.2f}".format(FNR))
                if int(num_TP + num_FN + num_FP) != 0:
                    print("Critical Success Index:             {:.2f}".format(TS))
        #Multiclass
        else:
            num_correct = correct_count
            modelacc = int(float(num_correct * 10000) / count) / 100.0
            randguess = round(max(numeachclass.values()) / sum(numeachclass.values()) * 100, 2)
            classbalance = [float(numofcertainclass) / count for numofcertainclass in numeachclass.values()]
            H = float(-1.0 * sum([classbalance[i] * math.log(classbalance[i]) / math.log(2) for i in range(len(classbalance))]))

            if args.json:
                json_dict = {'instance_count':                        count,
                            'classifier_type':                        classifier_type,
                            'classes':                            n_classes,
                             'number_correct': num_correct,
                             'accuracy': {
                                 'best_guess': randguess,
                                 'improvement': modelacc - randguess,
                                 'model_accuracy': modelacc,
                             },
                             'model_capacity': model_cap,
                            'generalization_ratio':                int(float(num_correct * 100) / model_cap) / 100.0 * H,
                            'model_efficiency':                    int(100 * (modelacc - randguess) / model_cap) / 100.0,
                        'shannon_entropy_of_labels':           H,
                        'classbalance':                        classbalance}
            else:
                if classifier_type == 'NN':
                    print("Classifier Type:                    Neural Network")
                elif classifier_type == 'RF':
                    print("Classifier Type:                    Random Forest")
                else:
                    print("Classifier Type:                    Decision Tree")
                print("System Type:                        " + str(n_classes) + "-way classifier")
                print("Best-guess accuracy:                {:.2f}%".format(randguess))
                print("Model accuracy:                     {:.2f}%".format(modelacc) + " (" + str(int(num_correct)) + "/" + str(count) + " correct)")
                print("Improvement over best guess:        {:.2f}%".format(modelacc - randguess) + " (of possible " + str(round(100 - randguess, 2)) + "%)")
                print("Model capacity (MEC):               {:.0f} bits".format(model_cap))
                print("Generalization ratio:               {:.2f}".format(int(float(num_correct * 100) / model_cap) / 100.0 * H) + " bits/bit")
                print("Model efficiency:                   {:.2f}%/parameter".format(int(100 * (modelacc - randguess) / model_cap) / 100.0))

        try:
            import numpy as np # For numpy see: http://numpy.org
            from numpy import array
        except:
            print("Note: If you install numpy (https://www.numpy.org) and scipy (https://www.scipy.org) this predictor generates a confusion matrix")

        def confusion_matrix(y_true, y_pred, json, labels=None, sample_weight=None, normalize=None):
            stats = {}
            if labels is None:
                labels = np.array(list(set(list(y_true.astype('int')))))
            else:
                labels = np.asarray(labels)
                if np.all([l not in y_true for l in labels]):
                    raise ValueError("At least one label specified must be in y_true")
            n_labels = labels.size

            for class_i in range(n_labels):
                stats[class_i] = {'TP':{},'FP':{},'FN':{},'TN':{}}
                class_i_indices = np.argwhere(y_true==class_i)
                not_class_i_indices = np.argwhere(y_true!=class_i)
                stats[int(class_i)]['TP'] = int(np.sum(y_pred[class_i_indices]==y_true[class_i_indices]))
                stats[int(class_i)]['FP'] = int(np.sum(y_pred[class_i_indices]!=y_true[class_i_indices]))
                stats[int(class_i)]['TN'] = int(np.sum(y_pred[not_class_i_indices]==y_true[not_class_i_indices]))
                stats[int(class_i)]['FN'] = int(np.sum(y_pred[not_class_i_indices]!=y_true[not_class_i_indices]))
            #check for numpy/scipy is imported
            try:
                from scipy.sparse import coo_matrix #required for multiclass metrics
            except:
                if not json:
                    print("Note: If you install scipy (https://www.scipy.org) this predictor generates a confusion matrix")
                    sys.exit()
                else:
                    return np.array([]), stats
                

            # Compute confusion matrix to evaluate the accuracy of a classification.
            # By definition a confusion matrix :math:C is such that :math:C_{i, j}
            # is equal to the number of observations known to be in group :math:i and
            # predicted to be in group :math:j.
            # Thus in binary classification, the count of true negatives is
            # :math:C_{0,0}, false negatives is :math:C_{1,0}, true positives is
            # :math:C_{1,1} and false positives is :math:C_{0,1}.
            # Read more in the :ref:User Guide <confusion_matrix>.
            # Parameters
            # ----------
            # y_true : array-like of shape (n_samples,)
            # Ground truth (correct) target values.
            # y_pred : array-like of shape (n_samples,)
            # Estimated targets as returned by a classifier.
            # labels : array-like of shape (n_classes), default=None
            # List of labels to index the matrix. This may be used to reorder
            # or select a subset of labels.
            # If None is given, those that appear at least once
            # in y_true or y_pred are used in sorted order.
            # sample_weight : array-like of shape (n_samples,), default=None
            # Sample weights.
            # normalize : {'true', 'pred', 'all'}, default=None
            # Normalizes confusion matrix over the true (rows), predicted (columns)
            # conditions or all the population. If None, confusion matrix will not be
            # normalized.
            # Returns
            # -------
            # C : ndarray of shape (n_classes, n_classes)
            # Confusion matrix.
            # References
            # ----------



            if sample_weight is None:
                sample_weight = np.ones(y_true.shape[0], dtype=np.int64)
            else:
                sample_weight = np.asarray(sample_weight)
            if y_true.shape[0]!=y_pred.shape[0]:
                raise ValueError("y_true and y_pred must be of the same length")

            if normalize not in ['true', 'pred', 'all', None]:
                raise ValueError("normalize must be one of {'true', 'pred', 'all', None}")


            label_to_ind = {y: x for x, y in enumerate(labels)}
            # convert yt, yp into index
            y_pred = np.array([label_to_ind.get(x, n_labels + 1) for x in y_pred])
            y_true = np.array([label_to_ind.get(x, n_labels + 1) for x in y_true])
            # intersect y_pred, y_true with labels, eliminate items not in labels
            ind = np.logical_and(y_pred < n_labels, y_true < n_labels)
            y_pred = y_pred[ind]
            y_true = y_true[ind]

            # also eliminate weights of eliminated items
            sample_weight = sample_weight[ind]
            # Choose the accumulator dtype to always have high precision
            if sample_weight.dtype.kind in {'i', 'u', 'b'}:
                dtype = np.int64
            else:
                dtype = np.float64
            cm = coo_matrix((sample_weight, (y_true, y_pred)), shape=(n_labels, n_labels), dtype=dtype,).toarray()


            with np.errstate(all='ignore'):
                if normalize == 'true':
                    cm = cm / cm.sum(axis=1, keepdims=True)
                elif normalize == 'pred':
                    cm = cm / cm.sum(axis=0, keepdims=True)
                elif normalize == 'all':
                    cm = cm / cm.sum()
                cm = np.nan_to_num(cm)
            return cm, stats
        mtrx, stats = confusion_matrix(np.array(true_labels).reshape(-1), np.array(preds).reshape(-1), args.json)
        if args.json:
            json_dict['confusion_matrix'] = mtrx.tolist()
            json_dict['multiclass_stats'] = stats
            print(json.dumps(json_dict))
        else:
            mtrx = mtrx / np.sum(mtrx) * 100.0
            print("Confusion Matrix:")
            print(' ' + np.array2string(mtrx, formatter={'float': (lambda x: '{:.2f}%'.format(round(float(x), 2)))})[1:-1])

    #Clean Up
    if not args.cleanfile:
        os.remove(cleanfile)
        if output!=-1:
            os.remove(preprocessedfile)
