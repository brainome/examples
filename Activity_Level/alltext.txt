Cleaning...
WARNING: Could not detect a GPU. Neural Network generation will be slow.

Brainome Daimensions(tm) 0.99 Copyright (c) 2019 - 2021 by Brainome, Inc. All Rights Reserved.
Licensed to:              Alexander Makhratchev  (Evaluation)
Expiration Date:          2021-04-30   58 days left
Number of Threads:        1
Maximum File Size:        30 GB
Maximum Instances:        unlimited
Maximum Attributes:       unlimited
Maximum Classes:          unlimited
Connected to:             daimensions.brainome.ai  (local execution)



Command:
    btc phone_activity.csv -cleanonly --yes

Start Time:                 03/03/2021, 08:44


Messages:
Clean only output: clean.csv, clean.state

Done Cleaning!
Splitting Data...
Done Splitting Data!
##################################################
Running: DT -rank
./btc 'train.csv' -headerless -f DT -rank -o DTrank.py -riskoverfit --yes
WARNING: Could not detect a GPU. Neural Network generation will be slow.

Brainome Daimensions(tm) 0.99 Copyright (c) 2019 - 2021 by Brainome, Inc. All Rights Reserved.
Licensed to:              Alexander Makhratchev  (Evaluation)
Expiration Date:          2021-04-30   58 days left
Number of Threads:        1
Maximum File Size:        30 GB
Maximum Instances:        unlimited
Maximum Attributes:       unlimited
Maximum Classes:          unlimited
Connected to:             daimensions.brainome.ai  (local execution)



Command:
    btc train.csv -headerless -f DT -rank -o DTrank.py -riskoverfit --yes

Start Time:                 03/03/2021, 08:44

Attribute Ranking:
    Important columns:          504, 559, 302, 460, 274, 93, 508
    Overfit risk:                   0.4%
    Ignoring columns:           0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560
    Test Accuracy Progression:     504 :   72.59%
                                   559 :   90.14%  change  +17.55%
                                   302 :   90.66%  change   +0.53%
                                   460 :   91.24%  change   +0.57%
                                   274 :   94.28%  change   +3.04%
                                   93 :   95.67%  change   +1.39%
                                   508 :   95.50%  change   -0.17%
                                   



Data:
    Input:                      train.csv (headerless csv)
    Target Column:              target
    Number of instances:        4177
    Number of attributes:       7
    Number of classes:          5
    Class Balance:              0: 20.61%, 1: 18.48%, 2: 16.83%, 3: 21.26%, 4: 22.82%

Learnability:
    Best guess accuracy:          22.82%
    Data Sufficiency:            Not enough data to generalize. [red]

Capacity Progression:            at [ 5%, 10%, 20%, 40%, 80%, 100% ]
    Optimal Machine Learner:           8,   8,   9,  10,  10,  11


Estimated Memory Equivalent Capacity for...
    Decision Tree:                  1036 parameters
    Neural Networks:                   1 parameters
    Random Forest:                   225 parameters

Risk that model needs to overfit for 100% accuracy using...
    Decision Tree:                32.34%
    Neural Networks:               0.26%
    Random Forest:                13.69%

Expected Generalization using...
    Decision Tree:                  8.97 bits/bit
    Neural Network:              1766.00 bits/bit
    Random Forest:                 18.56 bits/bit


Recommendations:


    Note: Machine learner type DT given by user.


Time to Build Estimates:
    Decision Tree:             a few seconds


System Meter:                          DTrank.py
    Classifier Type:                   Decision Tree
    System Type:                       5-way classifier
    Training/Validation Split:         Unable to split dataset. The predictor was trained and evaluated on the same data.
    Accuracy:
        Best-guess accuracy:               22.82%


        Overall Model Accuracy:            92.55% (3866/4177 correct)
        Improvement over best guess:       69.73% of possible  77.18%

    Model Capacity (MEC):                    1036 bits
    Generalization Ratio:                    8.63 bits/bit
    Model Efficiency:                        0.06 /parameter
    Generalization Index:                    2.98
    Percent of Data Memorized:              33.61%

    Full Confusion Matrix (count):
                 1.0 |   832    26     1     0     2 
                 2.0 |    57   706     8     1     0 
                 3.0 |     6    26   671     0     0 
                 4.0 |     3     0     0   811    74 
                 5.0 |     7     0     0   100   846 

    Accuracy by Class:
               class |    TP    FP    TN    FN     TPR      TNR      PPV      NPV       F1       TS 
                 1.0 |   832    29  3034   282   74.69%   91.50%   96.63%   91.50%   84.25%   72.79%
                 2.0 |   706    66  3160   245   74.24%   92.80%   91.45%   92.80%   81.95%   69.42%
                 3.0 |   671    32  3195   279   70.63%   91.97%   95.45%   91.97%   81.19%   68.33%
                 4.0 |   811    77  3055   234   77.61%   92.89%   91.33%   92.89%   83.91%   72.28%
                 5.0 |   846   107  3020   204   80.57%   93.67%   88.77%   93.67%   84.47%   73.12%

End Time:                     
Runtime Duration:             

Messages:
Warning: Remapped class labels to be contiguous. Use -cm if DET/ROC-based accuracy measurements are wrong.

Testing on heldout data...
Using  DT -rank achieved 12.49% test accuracy
##################################################
Running: NN -rank
./btc 'train.csv' -headerless -f NN -rank -o NNrank.py -riskoverfit --yes
WARNING: Could not detect a GPU. Neural Network generation will be slow.

Brainome Daimensions(tm) 0.99 Copyright (c) 2019 - 2021 by Brainome, Inc. All Rights Reserved.
Licensed to:              Alexander Makhratchev  (Evaluation)
Expiration Date:          2021-04-30   58 days left
Number of Threads:        1
Maximum File Size:        30 GB
Maximum Instances:        unlimited
Maximum Attributes:       unlimited
Maximum Classes:          unlimited
Connected to:             daimensions.brainome.ai  (local execution)



Command:
    btc train.csv -headerless -f NN -rank -o NNrank.py -riskoverfit --yes

Start Time:                 03/03/2021, 08:47

Attribute Ranking:
    Important columns:          504, 559, 302, 460, 274, 93, 508
    Overfit risk:                   0.4%
    Ignoring columns:           0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560
    Test Accuracy Progression:     504 :   72.59%
                                   559 :   90.14%  change  +17.55%
                                   302 :   90.66%  change   +0.53%
                                   460 :   91.24%  change   +0.57%
                                   274 :   94.28%  change   +3.04%
                                   93 :   95.67%  change   +1.39%
                                   508 :   95.50%  change   -0.17%
                                   



Data:
    Input:                      train.csv (headerless csv)
    Target Column:              target
    Number of instances:        4177
    Number of attributes:       7
    Number of classes:          5
    Class Balance:              0: 20.61%, 1: 18.48%, 2: 16.83%, 3: 21.26%, 4: 22.82%

Learnability:
    Best guess accuracy:          22.82%
    Data Sufficiency:            Not enough data to generalize. [red]

Capacity Progression:            at [ 5%, 10%, 20%, 40%, 80%, 100% ]
    Optimal Machine Learner:           8,   8,   9,  10,  10,  11


Estimated Memory Equivalent Capacity for...
    Decision Tree:                  1036 parameters
    Neural Networks:                   1 parameters
    Random Forest:                   225 parameters

Risk that model needs to overfit for 100% accuracy using...
    Decision Tree:                32.34%
    Neural Networks:               0.26%
    Random Forest:                13.69%

Expected Generalization using...
    Decision Tree:                  8.97 bits/bit
    Neural Network:              1766.00 bits/bit
    Random Forest:                 18.56 bits/bit


Recommendations:


    Note: Machine learner type NN given by user.


Time to Build Estimates:

    Neural Network:              8 minutes

Priming model...done.
System Meter:                          NNrank.py
    Classifier Type:                   Neural Network
    System Type:                       5-way classifier
    Training/Validation Split:         Unable to split dataset. The predictor was trained and evaluated on the same data.
    Accuracy:
        Best-guess accuracy:               22.82%


        Overall Model Accuracy:            89.77% (3750/4177 correct)
        Improvement over best guess:       66.95% of possible  77.18%

    Model Capacity (MEC):                       1 bit
    Generalization Ratio:                 8676.81 bits/bit
    Model Efficiency:                       66.94 /parameter
    Generalization Index:                 2991.66
    Percent of Data Memorized:               0.03%

    Full Confusion Matrix (count):
                 1.0 |   798    47    16     0     0 
                 2.0 |    51   693    28     0     0 
                 3.0 |    23    48   632     0     0 
                 4.0 |     0     0     0   806    82 
                 5.0 |     0     0     0   132   821 

    Accuracy by Class:
               class |    TP    FP    TN    FN     TPR      TNR      PPV      NPV       F1       TS 
                 1.0 |   798    63  2952   364   68.67%   89.02%   92.68%   89.02%   78.89%   65.14%
                 2.0 |   693    79  3057   348   66.57%   89.78%   89.77%   89.78%   76.45%   61.88%
                 3.0 |   632    71  3118   356   63.97%   89.75%   89.90%   89.75%   74.75%   59.68%
                 4.0 |   806    82  2944   345   70.03%   89.51%   90.77%   89.51%   79.06%   65.37%
                 5.0 |   821   132  2929   295   73.57%   90.85%   86.15%   90.85%   79.36%   65.79%

End Time:                     
Runtime Duration:             

Messages:
Warning: Remapped class labels to be contiguous. Use -cm if DET/ROC-based accuracy measurements are wrong.

Testing on heldout data...
Using  NN -rank achieved 4.55% test accuracy
##################################################
Running: RF -rank
./btc 'train.csv' -headerless -f RF -rank -o RFrank.py -riskoverfit --yes
WARNING: Could not detect a GPU. Neural Network generation will be slow.

Brainome Daimensions(tm) 0.99 Copyright (c) 2019 - 2021 by Brainome, Inc. All Rights Reserved.
Licensed to:              Alexander Makhratchev  (Evaluation)
Expiration Date:          2021-04-30   58 days left
Number of Threads:        1
Maximum File Size:        30 GB
Maximum Instances:        unlimited
Maximum Attributes:       unlimited
Maximum Classes:          unlimited
Connected to:             daimensions.brainome.ai  (local execution)



Command:
    btc train.csv -headerless -f RF -rank -o RFrank.py -riskoverfit --yes

Start Time:                 03/03/2021, 08:52

Attribute Ranking:
    Important columns:          504, 559, 302, 460, 274, 93, 508
    Overfit risk:                   0.4%
    Ignoring columns:           0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560
    Test Accuracy Progression:     504 :   72.59%
                                   559 :   90.14%  change  +17.55%
                                   302 :   90.66%  change   +0.53%
                                   460 :   91.24%  change   +0.57%
                                   274 :   94.28%  change   +3.04%
                                   93 :   95.67%  change   +1.39%
                                   508 :   95.50%  change   -0.17%
                                   



Data:
    Input:                      train.csv (headerless csv)
    Target Column:              target
    Number of instances:        4177
    Number of attributes:       7
    Number of classes:          5
    Class Balance:              0: 20.61%, 1: 18.48%, 2: 16.83%, 3: 21.26%, 4: 22.82%

Learnability:
    Best guess accuracy:          22.82%
    Data Sufficiency:            Not enough data to generalize. [red]

Capacity Progression:            at [ 5%, 10%, 20%, 40%, 80%, 100% ]
    Optimal Machine Learner:           8,   8,   9,  10,  10,  11


Estimated Memory Equivalent Capacity for...
    Decision Tree:                  1036 parameters
    Neural Networks:                   1 parameters
    Random Forest:                   225 parameters

Risk that model needs to overfit for 100% accuracy using...
    Decision Tree:                32.34%
    Neural Networks:               0.26%
    Random Forest:                13.69%

Expected Generalization using...
    Decision Tree:                  8.97 bits/bit
    Neural Network:              1766.00 bits/bit
    Random Forest:                 18.56 bits/bit


Recommendations:


    Note: Machine learner type RF given by user.


System Meter:                          RFrank.py
    Classifier Type:                   Random Forest
    System Type:                       5-way classifier
    Training/Validation Split:         Unable to split dataset. The predictor was trained and evaluated on the same data.
    Accuracy:
        Best-guess accuracy:               22.82%


        Overall Model Accuracy:           100.00% (4177/4177 correct)
        Improvement over best guess:       77.18% of possible  77.18%

    Model Capacity (MEC):                      11 bits
    Generalization Ratio:                  878.60 bits/bit
    Model Efficiency:                        7.01 /parameter
    Generalization Index:                  302.93
    Percent of Data Memorized:               0.33%

    Full Confusion Matrix (count):
                 1.0 |   861     0     0     0     0 
                 2.0 |     0   772     0     0     0 
                 3.0 |     0     0   703     0     0 
                 4.0 |     0     0     0   888     0 
                 5.0 |     0     0     0     0   953 

    Accuracy by Class:
               class |    TP    FP    TN    FN     TPR      TNR      PPV      NPV       F1       TS 
                 1.0 |   861     0  3316     0  100.00%  100.00%  100.00%  100.00%  100.00%  100.00%
                 2.0 |   772     0  3405     0  100.00%  100.00%  100.00%  100.00%  100.00%  100.00%
                 3.0 |   703     0  3474     0  100.00%  100.00%  100.00%  100.00%  100.00%  100.00%
                 4.0 |   888     0  3289     0  100.00%  100.00%  100.00%  100.00%  100.00%  100.00%
                 5.0 |   953     0  3224     0  100.00%  100.00%  100.00%  100.00%  100.00%  100.00%

End Time:                     
Runtime Duration:             

Messages:
Warning: Remapped class labels to be contiguous. Use -cm if DET/ROC-based accuracy measurements are wrong.

Testing on heldout data...
Using  RF -rank achieved 4.28% test accuracy
##################################################
Running: RF
./btc 'train.csv' -headerless -f RF -o RF.py -riskoverfit --yes
WARNING: Could not detect a GPU. Neural Network generation will be slow.

Brainome Daimensions(tm) 0.99 Copyright (c) 2019 - 2021 by Brainome, Inc. All Rights Reserved.
Licensed to:              Alexander Makhratchev  (Evaluation)
Expiration Date:          2021-04-30   58 days left
Number of Threads:        1
Maximum File Size:        30 GB
Maximum Instances:        unlimited
Maximum Attributes:       unlimited
Maximum Classes:          unlimited
Connected to:             daimensions.brainome.ai  (local execution)



Command:
    btc train.csv -headerless -f RF -o RF.py -riskoverfit --yes

Start Time:                 03/03/2021, 08:55


Data:
    Input:                      train.csv (headerless csv)
    Target Column:              target
    Number of instances:        4177
    Number of attributes:       561
    Number of classes:          5
    Class Balance:              0: 20.61%, 1: 18.48%, 2: 16.83%, 3: 21.26%, 4: 22.82%

Learnability:
    Best guess accuracy:          22.82%
    Data Sufficiency:            Not enough data to generalize. [red]

Capacity Progression:            at [ 5%, 10%, 20%, 40%, 80%, 100% ]
    Optimal Machine Learner:           8,   9,  10,  11,  11,  12


Estimated Memory Equivalent Capacity for...
    Decision Tree:                  2250 parameters
    Neural Networks:                  38 parameters
    Random Forest:                    64 parameters

Risk that model needs to overfit for 100% accuracy using...
    Decision Tree:                67.52%
    Neural Networks:               4.19%
    Random Forest:                 3.99%

Expected Generalization using...
    Decision Tree:                  4.30 bits/bit
    Neural Network:                54.03 bits/bit
    Random Forest:                 65.27 bits/bit


Recommendations:


    Note: Machine learner type RF given by user.


System Meter:                          RF.py
    Classifier Type:                   Random Forest
    System Type:                       5-way classifier
    Training/Validation Split:         Unable to split dataset. The predictor was trained and evaluated on the same data.
    Accuracy:
        Best-guess accuracy:               22.82%


        Overall Model Accuracy:           100.00% (4177/4177 correct)
        Improvement over best guess:       77.18% of possible  77.18%

    Model Capacity (MEC):                       6 bits
    Generalization Ratio:                 1610.79 bits/bit
    Model Efficiency:                       12.86 /parameter
    Generalization Index:                  555.38
    Percent of Data Memorized:               0.18%

    Full Confusion Matrix (count):
                 1.0 |   861     0     0     0     0 
                 2.0 |     0   772     0     0     0 
                 3.0 |     0     0   703     0     0 
                 4.0 |     0     0     0   888     0 
                 5.0 |     0     0     0     0   953 

    Accuracy by Class:
               class |    TP    FP    TN    FN     TPR      TNR      PPV      NPV       F1       TS 
                 1.0 |   861     0  3316     0  100.00%  100.00%  100.00%  100.00%  100.00%  100.00%
                 2.0 |   772     0  3405     0  100.00%  100.00%  100.00%  100.00%  100.00%  100.00%
                 3.0 |   703     0  3474     0  100.00%  100.00%  100.00%  100.00%  100.00%  100.00%
                 4.0 |   888     0  3289     0  100.00%  100.00%  100.00%  100.00%  100.00%  100.00%
                 5.0 |   953     0  3224     0  100.00%  100.00%  100.00%  100.00%  100.00%  100.00%

End Time:                     
Runtime Duration:             

Messages:
Warning: Remapped class labels to be contiguous. Use -cm if DET/ROC-based accuracy measurements are wrong.

Testing on heldout data...
Using  RF achieved 0.84% test accuracy
##################################################
Running: NN
./btc 'train.csv' -headerless -f NN -o NN.py -riskoverfit --yes
WARNING: Could not detect a GPU. Neural Network generation will be slow.

Brainome Daimensions(tm) 0.99 Copyright (c) 2019 - 2021 by Brainome, Inc. All Rights Reserved.
Licensed to:              Alexander Makhratchev  (Evaluation)
Expiration Date:          2021-04-30   58 days left
Number of Threads:        1
Maximum File Size:        30 GB
Maximum Instances:        unlimited
Maximum Attributes:       unlimited
Maximum Classes:          unlimited
Connected to:             daimensions.brainome.ai  (local execution)



Command:
    btc train.csv -headerless -f NN -o NN.py -riskoverfit --yes

Start Time:                 03/03/2021, 08:57


Data:
    Input:                      train.csv (headerless csv)
    Target Column:              target
    Number of instances:        4177
    Number of attributes:       561
    Number of classes:          5
    Class Balance:              0: 20.61%, 1: 18.48%, 2: 16.83%, 3: 21.26%, 4: 22.82%

Learnability:
    Best guess accuracy:          22.82%
    Data Sufficiency:            Not enough data to generalize. [red]

Capacity Progression:            at [ 5%, 10%, 20%, 40%, 80%, 100% ]
    Optimal Machine Learner:           8,   9,  10,  11,  11,  12


Estimated Memory Equivalent Capacity for...
    Decision Tree:                  2250 parameters
    Neural Networks:                  38 parameters
    Random Forest:                    64 parameters

Risk that model needs to overfit for 100% accuracy using...
    Decision Tree:                67.52%
    Neural Networks:               4.19%
    Random Forest:                 3.99%

Expected Generalization using...
    Decision Tree:                  4.30 bits/bit
    Neural Network:                54.03 bits/bit
    Random Forest:                 65.27 bits/bit


Recommendations:


    Note: Machine learner type NN given by user.


Time to Build Estimates:

    Neural Network:              16 minutes

Priming model...done.
System Meter:                          NN.py
    Classifier Type:                   Neural Network
    System Type:                       5-way classifier
    Training/Validation Split:         Unable to split dataset. The predictor was trained and evaluated on the same data.
    Accuracy:
        Best-guess accuracy:               22.82%


        Overall Model Accuracy:            89.32% (3731/4177 correct)
        Improvement over best guess:       66.50% of possible  77.18%

    Model Capacity (MEC):                       2 bits
    Generalization Ratio:                 4316.42 bits/bit
    Model Efficiency:                       33.25 /parameter
    Generalization Index:                 1488.25
    Percent of Data Memorized:               0.07%

    Full Confusion Matrix (count):
                 1.0 |   831    13    17     0     0 
                 2.0 |    18   732    22     0     0 
                 3.0 |    17    34   652     0     0 
                 4.0 |     0     0     0   692   196 
                 5.0 |     0     0     0   129   824 

    Accuracy by Class:
               class |    TP    FP    TN    FN     TPR      TNR      PPV      NPV       F1       TS 
                 1.0 |   831    30  2900   416   66.64%   87.45%   96.52%   87.45%   78.84%   65.07%
                 2.0 |   732    40  2999   406   64.32%   88.08%   94.82%   88.08%   76.65%   62.14%
                 3.0 |   652    51  3079   395   62.27%   88.63%   92.75%   88.63%   74.51%   59.38%
                 4.0 |   692   196  3039   250   73.46%   92.40%   77.93%   92.40%   75.63%   60.81%
                 5.0 |   824   129  2907   317   72.22%   90.17%   86.46%   90.17%   78.70%   64.88%

End Time:                     
Runtime Duration:             

Messages:
Warning: Remapped class labels to be contiguous. Use -cm if DET/ROC-based accuracy measurements are wrong.

Testing on heldout data...
Using  NN achieved 6.1% test accuracy
##################################################
Running: DT
./btc 'train.csv' -headerless -f DT -o DT.py -riskoverfit --yes
WARNING: Could not detect a GPU. Neural Network generation will be slow.

Brainome Daimensions(tm) 0.99 Copyright (c) 2019 - 2021 by Brainome, Inc. All Rights Reserved.
Licensed to:              Alexander Makhratchev  (Evaluation)
Expiration Date:          2021-04-30   58 days left
Number of Threads:        1
Maximum File Size:        30 GB
Maximum Instances:        unlimited
Maximum Attributes:       unlimited
Maximum Classes:          unlimited
Connected to:             daimensions.brainome.ai  (local execution)



Command:
    btc train.csv -headerless -f DT -o DT.py -riskoverfit --yes

Start Time:                 03/03/2021, 09:02


Data:
    Input:                      train.csv (headerless csv)
    Target Column:              target
    Number of instances:        4177
    Number of attributes:       561
    Number of classes:          5
    Class Balance:              0: 20.61%, 1: 18.48%, 2: 16.83%, 3: 21.26%, 4: 22.82%

Learnability:
    Best guess accuracy:          22.82%
    Data Sufficiency:            Not enough data to generalize. [red]

Capacity Progression:            at [ 5%, 10%, 20%, 40%, 80%, 100% ]
    Optimal Machine Learner:           8,   9,  10,  11,  11,  12


Estimated Memory Equivalent Capacity for...
    Decision Tree:                  2250 parameters
    Neural Networks:                  38 parameters
    Random Forest:                    64 parameters

Risk that model needs to overfit for 100% accuracy using...
    Decision Tree:                67.52%
    Neural Networks:               4.19%
    Random Forest:                 3.99%

Expected Generalization using...
    Decision Tree:                  4.30 bits/bit
    Neural Network:                54.03 bits/bit
    Random Forest:                 65.27 bits/bit


Recommendations:


    Note: Machine learner type DT given by user.


Time to Build Estimates:
    Decision Tree:             a few seconds


System Meter:                          DT.py
    Classifier Type:                   Decision Tree
    System Type:                       5-way classifier
    Training/Validation Split:         Unable to split dataset. The predictor was trained and evaluated on the same data.
    Accuracy:
        Best-guess accuracy:               22.82%


        Overall Model Accuracy:            99.97% (4176/4177 correct)
        Improvement over best guess:       77.15% of possible  77.18%

    Model Capacity (MEC):                    2250 bits
    Generalization Ratio:                    4.28 bits/bit
    Model Efficiency:                        0.03 /parameter
    Generalization Index:                    1.48
    Percent of Data Memorized:              67.76%

    Full Confusion Matrix (count):
                 1.0 |   861     0     0     0     0 
                 2.0 |     1   771     0     0     0 
                 3.0 |     0     0   703     0     0 
                 4.0 |     0     0     0   888     0 
                 5.0 |     0     0     0     0   953 

    Accuracy by Class:
               class |    TP    FP    TN    FN     TPR      TNR      PPV      NPV       F1       TS 
                 1.0 |   861     0  3315     1   99.88%   99.97%  100.00%   99.97%   99.94%   99.88%
                 2.0 |   771     1  3405     0  100.00%  100.00%   99.87%  100.00%   99.94%   99.87%
                 3.0 |   703     0  3473     1   99.86%   99.97%  100.00%   99.97%   99.93%   99.86%
                 4.0 |   888     0  3288     1   99.89%   99.97%  100.00%   99.97%   99.94%   99.89%
                 5.0 |   953     0  3223     1   99.90%   99.97%  100.00%   99.97%   99.95%   99.90%

End Time:                     
Runtime Duration:             

Messages:
Warning: Remapped class labels to be contiguous. Use -cm if DET/ROC-based accuracy measurements are wrong.

Testing on heldout data...
Using  DT achieved 21.37% test accuracy
##################################################
Done Running!
Summary:
{'DT -rank': 12.49, 'NN -rank': 4.55, 'RF -rank': 4.28, 'RF': 0.84, 'NN': 6.1, 'DT': 21.37}
Best Test Accuracy: 21.37
Using: DT
Total Time Elapsed: 1207 seconds